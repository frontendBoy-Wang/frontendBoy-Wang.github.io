{"title":"是时候该知道React中的Key属性的作用与最佳实践了","uid":"e4991464a66a20205c1c693e50c451bc","slug":"react/是时候该知道React中的Key属性的作用与最佳实践了","date":"2023-05-04T14:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/react/是时候该知道React中的Key属性的作用与最佳实践了.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/21.png","content":"<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7cf023e3fb9d461081752ba443d2ee45~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1892&h=1050&s=653226&e=png&a=1&b=1b1b1b\" alt=\"image.png\"></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在React中，我们常常会遇到需要渲染列表或循环生成组件的场景。为了提高性能和优化用户体验，React引入了一个特殊的属性——key。本文将详细介绍React中key属性的作用、原理，并提供一些最佳实践。</p>\n<h1 id=\"一、Key属性的作用\"><a href=\"#一、Key属性的作用\" class=\"headerlink\" title=\"一、Key属性的作用\"></a>一、Key属性的作用</h1><p>Key属性是React要求使用者在渲染多个组件时提供的一个特殊属性。它的作用主要有以下几个方面：</p>\n<ol>\n<li><p>元素的唯一标识：Key属性用于帮助React识别每个元素的唯一性。React通过key属性来判断当新旧元素对比时，哪些元素需要更新、哪些元素需要重新渲染，从而提高渲染性能。</p>\n</li>\n<li><p>提高重排性能：在列表或循环生成组件的场景中，如果没有为每个元素指定key属性，React在进行diff算法比较时，会采用遍历比对的方式，导致性能下降。而指定了key属性后，React会通过key值快速定位到新旧元素之间的差异，从而减少不必要的重排操作。</p>\n</li>\n<li><p>组件状态保持：当组件在重新渲染时，React会优先复用具有相同key值的组件实例，而不是销毁并重新创建一个新的组件实例。这使得在动态列表或条件渲染中保持组件状态成为可能。</p>\n</li>\n</ol>\n<h1 id=\"二、Key属性原理解析\"><a href=\"#二、Key属性原理解析\" class=\"headerlink\" title=\"二、Key属性原理解析\"></a>二、Key属性原理解析</h1><p>为了更好地理解key属性的工作原理，我们可以简单了解一下React的reconciliation（协调）过程。当React渲染组件时，会创建一个虚拟DOM树，并与之前的虚拟DOM树进行比较，找出差异，并将差异应用到真实的DOM上。</p>\n<p>在这个比较过程中，React需要对每个元素进行唯一性判断，以确定是否需要更新该元素。而这个唯一性判断就依赖于key属性。React使用key属性的值来判断元素是否相同。如果两个元素的key相同，React会认为它们是同一个元素，从而复用之前生成的组件实例，减少不必要的重绘操作。</p>\n<p> 以下是一个简单的示例代码，展示了在使用key属性的情况下，React如何对比新旧元素，从而实现部分更新：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class MyList extends React.Component &#123;\n  constructor(props) &#123;\n    super(props);\n    this.state &#x3D; &#123;\n      items: [\n        &#123; id: 1, text: &#39;Item 1&#39; &#125;,\n        &#123; id: 2, text: &#39;Item 2&#39; &#125;,\n        &#123; id: 3, text: &#39;Item 3&#39; &#125;,\n      ],\n    &#125;;\n  &#125;\n\n  handleClick &#x3D; () &#x3D;&gt; &#123;\n    const newItems &#x3D; [\n      &#123; id: 1, text: &#39;Item 1&#39; &#125;,\n      &#123; id: 2, text: &#39;Item 2 (updated)&#39; &#125;,\n      &#123; id: 3, text: &#39;Item 3&#39; &#125;,\n    ];\n    this.setState(&#123; items: newItems &#125;);\n  &#125;;\n\n  render() &#123;\n    return (\n      &lt;div&gt;\n        &lt;ul&gt;\n          &#123;this.state.items.map(item &#x3D;&gt; (\n            &lt;li key&#x3D;&#123;item.id&#125;&gt;&#123;item.text&#125;&lt;&#x2F;li&gt;\n          ))&#125;\n        &lt;&#x2F;ul&gt;\n        &lt;button onClick&#x3D;&#123;this.handleClick&#125;&gt;Update&lt;&#x2F;button&gt;\n      &lt;&#x2F;div&gt;\n    );\n  &#125;\n&#125;</code></pre>\n\n<p>在这个例子中，使用了一个简单的数组作为组件的state，每个数组元素包含一个id和text属性。在渲染列表项时，我们使用了每个元素的id作为key属性。</p>\n<p>当用户点击“Update”按钮时，我们改变了数组中第二个元素的文本内容，并重新设置state。由于该元素的id没有改变，React会认为它是同一个元素，并且只会更新它的文本内容，而不是重新渲染整个列表。这样就可以大大提高渲染性能，避免不必要的重绘操作。</p>\n<h1 id=\"三、Key属性最佳实践\"><a href=\"#三、Key属性最佳实践\" class=\"headerlink\" title=\"三、Key属性最佳实践\"></a>三、Key属性最佳实践</h1><p>根据对key属性的作用和原理的理解，以下是一些使用key属性的最佳实践建议：</p>\n<ol>\n<li><p>使用唯一且稳定的值：为了确保key属性的有效性，我们应该尽量使用唯一且稳定的值作为key。通常情况下，使用列表中的每个元素的唯一标识（如id）作为key是一个不错的选择。</p>\n</li>\n<li><p>避免使用索引作为key：在列表或循环渲染场景中，有时会考虑使用索引作为key。然而，这种做法可能导致一些问题，在列表发生变化时，React可能会错误地复用组件实例，导致出现渲染错误或不必要的性能损失。</p>\n</li>\n<li><p>不要频繁改变key的值：频繁地改变key的值可能会导致React无法正确地复用组件实例，从而降低性能。因此，我们应该尽量避免在组件的生命周期内频繁改变key值。</p>\n</li>\n</ol>\n<p>示例代码：</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">✅\nfunction MyComponent(&#123; items &#125;) &#123;\n  return (\n    &lt;ul&gt;\n      &#123;items.map(item &#x3D;&gt; (\n        &lt;li key&#x3D;&#123;item.id&#125;&gt;&#123;item.name&#125;&lt;&#x2F;li&gt;\n      ))&#125;\n    &lt;&#x2F;ul&gt;\n  );\n&#125;\n\n❌\nfunction MyComponent(&#123; items &#125;) &#123;\n  return (\n    &lt;ul&gt;\n      &#123;items.map(（item，index） &#x3D;&gt; (\n        &lt;li key&#x3D;&#123;index&#125;&gt;&#123;item.name&#125;&lt;&#x2F;li&gt;\n      ))&#125;\n    &lt;&#x2F;ul&gt;\n  );\n&#125;</code></pre>\n\n<h1 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h1><p>在React中，key属性在列表或循环生成组件时起到了至关重要的作用。通过合理使用key属性，我们可以提高渲染性能、优化用户体验，并保持组件状态的一致性。同时，我们也需要遵循最佳实践，确保key属性的值唯一且稳定，避免索引作为key，并尽量避免频繁改变key的值。希望本文对你理解React中的key属性有所帮助！</p>\n","feature":false,"text":" 前言在React中，我们常常会遇到需要渲染列表或循环生成组件的场景。为了提高性能和优化用户体验，React引入了一个特殊的属性——key。本文将详细介绍React中key属性的作用、原理，并提供一些最佳实践。 一、Key属性的作用Key属性是React要求使用者在渲染多个组件时...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"react","slug":"react","count":3,"path":"api/categories/react.json"},{"name":"前端","slug":"react/前端","count":1,"path":"api/categories/react/前端.json"},{"name":"diff","slug":"react/前端/diff","count":1,"path":"api/categories/react/前端/diff.json"}],"tags":[{"name":"前端 react diff 虚拟dom","slug":"前端-react-diff-虚拟dom","count":1,"path":"api/tags/前端-react-diff-虚拟dom.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81Key%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">一、Key属性的作用</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81Key%E5%B1%9E%E6%80%A7%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">二、Key属性原理解析</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81Key%E5%B1%9E%E6%80%A7%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">三、Key属性最佳实践</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93%EF%BC%9A\"><span class=\"toc-text\">总结：</span></a></li></ol>","author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"mapped":true,"prev_post":{"title":"不会使用springboot写CRUD的前端不是好前端！","uid":"5a931d7f77125b67fdf3d08adcd64c28","slug":"go/不会使用springboot写CRUD的前端不是好前端！","date":"2023-05-10T14:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/go/不会使用springboot写CRUD的前端不是好前端！.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/53.png","text":"前言 在开发Web应用程序时，CRUD（Create、Read、Update、Delete）是最基本的操作。为了简化开发过程并提高效率，我们可以使用一些成熟的框架和工具来实现CRUD操作。Spring Boot作为一个快速开发框架，而MyBatis-Plus则是一个高效的持久层框...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"springBoot","slug":"springBoot","count":1,"path":"api/categories/springBoot.json"}],"tags":[{"name":"java","slug":"java","count":1,"path":"api/tags/java.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false},"next_post":{"title":"go-redis使用入门","uid":"3b6ae5332ee3a25497987c8c3919316f","slug":"go/go-redis使用入门","date":"2023-04-18T02:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/go/go-redis使用入门.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/41.png","text":"安装go-redis&#x2F;&#x2F;redis 6 go get github.com&#x2F;go-redis&#x2F;redis&#x2F;v8 &#x2F;&#x2F;redis 7 go get github.com&#x2F;go-redis&#x2F;re...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"go","slug":"go","count":3,"path":"api/categories/go.json"}],"tags":[{"name":"go","slug":"go","count":1,"path":"api/tags/go.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false}}