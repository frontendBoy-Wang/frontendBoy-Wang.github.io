{"title":"Scrapy爬虫初探","uid":"d691526bb195b63b807c15eb0d89f9b5","slug":"python/Scrapy爬虫初探","date":"2023-12-04T14:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/python/Scrapy爬虫初探.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/2.jpeg","content":"<h3 id=\"认识Scrapy\"><a href=\"#认识Scrapy\" class=\"headerlink\" title=\"认识Scrapy\"></a>认识Scrapy</h3><p>Scrapy 是一个开源的、高级的、快速的 Python 网络爬虫框架，用于从网站上提取数据。它提供了一种简单而强大的方式来定义爬取规则和处理爬取的数据。<br>其最初是为了页面抓取 (更确切来说, 网络抓取 )所设计的， 也可以应用在获取API所返回的数据(例如 Amazon Associates Web Services ) 或者通用的网络爬虫。</p>\n<p>下面的架构图明确说明了 Scrapy 主要有 5 个部分。</p>\n<ul>\n<li><p>引擎(Scrapy Engine)：引擎负责控制数据流在系统中所有组件中流动，并在相应动作发生时触发事件。</p>\n</li>\n<li><p>管道(Pipline)：主要提供存储服务，把需要存储的数据存储到相关数据库之中。</p>\n</li>\n<li><p>调度器(Scheduler)：主要提供两个功能，分别是去重和队列。</p>\n</li>\n<li><p>下载器(Downloader)：下载器负责获取页面数据并提供给引擎，而后提供给spider。</p>\n</li>\n<li><p>爬虫(Spiders)：Spider是Scrapy用户编写用于分析response并提取item(即获取到的item)或额外跟进的URL的类。每个spider负责处理一个特定(或一些)网站。</p>\n</li>\n</ul>\n<p>其实除了上述的内容外，Scrapy 还提供一些中间件，例如：下载器中间件(Downloader Middlewares)和爬虫中间件(Spider Middlewares)。</p>\n<p>所以，把上面完整的图可以画成如下：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/86415d4bfca942cfafeac516c00a7ac3~tplv-k3u1fbpfcp-image.image#?w=1115&h=401&s=12639&e=svg&b=f2f0fe\" alt=\"图片\"></p>\n<p>以下是 Scrapy 的一些主要特点和优势：</p>\n<ol>\n<li>快速高效：Scrapy 使用异步网络库并支持并发请求处理，使得爬取速度非常快。</li>\n<li>可扩展性：Scrapy 的架构设计非常灵活和可扩展，你可以根据需要编写自定义的中间件、管道和扩展。</li>\n<li>方便的选择器：Scrapy 内置了强大的选择器（XPath 和 CSS）来提取所需的数据，使得数据提取变得非常简便。</li>\n<li>自动的请求管理：Scrapy 能够自动管理请求的发送和处理，包括请求的调度、跟踪和优先级处理，以及失败重试等。</li>\n<li>数据流处理：Scrapy 提供了一个灵活的管道系统，可以对爬取到的数据进行处理和存储，例如存储在数据库中或输出为不同格式的文件。</li>\n<li>内置的调试工具：Scrapy 提供了有用的调试工具，如 Shell 和 Spider View，帮助开发者调试和测试爬虫程序。</li>\n<li>支持分布式爬取：Scrapy 可以与分布式消息队列（如 Redis）集成，实现分布式爬取，提高爬取效率和可扩展性。</li>\n</ol>\n<p>使用 Scrapy 可以轻松地创建一个完整的爬虫程序。你可以定义一个或多个爬虫文件，每个文件负责从特定的网站爬取数据，并定义数据提取规则。然后，通过运行 Scrapy 命令来启动爬虫并开始爬取。Scrapy 会自动处理请求、跟踪链接、提取数据并将其传递给管道进行处理。</p>\n<p>总之，Scrapy 是一个功能强大且灵活的网络爬虫框架，适用于各种规模的爬取任务。它提供了许多有用的功能和工具，帮助开发者以高效的方式从网站上抓取数据。无论是简单的数据采集还是复杂的网站抓取，Scrapy 都是一个值得考虑的选择。</p>\n<h3 id=\"创建虚拟环境\"><a href=\"#创建虚拟环境\" class=\"headerlink\" title=\"创建虚拟环境\"></a>创建虚拟环境</h3><ol>\n<li><p>打开命令行或终端。</p>\n</li>\n<li><p>使用以下命令在当前目录创建一个名为 “myenv” 的虚拟环境（你也可以将 “myenv” 替换为你喜欢的名称）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python -m venv myenv</code></pre></li>\n<li><p>激活虚拟环境：</p>\n<ul>\n<li>在 Windows 上，执行以下命令：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">myenv\\Scripts\\activate</code></pre></li>\n<li>在 macOS 和 Linux 上，执行以下命令：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">source myenv&#x2F;bin&#x2F;activate</code></pre></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"安装-Scrapy\"><a href=\"#安装-Scrapy\" class=\"headerlink\" title=\"安装 Scrapy\"></a>安装 Scrapy</h3><ol start=\"4\">\n<li>激活虚拟环境后，你会发现命令行提示符发生了变化，表明虚拟环境已经激活。</li>\n<li>在激活的虚拟环境中，使用以下命令安装 Scrapy：<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip install scrapy</code></pre></li>\n</ol>\n<p>这样就完成了在 Python 中创建虚拟环境并安装 Scrapy 的过程。现在你可以在虚拟环境中使用 Scrapy 来进行网络爬虫的开发和相关工作了。</p>\n<p>要创建一个 Scrapy 项目，请按照以下步骤进行操作：</p>\n<ol>\n<li><p>打开命令行或终端。</p>\n</li>\n<li><p>进入你想要创建项目的目录。例如，如果你想在桌面上创建项目，可以执行以下命令（根据你自己的文件路径进行修改）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cd Desktop</code></pre></li>\n<li><p>在目标目录中，使用以下命令创建 Scrapy 项目。将 “project_name” 替换为你想要的项目名称：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">scrapy startproject project_name</code></pre></li>\n<li><p>创建项目后，进入项目目录：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cd project_name</code></pre>\n<p>该命令将会创建包含下列内容的 <code>project_name</code> 目录:</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">project_name&#x2F;\n    scrapy.cfg\n    tutorial&#x2F;\n        __init__.py\n        items.py\n        pipelines.py\n        settings.py\n        spiders&#x2F;\n            __init__.py\n            ...</code></pre>\n\n<p>这些文件分别是:</p>\n<ul>\n<li>  <code>scrapy.cfg</code>: 项目的配置文件</li>\n<li>  <code>project_name/</code>: 该项目的python模块。之后您将在此加入代码。</li>\n<li>  <code>project_name/items.py</code>: 项目中的item文件.</li>\n<li>  <code>project_name/pipelines.py</code>: 项目中的pipelines文件.</li>\n<li>  <code>project_name/settings.py</code>: 项目的设置文件.</li>\n<li>  <code>project_name/spiders/</code>: 放置spider代码的目录.</li>\n</ul>\n<ol start=\"5\">\n<li><p>现在，你可以开始编写和配置你的 Scrapy 爬虫了。Scrapy 项目的主要部分是爬虫，可以在项目的 <code>spiders</code> 目录中创建爬虫文件。例如，可以执行以下命令创建一个名为 “example_spider” 的爬虫：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">scrapy genspider example_spider example.com</code></pre>\n\n<p>这将在 <code>spiders</code> 目录中创建一个名为 “example_spider.py” 的文件，并使用 “example.com” 作为起始网址。</p>\n</li>\n</ol>\n<h3 id=\"定义item类\"><a href=\"#定义item类\" class=\"headerlink\" title=\"定义item类\"></a>定义item类</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import scrapy\n\n\nclass TutorialItem(scrapy.Item):\n    # define the fields for your item here like:\n    # name &#x3D; scrapy.Field()\n    title &#x3D; scrapy.Field()\n    link &#x3D; scrapy.Field()\n    desc &#x3D; scrapy.Field()\n\n</code></pre>\n<p>这段代码是一个使用 Scrapy 框架编写的爬虫项目中的 Item 类定义。</p>\n<ul>\n<li><p>首先，导入了 <code>scrapy</code> 模块，这是 Scrapy 框架的核心模块。</p>\n</li>\n<li><p>接下来，定义了一个名为 <code>TutorialItem</code> 的类，该类继承自 Scrapy 框架提供的 <code>Item</code> 类。</p>\n</li>\n<li><p>在 <code>TutorialItem</code> 类中，定义了三个字段（Field）：</p>\n<ul>\n<li><code>title</code>：用于存储抓取到的网页标题信息。</li>\n<li><code>link</code>：用于存储抓取到的网页链接地址。</li>\n<li><code>desc</code>：用于存储抓取到的网页描述信息。</li>\n</ul>\n</li>\n</ul>\n<p>这段代码的作用是定义了一个 Item 类，用于存储爬取到的数据。在 Scrapy 中，Item 类似于数据模型，用于定义要抓取的数据结构。当爬虫解析网页并提取出需要的数据时，可以实例化该 Item 类并将数据存储到对应的字段中，以便后续处理和持久化。</p>\n<p>在实际编写爬虫时，你通常需要根据具体的需求自定义 Item 类，并根据需要添加更多的字段来存储抓取到的</p>\n<h3 id=\"创建爬虫\"><a href=\"#创建爬虫\" class=\"headerlink\" title=\"创建爬虫\"></a>创建爬虫</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import scrapy\n\n\nclass ExampleSpiderSpider(scrapy.Spider):\n    name &#x3D; &quot;example_spider&quot;\n    allowed_domains &#x3D; [&quot;example.com&quot;]\n    start_urls &#x3D; [&quot;https:&#x2F;&#x2F;example.com&quot;]\n\n    def parse(self, response):\n        print(response,&#39;wmq&#39;)</code></pre>\n\n\n<p>这段代码是一个使用 Scrapy 框架编写的简单的爬虫（Spider）。</p>\n<ul>\n<li><p>  首先，导入了 <code>scrapy</code> 模块，这是 Scrapy 框架的核心模块。</p>\n</li>\n<li><p>  接下来，定义了一个名为 <code>ExampleSpiderSpider</code> 的 Spider 类，该类继承自 Scrapy 框架提供的 <code>Spider</code> 类。</p>\n</li>\n<li><p>在 <code>ExampleSpiderSpider</code> 类中，定义了以下几个属性：</p>\n<ul>\n<li>  <code>name</code>：指定爬虫的名称为 “example_spider”。</li>\n<li>  <code>allowed_domains</code>：指定允许爬取的域名为 “<a href=\"http://example.com/\">example.com</a>“。这意味着爬虫只会爬取该域名下的网页。</li>\n<li>  <code>start_urls</code>：指定起始的 URL 列表为 [“<a href=\"https://example.com/\">https://example.com</a>“]。这是爬虫开始爬取的起点。</li>\n</ul>\n</li>\n<li><p>  最后，定义了一个名为 <code>parse</code> 的方法，这是 Scrapy 框架中用于解析网页响应的默认方法。在这个方法中，通过打印输出了响应对象 <code>response</code> 和字符串 “wmq”。</p>\n</li>\n</ul>\n<p>这段代码的作用是创建一个爬虫，从 “<a href=\"https://example.com/\">https://example.com</a>“ 这个网页开始抓取数据，并在解析网页响应时打印输出相应的信息。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import scrapy\n\nclass QuotesSpider(scrapy.Spider):\n    name &#x3D; &quot;wall&quot;  # 定义爬虫的名称\n\n    def start_requests(self):\n        # 定义起始的 URL 列表\n        urls &#x3D; [\n            &#39;https:&#x2F;&#x2F;quotes.toscrape.com&#x2F;page&#x2F;1&#x2F;&#39;,\n            &#39;https:&#x2F;&#x2F;quotes.toscrape.com&#x2F;page&#x2F;2&#x2F;&#39;,\n            &#39;https:&#x2F;&#x2F;wallhaven.cc&#x2F;&#39;,\n        ]\n        for url in urls:\n            # 对于每个 URL，创建一个 Scrapy 请求，并指定回调函数为 self.parse\n            yield scrapy.Request(url&#x3D;url, callback&#x3D;self.parse)\n\n    def parse(self, response):\n        # 解析页面内容的回调函数\n        page &#x3D; response.url.split(&quot;&#x2F;&quot;)[-2]  # 从 URL 中提取页面编号\n        filename &#x3D; f&#39;quotes-&#123;page&#125;.html&#39;  # 根据页面编号构造文件名\n        with open(filename, &#39;wb&#39;) as f:  # 以二进制写入模式打开文件\n            f.write(response.body)  # 将页面内容写入文件\n        self.log(f&#39;Saved file &#123;filename&#125;&#39;)  # 记录日志，表示文件保存成功\n</code></pre>\n\n<p>运行爬虫：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">scrapy  crawl wall</code></pre>\n<p><code>wall</code> 为爬虫中定义的name <code>name = &quot;wall&quot;  # 定义爬虫的名称</code></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a07a43bf8cd640cea68e24637f8eaa4b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=3008&h=1960&s=678167&e=png&a=1&b=2e313d\" alt=\"image.png\"></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8702a0e718b84500a830c8231469e3e7~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=3008&h=1960&s=688405&e=png&a=1&b=2e313d\" alt=\"image.png\"></p>\n<p>以上就是运行爬虫之后输出的内容了<br>我这里保存为两个html文件了</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8516ca93c827402ab4a1c8856c2be294~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=3094&h=1896&s=807786&e=png&a=1&b=fefefe\" alt=\"image.png\"></p>\n<p>拿到了html网页下面就可以根据自己的需要去解析和清洗数据或者保存到数据库了。<br>本篇就到此为止，下一篇介绍如何使用xpath和bs4来获取自己想要的数据</p>\n","feature":false,"text":"认识ScrapyScrapy 是一个开源的、高级的、快速的 Python 网络爬虫框架，用于从网站上提取数据。它提供了一种简单而强大的方式来定义爬取规则和处理爬取的数据。其最初是为了页面抓取 (更确切来说, 网络抓取 )所设计的， 也可以应用在获取API所返回的数据(例如 Ama...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"技术","slug":"技术","count":2,"path":"api/categories/技术.json"},{"name":"爬虫","slug":"技术/爬虫","count":1,"path":"api/categories/技术/爬虫.json"},{"name":"Scrapy","slug":"技术/爬虫/Scrapy","count":1,"path":"api/categories/技术/爬虫/Scrapy.json"}],"tags":[{"name":"python 爬虫","slug":"python-爬虫","count":1,"path":"api/tags/python-爬虫.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A4%E8%AF%86Scrapy\"><span class=\"toc-text\">认识Scrapy</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">创建虚拟环境</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-Scrapy\"><span class=\"toc-text\">安装 Scrapy</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89item%E7%B1%BB\"><span class=\"toc-text\">定义item类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E7%88%AC%E8%99%AB\"><span class=\"toc-text\">创建爬虫</span></a></li></ol>","author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"mapped":true,"prev_post":{"title":"Three.js深入浅出：4-three.js中的光源","uid":"e7d4321320711fd3eb23409ba53d32b8","slug":"threeJS/Three.js深入浅出：4-three.js中的光源","date":"2023-12-19T14:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/threeJS/Three.js深入浅出：4-three.js中的光源.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/2.jpeg","text":"序言： 在现代互联网时代，Web 技术的快速发展使得 Web 开发领域日新月异。随着互联网内容变得越来越丰富、复杂，用户对于网页和应用程序的交互性和视觉效果提出了更高的要求。在这样的背景下，基于 WebGL 的 3D 图形技术越来越受到关注和重视。 而在众多的 3D 图形库中，T...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"three.js","slug":"three-js","count":1,"path":"api/categories/three-js.json"}],"tags":[{"name":"前端 webGL three.js","slug":"前端-webGL-three-js","count":1,"path":"api/tags/前端-webGL-three-js.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false},"next_post":{"title":"一文了解TCP,IP协议和一个超好用的IP代理","uid":"27b92f13741f11c774ff04ddfacad943","slug":"http/一文了解TCP,IP协议和一个超好用的IP代理","date":"2023-11-04T14:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/http/一文了解TCP,IP协议和一个超好用的IP代理.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/3.png","text":"前言在当今互联网时代，TCP/IP协议无疑是计算机网络中最为重要和广泛应用的协议之一。作为网络通信的基石，TCP/IP协议的设计与实现对于理解网络通信、构建网络应用具有至关重要的意义。本文将深入探讨TCP/IP协议的原理、架构和功能，并探索其在实际应用中的重要性。 IP代理 IP...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"网络","slug":"网络","count":2,"path":"api/categories/网络.json"},{"name":"TCP/IP","slug":"网络/TCP-IP","count":2,"path":"api/categories/网络/TCP-IP.json"},{"name":"HTTP","slug":"网络/TCP-IP/HTTP","count":2,"path":"api/categories/网络/TCP-IP/HTTP.json"}],"tags":[{"name":"网络协议","slug":"网络协议","count":2,"path":"api/tags/网络协议.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false}}