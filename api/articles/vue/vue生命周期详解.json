{"title":"VUE生命周期详解","uid":"b71e680387a5f2c0fe8c8eb63677ef1b","slug":"vue/vue生命周期详解","date":"2023-03-15T02:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/vue/vue生命周期详解.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/35.png","content":"<h1 id=\"VUE生命周期\"><a href=\"#VUE生命周期\" class=\"headerlink\" title=\"VUE生命周期\"></a>VUE生命周期</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>大家好我是迁客，一个初入行的小白！痴迷技术，对programming有着极大的兴趣和爱好。每周写一篇自己个人成长的技术博客！既是对自己的一个学习技术的一个记录，也是督促自己，坚持下去！加油Fighting！<br>==从明天起，做一个新思维的人<br>继承，多态，层层封装<br>从明天起,不再关心内存管理<br>让每一条数据，自动放到合适的位子上<br>从明天起，我将为每一个对象<br>取一个温暖的名字<br>它们用驼峰命名，优雅，大方<br>陌生人，我也祝福你哈<br>愿你不再为系统级bug烦恼<br>愿你在平台之间肆意游荡<br>愿你不再关心溢出与异常==</p></blockquote>\n<ul>\n<li>VUE的生命周期大致分为8个阶段：</li>\n</ul>\n<p>1.beforeCreate(创建前):在数据观测和初始化事件还未开始</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">beforeCreate: function () &#123;\n            console.group(&#39;------beforeCreate创建前状态------&#39;);\n            console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;el     : &quot; + this.$el); &#x2F;&#x2F;undefined\n            console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;data   : &quot; + this.$data); &#x2F;&#x2F;undefined\n            console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;message: &quot; + this.message)\n        &#125;</code></pre>\n\n\n<p>2.created(创建后):完成数据观测，属性和方法的运算，初始化事件，$el属性还没有显示出来</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">created: function () &#123;\n            console.group(&#39;------created创建完毕状态------&#39;);\n            console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;el     : &quot; + this.$el); &#x2F;&#x2F;undefined\n            console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;data   : &quot; + this.$data); &#x2F;&#x2F;已被初始化\n            console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;message: &quot; + this.message); &#x2F;&#x2F;已被初始化\n        &#125;</code></pre>\n<p>3.beforeMount(载入前):<br>        在挂载开始之前被调用，相关的render函数首次被调用。<br>        实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。注意此时还没有挂载html到页面上。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">beforeMount: function () &#123;\n            console.group(&#39;------beforeMount挂载前状态------&#39;);\n            console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;el     : &quot; + (this.$el)); &#x2F;&#x2F;已被初始化\n            console.log(this.$el);\n            console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;data   : &quot;, this.$data); &#x2F;&#x2F;已被初始化\n            console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;message: &quot;, this.message); &#x2F;&#x2F;已被初始化\n        &#125;,</code></pre>\n\n\n<p>​<br>4.mounted（载入后）:<br>​        在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。<br>​        实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">mounted: function () &#123;\n           console.group(&#39;------mounted 挂载结束状态------&#39;);\n           console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;el     : &quot; + this.$el); &#x2F;&#x2F;已被初始化\n           console.log(this.$el);\n           console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;data   : &quot; + this.$data); &#x2F;&#x2F;已被初始化\n           console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;message: &quot; + this.message); &#x2F;&#x2F;已被初始化\n       &#125;,</code></pre>\n<p> 5.beforeUpdate（更新前）:<br>     在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">beforeUpdate: function () &#123;\n    \n            console.group(&#39;beforeUpdate 更新前状态&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;》&#39;);\n            console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;el     : &quot; + this.$el);\n            console.log(this.$el);\n            console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;data   : &quot; + this.$data);\n            console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;message: &quot; + this.message);\n        &#125;,</code></pre>\n<p> 6.updated（更新后）:<br>     在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。<br>     调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。<br>     该钩子在服务器端渲染期间不被调用。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">updated: function () &#123;\n            console.group(&#39;updated 更新完成状态&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;》&#39;);\n            console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;el     : &quot; + this.$el);\n            console.log(this.$el);\n            console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;data   : &quot; + this.$data);\n            console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;message: &quot; + this.message);\n        &#125;,</code></pre>\n\n<p> 7.beforeDestroy（销毁前）:在实例销毁之前调用。实例仍然完全可用。<br> <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">beforeDestroy: function () &#123;\n           console.group(&#39;beforeDestroy 销毁前状态&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;》&#39;);\n           console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;el     : &quot; + this.$el);\n           console.log(this.$el);\n           console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;data   : &quot; + this.$data);\n           console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;message: &quot; + this.message);\n       &#125;,</code></pre><br> 8.destroyed（销毁后）:<br>        在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">destroyed: function () &#123;\n            console.group(&#39;destroyed 销毁完成状态&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&#39;);\n            console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;el     : &quot; + this.$el);\n            console.log(this.$el);\n            console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;data   : &quot; + this.$data);\n            console.log(&quot;%c%s&quot;, &quot;color:red&quot;, &quot;message: &quot; + this.message)\n        &#125;</code></pre>\n\n<p>==好了，最后有什么不足和错误的地方欢迎大家在评论区指出，希望大家对大家有所帮助，谢谢==</p>\n","feature":false,"text":"VUE生命周期 大家好我是迁客，一个初入行的小白！痴迷技术，对programming有着极大的兴趣和爱好。每周写一篇自己个人成长的技术博客！既是对自己的一个学习技术的一个记录，也是督促自己，坚持下去！加油Fighting！==从明天起，做一个新思维的人继承，多态，层层封装从明天起...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"vue","slug":"vue","count":2,"path":"api/categories/vue.json"}],"tags":[{"name":"vue","slug":"vue","count":2,"path":"api/tags/vue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#VUE%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">VUE生命周期</span></a></li></ol>","author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"mapped":true,"prev_post":{"title":"react18新特性","uid":"353ce1343760f6de753e88dbaf24c997","slug":"react/听说你还不知道React18新特性？看我给你整明白！","date":"2023-03-17T02:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/react/听说你还不知道React18新特性？看我给你整明白！.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/37.png","text":" 前言目前react的最新版本是18.2.0。React 团队在 2022 年 3 月 29 日正式发布了 React 的第 18 个版本 是 React 框架的最新版本，它主要着眼于解决 React 应用在性能、稳定性、开发体验等方面的问题。本文将介绍 React 18 的升级...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"reacr","slug":"reacr","count":1,"path":"api/categories/reacr.json"}],"tags":[{"name":"react","slug":"react","count":1,"path":"api/tags/react.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false},"next_post":{"title":"VUE3新特性","uid":"76203a7a58be01e7fd00254c86e3c923","slug":"vue/再遇vue之vue3新特性","date":"2023-03-15T02:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/vue/再遇vue之vue3新特性.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/66.jpeg","text":" 想起来上次好好认真学vue，还是刚实习那会儿，如今回头看，已是三年有余了。vue从当初的vue2也大升级到vue3了。新的 API，新的语法糖，新的响应式…如今，我已不是以前那个小白了，对vue和js的使用也越来越熟练了，打算在好好系统的复习一下vue3的新特性。 vue2和v...","link":"","photos":[],"count_time":{"symbolsCount":"9.6k","symbolsTime":"9 mins."},"categories":[{"name":"vue","slug":"vue","count":2,"path":"api/categories/vue.json"}],"tags":[{"name":"vue","slug":"vue","count":2,"path":"api/tags/vue.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false}}