{"title":"vite使用入门","uid":"89c83197a75c1245116b0a9c7aba1d2b","slug":"vue/vite3使用指南,小白再也不用担心项目配置问题了","date":"2023-04-13T02:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/vue/vite3使用指南,小白再也不用担心项目配置问题了.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/43.png","content":"<p>为开发提供极速响应v4.1.0</p>\n<p>目前Vite已经更新到v4.1.0的版本了</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ebd20490fd24e6e95619f21ff37d08f~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<h1 id=\"vite的特性\"><a href=\"#vite的特性\" class=\"headerlink\" title=\"vite的特性\"></a>vite的特性</h1><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/53f8b854a4f04c9dab1c965c58b69eec~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<ul>\n<li>  💡极速的服务启动，意思就是一个字<strong>快</strong></li>\n<li>  <strong>⚡️</strong>轻量快速的热重载，就是说热更新也很快</li>\n<li>  🔧丰富的功能，支持的工具集比较多，开箱即用</li>\n<li>  📦优化的构建 对于生产环境的构建有更好的优化</li>\n<li>  🔩通用的插件，在开发和构建之间共享 Rollup-superset 插件接口。</li>\n<li>完全类型化的API 使用TS，有较好的语法提示和类型支持</li>\n</ul>\n<h1 id=\"使用Vite创建项目\"><a href=\"#使用Vite创建项目\" class=\"headerlink\" title=\"使用Vite创建项目\"></a>使用Vite创建项目</h1><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aff529e6bbef4e1ca0a449d31f141098~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>使用npm</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm create vite@latest</code></pre>\n\n<p>使用yarn</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">yarn create vite</code></pre>\n\n<p>使用pnpm</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pnpm create vite</code></pre>\n\n<p>如果使用vite创建Vue项目的话，可以创建带模版的vue项目</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># npm 6.x\nnpm create vite@latest my-vue-app --template vue\n\n# npm 7+, extra double-dash is needed:\nnpm create vite@latest my-vue-app -- --template vue\n\n# yarn\nyarn create vite my-vue-app --template vue\n\n# pnpm\npnpm create vite my-vue-app --template vue</code></pre>\n\n<p>查看 <a href=\"https://github.com/vitejs/vite/tree/main/packages/create-vite\">create-vite</a> 以获取每个模板的更多细节：vanilla，vanilla-ts, vue, vue-ts，react，react-ts，react-swc，react-swc-ts，preact，preact-ts，lit，lit-ts，svelte，svelte-ts。</p>\n<h1 id=\"区分开发环境，测试环境和生产环境\"><a href=\"#区分开发环境，测试环境和生产环境\" class=\"headerlink\" title=\"区分开发环境，测试环境和生产环境\"></a>区分开发环境，测试环境和生产环境</h1><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/771bdfcbc78745e28a3c83cca630831f~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>首先在项目根目录下创建.env文件,Vite 使用 <a href=\"https://github.com/motdotla/dotenv\">dotenv</a> 从你的 <a href=\"https://cn.vitejs.dev/config/shared-options.html#envdir\">环境目录</a> 中的下列文件加载额外的环境变量</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">.env                # 所有情况下都会加载\n.env.local          # 所有情况下都会加载，但会被 git 忽略\n.env.[mode]         # 只在指定模式下加载\n.env.[mode].local   # 只在指定模式下加载，但会被 git 忽略\n\n.env.development\t\t# 开发模式\n.env.production\t\t\t# 生产模式\n.env.test\t\t\t\t\t\t# 测试模式</code></pre>\n\n<p><em>默认情况下</em></p>\n<ul>\n<li>  <em>npm run dev 会加载 .env 和 .env.development 内的配置</em></li>\n<li>  <em>npm run build 会加载 .env 和 .env.production 内的配置</em></li>\n<li>  <em>mode 可以通过命令行 –mode 选项来重写。</em></li>\n</ul>\n<p>**</p>\n<p><em>在package.json文件中配置一个test命令</em></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/686ea238e40f4f05a00a70e4d1dc1f24~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>**</p>\n<p><strong>环境加载优先级</strong></p>\n<p>一份用于指定模式的文件（例如 <strong>.env.production</strong>）会比通用形式的优先级更高（例如 <strong>.env</strong>）。</p>\n<p>另外，Vite 执行时已经存在的环境变量有最高的优先级，不会被 <strong>.env</strong> 类文件覆盖。例如当运行 <strong>VITE_SOME_KEY=123 vite build</strong> 的时候。</p>\n<p><strong>.env</strong> 类文件会在 Vite 启动一开始时被加载，而改动会在重启服务器后生效</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">console.log(&#39;获取当前目录&#39;,process.cwd());\n&#x2F;&#x2F;参数：模式：development||production,入口文件，修改.env变量前缀\nconst env&#x3D;loadEnv(&#39;development&#39;,process.cwd(),&#39;wmq&#39;)\nconsole.log(env);</code></pre>\n\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d4b42ddb1b24d0dbf23a47df97fa859~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>加载的环境变量也会通过 import.meta.env 以字符串形式暴露给客户端源码。</p>\n<p>为了防止意外地将一些环境变量泄漏到客户端，只有以 VITE_ 为前缀的变量才会暴露给经过 vite 处理的代码</p>\n<p>所以这里如果没配置前缀的话，import.meta.env 就访问不到了</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">VITE_BASE_API&#x3D;base&#x2F;api\t这个可以被访问到\nwmq_client&#x3D;&#39;aa🤔&#39;。访问不了</code></pre>\n\n<p>使用envPrefix方法可以更换环境变量的前缀</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f1511c1dcaf42909f003ae58535930b~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>然后在main.js文件中去打印import.mate.env的环境变量，在不同的开发模式下就可以获取到相应的环境变量了</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/027199697ba747229b327d4859712b2a~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>开发模式下</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/59225f2d674e4993b6ab007b94096fcd~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>生产模式下</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/041a3ec183f145a69fc6ec89e94178f3~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>测试模式下</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ccc060299a7471492472867d289e2ba~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<p>通过验证我们可以看出，不管是什么模式下，都可以加载到.env文件中的变量</p>\n<p><strong>更改.env的默认地址</strong></p>\n<p>我们现在的.env文件都是建立在根目录的，如果.env.XX的文件太多，会显得我们的项目目录很乱，我们能将.env放在一个统一的文件夹内吗？</p>\n<p>可以通过<strong>envDir</strong>配置来改变！参考：<a href=\"https://link.juejin.cn/?target=https://vitejs.cn/vite3-cn/config/shared-options.html%23envdir\">共享配置 | Vite 官方中文文档</a></p>\n<p>envDir用于加载 .env 文件的目录。可以是一个绝对路径，也可以是相对于项目根的路径。</p>\n<ul>\n<li>  <strong>类型：</strong> string</li>\n<li>  <strong>默认：</strong> root</li>\n</ul>\n<p>比如，我们在vite.config.js中这样配置</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import &#123; defineConfig &#125; from &quot;vite&quot;;\nexport default defineConfig( &#123;\n  envDir:&quot;env&quot;\n&#125;);</code></pre>\n\n<p>然后，所有的.env.xxx文件就可以放在项目根目录的<strong>env</strong>文件夹下了。</p>\n<h1 id=\"配置服务端选项\"><a href=\"#配置服务端选项\" class=\"headerlink\" title=\"配置服务端选项\"></a>配置服务端选项</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">export default defineConfig(&#123;\n  server: &#123;\n    host: &#39;localhost&#39;,&#x2F;&#x2F;  开放服务器启动的地址，默认时localhost\n    port: 9000,&#x2F;&#x2F;项目启动端口\n    open: true,&#x2F;&#x2F;项目启动时是否打开浏览器\n    base:&#39;&#x2F;&#39;,&#x2F;&#x2F;用于代理 Vite 作为子文件夹时使用。\n    cors: true,&#x2F;&#x2F;为开发服务器配置 CORS。默认启用并允许任何源，传递一个 选项对象 来调整行为或设为 false 表示禁用。\n    headers:&#123;&#125;,&#x2F;&#x2F;指定服务端响应的headers信息\n    strictPort:true,&#x2F;&#x2F;设为 true 时若端口已被占用则会直接退出，而不是尝试下一个可用端口。\n    proxy: &#123;&#x2F;&#x2F;配置后端代理\n      &#x2F;&#x2F; 字符串简写写法\n      &#39;&#x2F;foo&#39;: &#39;http:&#x2F;&#x2F;localhost:4567&#39;,\n      &#x2F;&#x2F; 选项写法\n      &#39;&#x2F;api&#39;: &#123;\n        target: &#39;http:&#x2F;&#x2F;jsonplaceholder.typicode.com&#39;,&#x2F;&#x2F;指向后端地址\n        changeOrigin: true,&#x2F;&#x2F;允许跨域\n        rewrite: (path) &#x3D;&gt; path.replace(&#x2F;^&#x2F;api&#x2F;, &#39;&#39;)\n      &#125;,\n      &#x2F;&#x2F; 正则表达式写法\n      &#39;^&#x2F;fallback&#x2F;.*&#39;: &#123;\n        target: &#39;http:&#x2F;&#x2F;jsonplaceholder.typicode.com&#39;,\n        changeOrigin: true,\n        rewrite: (path) &#x3D;&gt; path.replace(&#x2F;^&#x2F;fallback&#x2F;, &#39;&#39;)\n      &#125;,\n      &#x2F;&#x2F; 使用 proxy 实例\n      &#39;&#x2F;api&#39;: &#123;\n        target: &#39;http:&#x2F;&#x2F;jsonplaceholder.typicode.com&#39;,\n        changeOrigin: true,\n        configure: (proxy, options) &#x3D;&gt; &#123;\n          &#x2F;&#x2F; proxy 是 &#39;http-proxy&#39; 的实例\n        &#125;\n      &#125;,\n      &#x2F;&#x2F; Proxying websockets or socket.io\n      &#39;&#x2F;socket.io&#39;: &#123;\n        target: &#39;ws:&#x2F;&#x2F;localhost:3000&#39;,\n        ws: true\n      &#125;\n    &#125;，\n  &#125;\n&#125;)</code></pre>\n\n<h3 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h3><p>其中server是比较常用的重要属性，特别是proxy主要是配置代理后端API地址的</p>\n<ul>\n<li>  target</li>\n<li>  changeOrigin</li>\n<li>  rewrite</li>\n</ul>\n<p>服务端的选项常用的大概就这些了，期中最常用的就是解决开发过程中的跨域问题了，需要在proxy里面去设置即可，其他的不常用的选项如有用到去查vite官网的<code>服务器选项</code></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0df5efd1a6b74dcf99b04cd831dff814~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<h1 id=\"配置CSS\"><a href=\"#配置CSS\" class=\"headerlink\" title=\"配置CSS\"></a>配置CSS</h1><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export default defineConfig(&#123;\n  &#x2F;&#x2F;css配置\n  css: &#123;\n    &#x2F;&#x2F; 开发模式为true，生产模式为flase, devSourcemap:true,&#x2F;&#x2F;源代码映射\n    devSourcemap:command &#x3D;&#x3D;&#x3D; &#39;serve&#39;,\n    &#x2F;&#x2F; css模块化配置项\n    modules:&#123;\n      &#x2F;&#x2F; 是否开启模块化。模块化or全局化\n      scopeBehaviour: &#39;global&#39; | &#39;local&#39;,\n      &#x2F;&#x2F; css模块化的路径\n      globalModulePaths: RegExp[],\n      &#x2F;&#x2F; 更改生成的哈希名称，一个字符串模板或者通过函数返回\n      generateScopedName: string| ((name, filename, css) &#x3D;&gt; string),\n      &#x2F;&#x2F; 生成hash名称的前缀\n      hashPrefix: string,\n      &#x2F;&#x2F; 修改生成的配置对象的key的展示形式(驼峰还是中划线形式)\n      localsConvention:&#39;camelCase&#39;\n        | &#39;camelCaseOnly&#39;\n        | &#39;dashes&#39;\n        | &#39;dashesOnly&#39;\n        | null\n    &#125;,\n    &#x2F;&#x2F; 预处理器配置项\n    preprocessorOptions: &#123;\n      less: &#123;\n        math: &quot;always&quot;,\n      &#125;,\n      scss: &#123;\n        additionalData: &#39;@import &quot;src&#x2F;assets&#x2F;styles&#x2F;var.scss&quot;;&#39;\n      &#125;\n    &#125;,\n    \n    postcss:&#123;\n      &#x2F;&#x2F; 一些配置\n    &#125;\n\n  &#125;\n&#125;)</code></pre>\n\n<p>css的配置主要是一些css的模块化和预处理器的配置。比如scss，less，postcss等等</p>\n<h3 id=\"模块化属性\"><a href=\"#模块化属性\" class=\"headerlink\" title=\"模块化属性\"></a>模块化属性</h3><ul>\n<li>  scopeBehaviour：是否开启模块化，global为全局化，local为模块化</li>\n<li>  globalModulePaths：css模块化的路径</li>\n<li>  generateScopedName：生成的哈希名称，一个字符串模板或者通过函数返回</li>\n<li>  hashPrefix：生成hash名称的前缀</li>\n<li>localsConvention：生成的配置对象的key的展示形式(驼峰还是中划线形式)</li>\n</ul>\n<p>其他的less，scss，postcss属性使用的时候查询官方文档即可</p>\n<h1 id=\"其他的一些常用小配置\"><a href=\"#其他的一些常用小配置\" class=\"headerlink\" title=\"其他的一些常用小配置\"></a>其他的一些常用小配置</h1><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/251a4ed36bbb4bd39cc4bd8b69e02644~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n<h3 id=\"配置别名\"><a href=\"#配置别名\" class=\"headerlink\" title=\"配置别名\"></a>配置别名</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">export default defineConfig(&#123;\n  resolve:&#123;\n        alias:&#123;\n            &#39;@&#39;: resolve(__dirname, &#39;src&#39;)&#x2F;&#x2F;配置别名\n        &#125;\n    &#125;\n&#125;)</code></pre>\n\n<h3 id=\"打包速度的问题\"><a href=\"#打包速度的问题\" class=\"headerlink\" title=\"打包速度的问题\"></a>打包速度的问题</h3><p>vite在打包中会计算包的大小，但是只是计算不做处理，会长打包时间，所以可以在build中再添加一个配置项关闭打包计算。</p>\n<p>启用/禁用 gzip 压缩大小报告。压缩大型输出文件可能会很慢，因此禁用该功能可能会提高大型项目的构建性能。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">brotliSize: false,&#x2F;&#x2F;vite2\nreportCompressedSize:false &#x2F;&#x2F;vite3</code></pre>\n\n<h3 id=\"gizp压缩\"><a href=\"#gizp压缩\" class=\"headerlink\" title=\"gizp压缩\"></a>gizp压缩</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">plugins: [vue(),\n      viteCompression(&#123;\n        &#x2F;&#x2F;生成压缩包gz\n        verbose: true,\n        disable: false,\n        threshold: 10240,\n        algorithm: &#39;gzip&#39;,\n        ext: &#39;.gz&#39;,\n    &#125;),],</code></pre>\n\n<p>我把打包后的项目用express稍微搭了个后台跑了一下，发现express开启了gzip和没开启gzip，都是一样的。不知道vite是不是默认启动gzip压缩？有了解的小伙伴也可以说一下。</p>\n<h3 id=\"生产环境移除console\"><a href=\"#生产环境移除console\" class=\"headerlink\" title=\"生产环境移除console\"></a>生产环境移除console</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">build:&#123;\n  ...\n  terserOptions: &#123;\n      compress: &#123;\n        drop_console: true,\n        drop_debugger: true\n      &#125;\n  &#125;\n&#125;</code></pre>\n\n<p>以上就是vite的一些常用的项目配置了，基本上绝大多数都是在项目中需要经常使用的，而且随着前端技术的不断发展，构建工具也是在不停的更新迭代，作为技术人员也得紧跟技术潮流，也许你现在的项目用的不是vite，但是你不能说你不会，所谓技多不压身嘛，小伙伴们赶紧学起来吧！🚀</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e67d78b9370547fc93f12920321e1cdf~tplv-k3u1fbpfcp-zoom-1.image\"></p>\n","feature":false,"text":"为开发提供极速响应v4.1.0 目前Vite已经更新到v4.1.0的版本了 vite的特性 💡极速的服务启动，意思就是一个字快 ⚡️轻量快速的热重载，就是说热更新也很快 🔧丰富的功能，支持的工具集比较多，开箱即用 📦优化的构建 对于生产环境的构建有更好的优化 🔩通用的插件，在开发和...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"vite","slug":"vite","count":1,"path":"api/categories/vite.json"}],"tags":[{"name":"vite","slug":"vite","count":1,"path":"api/tags/vite.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vite%E7%9A%84%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">vite的特性</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8Vite%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">使用Vite创建项目</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8C%BA%E5%88%86%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E5%92%8C%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">区分开发环境，测试环境和生产环境</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">配置服务端选项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#server\"><span class=\"toc-text\">server</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AECSS\"><span class=\"toc-text\">配置CSS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E5%8C%96%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">模块化属性</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%B0%8F%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">其他的一些常用小配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E5%88%AB%E5%90%8D\"><span class=\"toc-text\">配置别名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%8C%85%E9%80%9F%E5%BA%A6%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">打包速度的问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#gizp%E5%8E%8B%E7%BC%A9\"><span class=\"toc-text\">gizp压缩</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E7%A7%BB%E9%99%A4console\"><span class=\"toc-text\">生产环境移除console</span></a></li></ol></li></ol></li></ol>","author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"mapped":true,"prev_post":{"title":"gorm的CRUD操作","uid":"c277cd2494021925450e9b212637db7d","slug":"go/一文入门gorm和xorm的基本操作（CRUD）","date":"2023-04-14T02:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/go/一文入门gorm和xorm的基本操作（CRUD）.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/44.jpeg","text":"gorm的CRUD操作安装go get -u gorm.io&#x2F;gorm go get -u gorm.io&#x2F;driver&#x2F;mysql 第一个是gorm的库，第二个是mysql的连接驱动 连接数据库GORM 官方支持的数据库类型有： MySQL, Po...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"go","slug":"go","count":3,"path":"api/categories/go.json"}],"tags":[{"name":"gorm","slug":"gorm","count":1,"path":"api/tags/gorm.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false},"next_post":{"title":"python多线程爬虫-下载wallhaven超清壁纸","uid":"4112198ee0b9e47478edd7a567ce5aa9","slug":"python/python多线程爬虫-下载wallhaven超清壁纸","date":"2023-04-12T02:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/python/python多线程爬虫-下载wallhaven超清壁纸.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/42.png","text":" 大家好我是前端少年汪！痴迷技术，对programming有着极大的兴趣和爱好。从明天起，做一个新思维的人 继承，多态，层层封装 从明天起,不再关心内存管理 让每一条数据，自动放到合适的位子上 从明天起，我将为每一个对象 取一个温暖的名字 它们用驼峰命名，优雅，大方 陌生人，我也...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"python","slug":"python","count":2,"path":"api/categories/python.json"}],"tags":[{"name":"爬虫","slug":"爬虫","count":2,"path":"api/tags/爬虫.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false}}