{"title":"Vue3之状态管理：Vuex和Pinia，孰强孰弱？","uid":"d139f4f2bd842ae73bfb9ae3f3922047","slug":"vue/Vue3之状态管理：Vuex和Pinia，孰强孰弱？","date":"2023-03-14T02:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/vue/Vue3之状态管理：Vuex和Pinia，孰强孰弱？.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/34.png","content":"<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a35ba51a593a4558811b005fc02089ef~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1700&h=1063&s=420599&e=jpg&b=350e0a\" alt=\"4-wallhaven-0q7geq.jpg\"></p>\n<h1 id=\"什么是状态管理\"><a href=\"#什么是状态管理\" class=\"headerlink\" title=\"什么是状态管理\"></a>什么是状态管理</h1><p>在介绍Vuex和Pinia之前，我们有必要先了解一下什么是状态管理。</p>\n<p>在前端开发中，状态管理器是一种用于管理应用程序全局状态的工具。它通常用于大型应用程序，可以帮助开发者更好地组织和管理状态，并提供一些强大的工具来简化状态的变更和使用。</p>\n<h1 id=\"前端常用的状态管理库\"><a href=\"#前端常用的状态管理库\" class=\"headerlink\" title=\"前端常用的状态管理库\"></a>前端常用的状态管理库</h1><p>以下是几个常见的前端状态管理器：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li><p>Redux：Redux 是 React 生态系统中最流行的状态管理库之一。它使用单向数据流、纯函数和不可变数据结构来管理状态。Redux 提供了一个存储所有状态的全局 store，并使用 actions 和 reducers 来修改和处理状态的变更。Redux 还具有强大的工具和插件支持，可以帮助开发者调试和优化应用程序。</p>\n</li>\n<li><p>MobX：MobX 是一种响应式状态管理库，可以自动追踪状态的变化并触发更新。它提供了一些装饰器和 API，可以将普通的 JavaScript 对象转换为响应式对象，从而实现状态的管理和共享。与 Redux 不同，MobX 的数据流是双向的，允许直接修改状态并触发更新。</p>\n</li>\n<li><p>VueX：VueX 是 Vue.js 官方提供的状态管理库。它基于 Flux 架构模式，提供了一个中央状态存储器来管理应用程序中的状态。VueX 可以通过 mutations、actions 和 getters 等概念来修改和处理状态的变更，同时具有强大的工具和插件支持。</p>\n</li>\n<li><p>Pinia 是 Vue 的专属状态管理库，它允许你跨组件或页面共享状态。如果你熟悉组合式 API 的话，你可能会认为可以通过一行简单的 <code>export const state = reactive(&#123;&#125;)</code> 来共享一个全局状态。对于单页应用来说确实可以，但如果应用在服务器端渲染，这可能会使你的应用暴露出一些安全漏洞。 而如果使用 Pinia，即使在小型单页应用中，你也可以获得如下功能：</p>\n<ul>\n<li>Devtools 支持<ul>\n<li>  追踪 actions、mutations 的时间线</li>\n<li>  在组件中展示它们所用到的 Store</li>\n<li>  让调试更容易的 Time travel</li>\n</ul>\n</li>\n<li>热更新<ul>\n<li>  不必重载页面即可修改 Store</li>\n<li>  开发时可保持当前的 State</li>\n</ul>\n</li>\n<li>  插件：可通过插件扩展 Pinia 功能</li>\n<li>  为 JS 开发者提供适当的 TypeScript 支持以及<strong>自动补全</strong>功能。</li>\n<li>  支持服务端渲染</li>\n</ul>\n</li>\n</ol></blockquote>\n<p>无论选择哪种状态管理器，都应该根据项目的需求和特点进行权衡。对于小型应用或组件级别的状态管理，也可以使用一些轻量级的状态管理方案，如 React Hooks 中的 useState、useReducer 等。重要的是要保持状态的一致性和可维护性，以便在应用程序不断变化和扩展时保持代码的清晰和可读性。</p>\n<p>而我们今天要介绍的就是vue生态系统中的Vuex和pinia这两个状态管理器的异同，优劣和应用场景</p>\n<h1 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h1><p>vuex这个我相信这个就不用我过多介绍了，凡是用过vue的开发者应该没有不知道这个的，vue3之前一般都是用的vuex这个库作为vue项目的状态管理。</p>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式 + 库</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<p>目前vuex的最新版本是4.1.0,可以用于vue3的项目，vue2的项目是用vuex 3.x.x的版本。</p>\n<p>要想掌握vuex就必须要了解vuex的5个核心概念：<strong>State,Getter,Mutation,Action,Module</strong></p>\n<p>vue的单向数据流状态管理包含以下几个部分：</p>\n<ul>\n<li>  <strong>状态</strong>，驱动应用的数据源；</li>\n<li>  <strong>视图</strong>，以声明方式将<strong>状态</strong>映射到视图；</li>\n<li>  <strong>操作</strong>，响应在<strong>视图</strong>上的用户输入导致的状态变化。</li>\n</ul>\n<p>以下是一个表示“单向数据流”理念的简单示意：<br>简单来说就是数据驱动视图更新，这在单文件组件里面是没有问题的，但是，当我们的应用遇到<strong>多个组件共享状态</strong>时，单向数据流的简洁性很容易被破坏</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0c86965f8864d7eb92c5a148b3aa657~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1280&h=866&s=56870&e=png&b=ffffff\" alt=\"image.png\"></p>\n<p>因此，我们为什么不把组件的共享状态抽取出来，以一个全局单例模式管理呢？在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为！</p>\n<p>通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且易维护。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/53f2fed95cc043c6af5dbc6a0078dde8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=701&h=551&s=33966&e=png&b=ffffff\" alt=\"image.png\"></p>\n<p>如何下载安装vuex我就不讨论了，直接去看vuex的官方文档即可。</p>\n<p>主要是看vuex的的用法和功能</p>\n<p>下面是一个简单的 Vuex 示例代码，包括了 State、Getter、Mutation 和 Action 的使用：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; store.js\nimport Vue from &#39;vue&#39;\nimport Vuex from &#39;vuex&#39;\n\nVue.use(Vuex)\n\nconst store &#x3D; new Vuex.Store(&#123;\n  state: &#123;\n    count: 0\n  &#125;,\n  getters: &#123;\n    doubleCount: state &#x3D;&gt; state.count * 2\n  &#125;,\n  mutations: &#123;\n    increment: state &#x3D;&gt; state.count++,\n    decrement: state &#x3D;&gt; state.count--\n  &#125;,\n  actions: &#123;\n    asyncIncrement: (&#123; commit &#125;) &#x3D;&gt; &#123;\n      setTimeout(() &#x3D;&gt; &#123;\n        commit(&#39;increment&#39;)\n      &#125;, 1000)\n    &#125;\n  &#125;\n&#125;)\n\nexport default store</code></pre>\n\n<p>在上述代码中，我们首先引入了 Vue 和 Vuex。然后创建了一个 Store 实例，其中定义了 State、Getter、Mutation 和 Action。</p>\n<p>State 中包含了一个名为 count 的数据，用于统计点击次数。</p>\n<p>Getter 定义了一个名为 doubleCount 的 Getter，用于获取 count 的两倍。</p>\n<p>Mutation 定义了两个 Mutation，分别用于增加和减少 count。</p>\n<p>Action 定义了一个名为 asyncIncrement 的 Action，用于异步增加 count。在这个 Action 中，我们通过 setTimeout 来模拟异步操作，并在 1 秒后触发 Increment Mutation。</p>\n<p>最后，我们将 Store 导出，可以在 Vue 组件中通过 this.$store 访问到这个 Store。</p>\n<p>下面是一个简单的组件示例，演示如何在组件中使用 Vuex 状态管理：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Count: &#123;&#123; count &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;h2&gt;Double Count: &#123;&#123; doubleCount &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;increment&quot;&gt;Increment&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;decrement&quot;&gt;Decrement&lt;&#x2F;button&gt;\n    &lt;button @click&#x3D;&quot;asyncIncrement&quot;&gt;Async Increment&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  computed: &#123;\n    count() &#123;\n      return this.$store.state.count\n    &#125;,\n    doubleCount() &#123;\n      return this.$store.getters.doubleCount\n    &#125;\n  &#125;,\n  methods: &#123;\n    increment() &#123;\n      this.$store.commit(&#39;increment&#39;)\n    &#125;,\n    decrement() &#123;\n      this.$store.commit(&#39;decrement&#39;)\n    &#125;,\n    asyncIncrement() &#123;\n      this.$store.dispatch(&#39;asyncIncrement&#39;)\n    &#125;\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>在上述代码中，我们通过 computed 属性来获取 State 和 Getter，并通过 methods 属性来触发 Mutation 和 Action。注意，在触发 Mutation 时使用 $store.commit，而在触发 Action 时使用 $store.dispatch。</p>\n<p>使用<code>this.$store.state.count</code>获取vuex中的状态。<br>当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 <code>mapState</code> 辅助函数帮助我们生成计算属性，</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n&#x2F;&#x2F; 在单独构建的版本中辅助函数为 Vuex.mapState\nimport &#123; mapState &#125; from &#39;vuex&#39;\n\nexport default &#123;\n  &#x2F;&#x2F; ...\n  computed: mapState(&#123;\n    &#x2F;&#x2F; 箭头函数可使代码更简练\n    count: state &#x3D;&gt; state.count,\n\n    &#x2F;&#x2F; 传字符串参数 &#39;count&#39; 等同于 &#96;state &#x3D;&gt; state.count&#96;\n    countAlias: &#39;count&#39;,\n\n    &#x2F;&#x2F; 为了能够使用 &#96;this&#96; 获取局部状态，必须使用常规函数\n    countPlusLocalState (state) &#123;\n      return state.count + this.localCount\n    &#125;\n  &#125;)\n&#125;\n</code></pre>\n<h1 id=\"Getter\"><a href=\"#Getter\" class=\"headerlink\" title=\"Getter\"></a>Getter</h1><p>Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p>\n<p><code>mapGetters</code> 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; mapGetters &#125; from &#39;vuex&#39;\n\nexport default &#123;\n  &#x2F;&#x2F; ...\n  computed: &#123;\n  &#x2F;&#x2F; 使用对象展开运算符将 getter 混入 computed 对象中\n    ...mapGetters([\n      &#39;doneTodosCount&#39;,\n      &#39;anotherGetter&#39;,\n      &#x2F;&#x2F; ...\n    ])\n  &#125;\n&#125;</code></pre>\n\n<h1 id=\"Mutation\"><a href=\"#Mutation\" class=\"headerlink\" title=\"Mutation\"></a>Mutation</h1><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的<strong>事件类型 (type)<strong>和一个</strong>回调函数 (handler)</strong> 。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数<br>使用mutation修改vuex中的数据有几点需要注意：</p>\n<ul>\n<li>使用this.$store.commit</li>\n<li><strong>mutation 必须是同步函数</strong></li>\n</ul>\n<p>或者使用 <strong>mapMutations</strong>辅助函数代替this.$store.commit</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; mapMutations &#125; from &#39;vuex&#39;\n\nexport default &#123;\n  &#x2F;&#x2F; ...\n  methods: &#123;\n    ...mapMutations([\n      &#39;increment&#39;, &#x2F;&#x2F; 将 &#96;this.increment()&#96; 映射为 &#96;this.$store.commit(&#39;increment&#39;)&#96;\n\n      &#x2F;&#x2F; &#96;mapMutations&#96; 也支持载荷：\n      &#39;incrementBy&#39; &#x2F;&#x2F; 将 &#96;this.incrementBy(amount)&#96; 映射为 &#96;this.$store.commit(&#39;incrementBy&#39;, amount)&#96;\n    ]),\n    ...mapMutations(&#123;\n      add: &#39;increment&#39; &#x2F;&#x2F; 将 &#96;this.add()&#96; 映射为 &#96;this.$store.commit(&#39;increment&#39;)&#96;\n    &#125;)\n  &#125;\n&#125;</code></pre>\n\n\n<h1 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h1><p>Action 类似于 mutation，不同在于：</p>\n<ul>\n<li>  Action 提交的是 mutation，而不是直接变更状态。</li>\n<li>  Action 可以包含任意异步操作。</li>\n</ul>\n<p>Action 通过 <code>store.dispatch</code> 方法触发:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">store.dispatch(&#39;increment&#39;)</code></pre>\n<h1 id=\"Modules\"><a href=\"#Modules\" class=\"headerlink\" title=\"Modules\"></a>Modules</h1><p>vuex还有一个比较好用的地方就是当store里面的状态多了，就会变得臃肿，这时候就可以用modules可以分模块进行管理<br>Vuex 允许我们将 store 分割成<strong>模块（module）</strong> 。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const moduleA &#x3D; &#123;\n  state: () &#x3D;&gt; (&#123; ... &#125;),\n  mutations: &#123; ... &#125;,\n  actions: &#123; ... &#125;,\n  getters: &#123; ... &#125;\n&#125;\n\nconst moduleB &#x3D; &#123;\n  state: () &#x3D;&gt; (&#123; ... &#125;),\n  mutations: &#123; ... &#125;,\n  actions: &#123; ... &#125;\n&#125;\n\nconst store &#x3D; new Vuex.Store(&#123;\n  modules: &#123;\n    a: moduleA,\n    b: moduleB\n  &#125;\n&#125;)\n\nstore.state.a &#x2F;&#x2F; -&gt; moduleA 的状态\nstore.state.b &#x2F;&#x2F; -&gt; moduleB 的状态</code></pre>\n\n\n<p>就是类似这种，模块里面还可以嵌套子模块。如果希望你的模块具有更高的封装度和复用性，你可以通过添加 <code>namespaced: true</code> 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。具体的可以去查看vuex的文档</p>\n<p>在 store 创建<strong>之后</strong>，你可以使用 <code>store.registerModule</code> 方法注册模块：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import Vuex from &#39;vuex&#39;\n\nconst store &#x3D; new Vuex.Store(&#123; &#x2F;* 选项 *&#x2F; &#125;)\n\n&#x2F;&#x2F; 注册模块 &#96;myModule&#96;\nstore.registerModule(&#39;myModule&#39;, &#123;\n  &#x2F;&#x2F; ...\n&#125;)\n&#x2F;&#x2F; 注册嵌套模块 &#96;nested&#x2F;myModule&#96;\nstore.registerModule([&#39;nested&#39;, &#39;myModule&#39;], &#123;\n  &#x2F;&#x2F; ...\n&#125;)</code></pre>\n<p>之后就可以通过 <code>store.state.myModule</code> 和 <code>store.state.nested.myModule</code> 访问模块的状态。</p>\n<p>以上就vuex的大概内容。是不是比较简单？接下来还有更简单的，那就是Pinia   </p>\n<p>Pinia <a href=\"https://github.com/vuejs/pinia/commit/06aeef54e2cad66696063c62829dac74e15fd19e\">起始</a>于 2019 年 11 月左右的一次实验，其目的是设计一个拥有<a href=\"https://github.com/vuejs/composition-api\">组合式 API</a> 的 Vue 状态管理库。</p>\n<p align=center><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fee643838ca949a58dc524fe43a5ac91~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=319&h=477&s=81617&e=png&a=1&b=ffe062\" alt=\"image.png\"  /></p>\npinia的logo是一个菠萝，我也不知道到底是菠萝还是凤梨。我就叫它菠萝吧。\n\n\n<h1 id=\"store\"><a href=\"#store\" class=\"headerlink\" title=\"store\"></a>store</h1><p>Store (如 Pinia) 是一个保存状态和业务逻辑的实体，它并不与你的组件树绑定。换句话说，<strong>它承载着全局状态</strong>。它有点像一个永远存在的组件，每个组件都可以读取和写入它。它有<strong>三个概念</strong>，<a href=\"https://pinia.vuejs.org/zh/core-concepts/state.html\">state</a>、<a href=\"https://pinia.vuejs.org/zh/core-concepts/getters.html\">getter</a> 和 <a href=\"https://pinia.vuejs.org/zh/core-concepts/actions.html\">action</a>，我们可以假设这些概念相当于组件中的 <code>data</code>、 <code>computed</code> 和 <code>methods</code>。</p>\n<p>对比vuex，pinia只有3个核心概念：state,getter,action.是不是要更简单一点了呢。</p>\n<p>那就看看Pinia是怎么来管理全局状态的吧。</p>\n<h1 id=\"Store\"><a href=\"#Store\" class=\"headerlink\" title=\"Store\"></a>Store</h1><p>Store 是用 <code>defineStore()</code> 定义的，它的第一个参数要求是一个<strong>独一无二的</strong>名字</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; defineStore &#125; from &#39;pinia&#39;\n\n&#x2F;&#x2F; 你可以对 &#96;defineStore()&#96; 的返回值进行任意命名，但最好使用 store 的名字，同时以 &#96;use&#96; 开头且以 &#96;Store&#96; 结尾。(比如 &#96;useUserStore&#96;，&#96;useCartStore&#96;，&#96;useProductStore&#96;)\n&#x2F;&#x2F; 第一个参数是你的应用中 Store 的唯一 ID。\nexport const useAlertsStore &#x3D; defineStore(&#39;alerts&#39;, &#123;\n  &#x2F;&#x2F; 其他配置...\n&#125;)\n</code></pre>\n<p>这个<strong>名字</strong> ，也被用作 <em>id</em> ，是必须传入的， Pinia 将用它来连接 store 和 devtools。为了养成习惯性的用法，将返回的函数命名为 <em>use…</em>  是一个符合组合式函数风格的约定。</p>\n<p><code>defineStore()</code> 的第二个参数可接受两类值：Setup 函数或 Option 对象。<br>setup就是组合式API的写法，Option就是选项式API的写法，和vuex的写法差不多</p>\n<h3 id=\"Option-对象写法\"><a href=\"#Option-对象写法\" class=\"headerlink\" title=\"Option 对象写法\"></a>Option 对象写法</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export const useCounterStore &#x3D; defineStore(&#39;counter&#39;, &#123;\n  state: () &#x3D;&gt; (&#123; count: 0 &#125;),\n  getters: &#123;\n    double: (state) &#x3D;&gt; state.count * 2,\n  &#125;,\n  actions: &#123;\n    increment() &#123;\n      this.count++\n    &#125;,\n  &#125;,\n&#125;)</code></pre>\n<h3 id=\"setup-写法\"><a href=\"#setup-写法\" class=\"headerlink\" title=\"setup 写法\"></a>setup 写法</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\nexport const useCounterStore &#x3D; defineStore(&#39;counter&#39;, () &#x3D;&gt; &#123;\n  const count &#x3D; ref(0)\n  function increment() &#123;\n    count.value++\n  &#125;\n\n  return &#123; count, increment &#125;\n&#125;)</code></pre>\n\n<p>两种写法都差不多，就看自己喜欢哪个了。</p>\n<p>如何使用store？<br>在组件中，直接导入使用就行</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n&lt;script setup&gt;\nimport &#123; useCounterStore &#125; from &#39;@&#x2F;stores&#x2F;counter&#39;\n&#x2F;&#x2F; 可以在组件中的任意位置访问 &#96;store&#96; 变量 ✨\nconst store &#x3D; useCounterStore()\n&lt;&#x2F;script&gt;</code></pre>\n<p>为了从 store 中提取属性时保持其响应性，你需要使用 <code>storeToRefs()</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;script setup&gt;\nimport &#123; storeToRefs &#125; from &#39;pinia&#39;\nconst store &#x3D; useCounterStore()\n&#x2F;&#x2F; &#96;name&#96; 和 &#96;doubleCount&#96; 是响应式的 ref\n&#x2F;&#x2F; 同时通过插件添加的属性也会被提取为 ref\n&#x2F;&#x2F; 并且会跳过所有的 action 或非响应式 (不是 ref 或 reactive) 的属性\nconst &#123; name, doubleCount &#125; &#x3D; storeToRefs(store)\n&#x2F;&#x2F; 作为 action 的 increment 可以直接解构\nconst &#123; increment &#125; &#x3D; store\n&lt;&#x2F;script&gt;</code></pre>\n\n\n<h1 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h1><p>对state的操作无非就是访问，重置，变更，替换，订阅</p>\n<h4 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const store &#x3D; useStore(); \nstore.count++;</code></pre>\n<h4 id=\"重置\"><a href=\"#重置\" class=\"headerlink\" title=\"重置\"></a>重置</h4><p>直接调用reset()方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const store &#x3D; useStore()\n\nstore.$reset()</code></pre>\n\n<h4 id=\"修改state的值\"><a href=\"#修改state的值\" class=\"headerlink\" title=\"修改state的值\"></a>修改state的值</h4><p>如果只改变一个属性的值，可以直接变更<code>store.count=111</code></p>\n<p>如果是要同事变更多个值，可以使用<code>store.$patch()</code>方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">store.$patch(&#123;\n  count: store.count + 1,\n  age: 120,\n  name: &#39;DIO&#39;,\n&#125;)\n&#x2F;&#x2F;或者\nstore.$patch((state) &#x3D;&gt; &#123; state.items.push(&#123; name: &#39;shoes&#39;, quantity: 1 &#125;) state.hasChanged &#x3D; true &#125;)</code></pre>\n\n<h4 id=\"替换state\"><a href=\"#替换state\" class=\"headerlink\" title=\"替换state\"></a>替换state</h4><p>你<strong>不能完全替换掉</strong> store 的 state，因为那样会破坏其响应性。但是，你可以 <em>patch</em> 它。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 这实际上并没有替换&#96;$state&#96;\nstore.$state &#x3D; &#123; count: 24 &#125;\n&#x2F;&#x2F; 在它内部调用 &#96;$patch()&#96;：\nstore.$patch(&#123; count: 24 &#125;)</code></pre>\n<p>你也可以通过变更 <code>pinia</code> 实例的 <code>state</code> 来设置整个应用的初始 state。<br><code>pinia.state.value = &#123;&#125;</code></p>\n<h4 id=\"订阅state的变化\"><a href=\"#订阅state的变化\" class=\"headerlink\" title=\"订阅state的变化\"></a>订阅state的变化</h4><p>类似于 Vuex 的 <a href=\"https://vuex.vuejs.org/zh/api/index.html#subscribe\">subscribe 方法</a>，你可以通过 store 的 <code>$subscribe()</code> 方法侦听 state 及其变化。比起普通的 <code>watch()</code>，使用 <code>$subscribe()</code> 的好处是 <em>subscriptions</em> 在 <em>patch</em> 后只触发一次</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">cartStore.$subscribe((mutation, state) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; import &#123; MutationType &#125; from &#39;pinia&#39;\n  mutation.type &#x2F;&#x2F; &#39;direct&#39; | &#39;patch object&#39; | &#39;patch function&#39;\n  &#x2F;&#x2F; 和 cartStore.$id 一样\n  mutation.storeId &#x2F;&#x2F; &#39;cart&#39;\n  &#x2F;&#x2F; 只有 mutation.type &#x3D;&#x3D;&#x3D; &#39;patch object&#39;的情况下才可用\n  mutation.payload &#x2F;&#x2F; 传递给 cartStore.$patch() 的补丁对象。\n\n  &#x2F;&#x2F; 每当状态发生变化时，将整个 state 持久化到本地存储。\n  localStorage.setItem(&#39;cart&#39;, JSON.stringify(state))\n&#125;)</code></pre>\n\n<h1 id=\"Getter-1\"><a href=\"#Getter-1\" class=\"headerlink\" title=\"Getter\"></a>Getter</h1><p>Getter 完全等同于 store 的 state 的<a href=\"https://cn.vuejs.org/guide/essentials/computed.html\">计算值</a>。可以通过 <code>defineStore()</code> 中的 <code>getters</code> 属性来定义它们。<strong>推荐</strong>使用箭头函数，并且它将接收 <code>state</code> 作为第一个参数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export const useStore &#x3D; defineStore(&#39;main&#39;, &#123;\n  state: () &#x3D;&gt; (&#123;\n    count: 0,\n  &#125;),\n  getters: &#123;\n    doubleCount: (state) &#x3D;&gt; state.count * 2,\n  &#125;,\n&#125;)</code></pre>\n<p>可以使用this访问整个store实例。<br>this.doubleCount+1访问其他的getter</p>\n<h1 id=\"Action-1\"><a href=\"#Action-1\" class=\"headerlink\" title=\"Action\"></a>Action</h1><p>Action 相当于组件中的 <a href=\"https://v3.vuejs.org/guide/data-methods.html#methods\">method</a>。它们可以通过 <code>defineStore()</code> 中的 <code>actions</code> 属性来定义</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export const useCounterStore &#x3D; defineStore(&#39;main&#39;, &#123;\n  state: () &#x3D;&gt; (&#123;\n    count: 0,\n  &#125;),\n  actions: &#123;\n    increment() &#123;\n      this.count++\n    &#125;,\n    randomizeCounter() &#123;\n      this.count &#x3D; Math.round(100 * Math.random())\n    &#125;,\n  &#125;,\n&#125;)</code></pre>\n<p>类似 <a href=\"https://pinia.vuejs.org/zh/core-concepts/getters.html\">getter</a>，action 也可通过 <code>this</code> 访问<strong>整个 store 实例</strong>，并支持<strong>完整的类型标注(以及自动补全✨)</strong> 。<strong>不同的是，<code>action</code> 可以是异步的</strong>，你可以在它们里面 <code>await</code> 调用任何 API，以及其他 action！下面是一个使用 <a href=\"https://github.com/posva/mande\">Mande</a> 的例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; mande &#125; from &#39;mande&#39;\n\nconst api &#x3D; mande(&#39;&#x2F;api&#x2F;users&#39;)\n\nexport const useUsers &#x3D; defineStore(&#39;users&#39;, &#123;\n  state: () &#x3D;&gt; (&#123;\n    userData: null,\n    &#x2F;&#x2F; ...\n  &#125;),\n\n  actions: &#123;\n    async registerUser(login, password) &#123;\n      try &#123;\n        this.userData &#x3D; await api.post(&#123; login, password &#125;)\n        showTooltip(&#96;Welcome back $&#123;this.userData.name&#125;!&#96;)\n      &#125; catch (error) &#123;\n        showTooltip(error)\n        &#x2F;&#x2F; 让表单组件显示错误\n        return error\n      &#125;\n    &#125;,\n  &#125;,\n&#125;)</code></pre>\n\n\n\n\n<h2 id=\"Pinia与-Vuex-的比较\"><a href=\"#Pinia与-Vuex-的比较\" class=\"headerlink\" title=\"Pinia与 Vuex 的比较\"></a><a href=\"https://pinia.web3doc.top/introduction.html#%E4%B8%8E-vuex-%E7%9A%84%E6%AF%94%E8%BE%83\">Pinia与 Vuex 的比较</a></h2><p>Pinia 最初是为了探索 Vuex 的下一次迭代会是什么样子，结合了 Vuex 5 核心团队讨论中的许多想法。最终，我们意识到 Pinia 已经实现了我们在 Vuex 5 中想要的大部分内容，并决定实现它 取而代之的是新的建议。</p>\n<p>与 Vuex 相比，Pinia 提供了一个更简单的 API，具有更少的规范，提供了 Composition-API 风格的 API，最重要的是，在与 TypeScript 一起使用时具有可靠的类型推断支持。</p>\n<h3 id=\"RFC\"><a href=\"#RFC\" class=\"headerlink\" title=\"RFC\"></a><a href=\"https://pinia.web3doc.top/introduction.html#rfc\">RFC</a></h3><p>虽然 Vuex 通过 RFC 从社区收集尽可能多的反馈，但 Pinia 没有。 我根据我开发应用程序、阅读其他人的代码、为使用 Pinia 的客户工作以及在 Discord 上回答问题的经验来测试想法。 这使我能够提供一种适用于各种情况和应用程序大小的有效解决方案。 我经常发布并在保持其核心 API 不变的同时使库不断发展。</p>\n<h3 id=\"与-Vuex-3-x-4-x-的比较\"><a href=\"#与-Vuex-3-x-4-x-的比较\" class=\"headerlink\" title=\"与 Vuex 3.x/4.x 的比较\"></a><a href=\"https://pinia.web3doc.top/introduction.html#%E4%B8%8E-vuex-3-x-4-x-%E7%9A%84%E6%AF%94%E8%BE%83\">与 Vuex 3.x/4.x 的比较</a></h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Vuex 3.x 是 Vuex 的 Vue 2 而 Vuex 4.x 是 Vue 3</p></blockquote>\n<p>Pinia API 与 Vuex ≤4 有很大不同，即：</p>\n<ul>\n<li>  <em>mutations</em> 不再存在。他们经常被认为是 <strong><em>非常</em> 冗长</strong>。他们最初带来了 devtools 集成，但这不再是问题。</li>\n<li>  无需创建自定义复杂包装器来支持 TypeScript，所有内容都是类型化的，并且 API 的设计方式尽可能利用 TS 类型推断。</li>\n<li>  不再需要注入、导入函数、调用函数、享受自动完成功能！</li>\n<li>  无需动态添加 Store，默认情况下它们都是动态的，您甚至都不会注意到。请注意，您仍然可以随时手动使用 Store 进行注册，但因为它是自动的，您无需担心。</li>\n<li>  不再有 <em>modules</em> 的嵌套结构。您仍然可以通过在另一个 Store 中导入和 <em>使用</em> 来隐式嵌套 Store，但 Pinia 通过设计提供平面结构，同时仍然支持 Store 之间的交叉组合方式。 <strong>您甚至可以拥有 Store 的循环依赖关系</strong>。</li>\n<li>  没有 <em>命名空间模块</em>。鉴于 Store 的扁平架构，“命名空间” Store 是其定义方式所固有的，您可以说所有 Store 都是命名空间的。</li>\n</ul>\n<p>以上就是vuex和pinia的全部介绍了。我个人觉得如果是vue2或者以前的老项目那就用vuex，如果是vue3的新项目那就用pinia，当然这也不是绝对的，更多的还是要具体情况具体分析的。<br>我个人觉得pinia相比于vuex在使用角度来说，是要更加简洁方便一点的</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5675671bec9644eeaa7928eedd9af765~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1920&h=1080&s=2699299&e=png&b=082832\" alt=\"1-wallhaven-p2zq23.png\"></p>\n","feature":true,"text":" 什么是状态管理在介绍Vuex和Pinia之前，我们有必要先了解一下什么是状态管理。 在前端开发中，状态管理器是一种用于管理应用程序全局状态的工具。它通常用于大型应用程序，可以帮助开发者更好地组织和管理状态，并提供一些强大的工具来简化状态的变更和使用。 前端常用的状态管理库以下是...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"pinia","slug":"pinia","count":1,"path":"api/categories/pinia.json"}],"tags":[{"name":"pinia vuex","slug":"pinia-vuex","count":1,"path":"api/tags/pinia-vuex.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">什么是状态管理</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E7%9A%84%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%BA%93\"><span class=\"toc-text\">前端常用的状态管理库</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Vuex\"><span class=\"toc-text\">Vuex</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Getter\"><span class=\"toc-text\">Getter</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Mutation\"><span class=\"toc-text\">Mutation</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Action\"><span class=\"toc-text\">Action</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Modules\"><span class=\"toc-text\">Modules</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#store\"><span class=\"toc-text\">store</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Store\"><span class=\"toc-text\">Store</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Option-%E5%AF%B9%E8%B1%A1%E5%86%99%E6%B3%95\"><span class=\"toc-text\">Option 对象写法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#setup-%E5%86%99%E6%B3%95\"><span class=\"toc-text\">setup 写法</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#State\"><span class=\"toc-text\">State</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">访问</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%87%8D%E7%BD%AE\"><span class=\"toc-text\">重置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9state%E7%9A%84%E5%80%BC\"><span class=\"toc-text\">修改state的值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9B%BF%E6%8D%A2state\"><span class=\"toc-text\">替换state</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%A2%E9%98%85state%E7%9A%84%E5%8F%98%E5%8C%96\"><span class=\"toc-text\">订阅state的变化</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Getter-1\"><span class=\"toc-text\">Getter</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Action-1\"><span class=\"toc-text\">Action</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Pinia%E4%B8%8E-Vuex-%E7%9A%84%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">Pinia与 Vuex 的比较</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#RFC\"><span class=\"toc-text\">RFC</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8E-Vuex-3-x-4-x-%E7%9A%84%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">与 Vuex 3.x&#x2F;4.x 的比较</span></a></li></ol></li></ol></li></ol>","author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"mapped":true,"prev_post":{"title":"圣诞节快到了，用ThreeJS给女朋友写了一个圣诞树🎄，她很开心","uid":"529493b0860c50168557a46de0bc5502","slug":"threeJS/圣诞节快到了，用ThreeJS给女朋友写了一个圣诞树，她很开心","date":"2023-12-30T02:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/threeJS/圣诞节快到了，用ThreeJS给女朋友写了一个圣诞树，她很开心.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/0.png","text":" 转眼间又是一年快要结束了，马上圣诞节🎄就快到了。给女朋友(没有女朋友的就自己new一个吧🙈)写一个圣诞树让她开心一下吧 使用什么技术写一开始我准备用html+css去写，后来感觉使用html和css写就太low了，没有一点点心意。就打算用three.js写一个3d版本的。 简单...","link":"","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[{"name":"前端","slug":"前端","count":5,"path":"api/categories/前端.json"},{"name":"Three.JS","slug":"前端/Three-JS","count":1,"path":"api/categories/前端/Three-JS.json"}],"tags":[{"name":"前端 webGL WEB3d WebGIS","slug":"前端-webGL-WEB3d-WebGIS","count":1,"path":"api/tags/前端-webGL-WEB3d-WebGIS.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":true},"next_post":{"title":"前端常用utils工具方法小总结","uid":"6e4714c942a17b3887506964ab896786","slug":"js/前端常用utils工具方法小总结","date":"2024-04-17T02:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/js/前端常用utils工具方法小总结.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/47.png","text":" 前端常用utils工具方法小总结 &#x2F;&#x2F; 数组去重 const uniqueArray &#x3D; arr &#x3D;&gt; [...new Set(arr)]; &#x2F;&#x2F; 从url获取参数，并且转换成对象 const getParame...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"前端","slug":"前端","count":5,"path":"api/categories/前端.json"}],"tags":[{"name":"工具方法","slug":"工具方法","count":1,"path":"api/tags/工具方法.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false}}