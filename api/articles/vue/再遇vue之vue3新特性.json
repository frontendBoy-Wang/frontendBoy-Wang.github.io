{"title":"VUE3新特性","uid":"76203a7a58be01e7fd00254c86e3c923","slug":"vue/再遇vue之vue3新特性","date":"2023-03-15T02:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/vue/再遇vue之vue3新特性.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/66.jpeg","content":"<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d1984a91cd0a422bac83be04c8135851~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=3840&h=2160&s=12009487&e=png&b=42557b\" alt=\"image.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>想起来上次好好认真学vue，还是刚实习那会儿，如今回头看，已是三年有余了。vue从当初的vue2也大升级到vue3了。新的 API，新的语法糖，新的响应式…<br>如今，我已不是以前那个小白了，对vue和js的使用也越来越熟练了，打算在好好系统的复习一下vue3的新特性。</p></blockquote>\n<h1 id=\"vue2和vue3有哪些区别？\"><a href=\"#vue2和vue3有哪些区别？\" class=\"headerlink\" title=\"vue2和vue3有哪些区别？\"></a>vue2和vue3有哪些区别？</h1><p>首先说明一下，vue2和vue3是Vue.js的两个主要版本。目前vue3已经更新到3.3.4的版本了</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1da8a6c3d2104d6c94ffeb65d6d34024~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=3094&h=1868&s=879638&e=png&a=1&b=0f1318\" alt=\"image.png\"></p>\n<p>vue3是vue2的一个重大升级，当然vue2的版本也在更新，目前已经更新到2.7.14的版本</p>\n<p>还有一个消息就是：   </p>\n<ul>\n<li>  Vue 2 将于 2023 年 12 月 31 日停止维护。详见 <a href=\"https://v2.vuejs.org/lts/\">Vue 2 延长 LTS</a>。</li>\n<li>  Vue 2 中文文档已迁移至 <a href=\"https://v2.cn.vuejs.org/\">v2.cn.vuejs.org</a>。</li>\n<li>  想从 Vue 2 升级？请参考<a href=\"https://v3-migration.vuejs.org/\">迁移指南</a>。</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6693f76bd2604cb59fc128d49996b66a~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=3092&h=1868&s=702142&e=png&a=1&b=1c1c1c\" alt=\"image.png\"></p>\n<p>我个人觉得vue2和vue3的区别主要有以下几个方面：</p>\n<ol>\n<li> 性能优化：Vue 3 在底层进行了重写，采用了更先进的编译器和运行时优化，提供了更好的性能表现。Vue 3 的虚拟 DOM 重构、组件渲染优化以及更新机制的改进等方面都使得应用程序的性能更高效。</li>\n<li> 组合式 API：Vue 3 引入了组合式 API，这是一种新的组件组织方式，可以更灵活地复用和组合逻辑。与 Vue 2 中的 Options API 不同，组合式 API 基于函数，可以更清晰地分离关注点，并提供了更好的 TypeScript 支持。</li>\n<li> Composition API：Vue 3 中的 Composition API 可以让开发者根据功能组织代码，而不是按照选项对象的方式。它可以更好地处理组件中的逻辑复用、代码组织和代码重用。</li>\n<li> 更小的包体积：由于底层的重构和模块的重组，Vue 3 的包体积更小，以及更好的树摇（Tree Shaking）支持，可以减少最终打包文件的大小。</li>\n<li> TypeScript 内建支持：Vue 3 对于 TypeScript 的支持更加友好，包括改进的类型推断、更好的声明文件支持和针对 Composition API 的类型推导。</li>\n<li> 更好的响应式系统：Vue 2 的响应式系统通过 Object.defineProperty() 实现了数据的劫持，而Vue 3 中的响应式系统使用Proxy对象进行了重写，提供了更好的性能和更全面的响应式处理方式。Vue 3 使用了 Proxy 代理对象来实现响应式数据的追踪和触发，相比 Vue 2 的 Object.defineProperty，提供了更多的功能和更好的性能。</li>\n<li> Vu3支持自定义hooks。Vue 3 中引入的 Composition API 与 React 中的 Hooks 概念类似，提供了一组新的函数式 API，用于更灵活、清晰地组织和复用组件逻辑。<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>其中常用的 hooks 基本等同于 React 中的对应 hook：</p>\n<ul>\n<li>  <code>setup</code>：在组件创建之前执行，并返回一个响应式对象和一些函数，是使用 Composition API 的入口。</li>\n<li>  <code>ref</code>：用于创建一个响应式数据，可以通过 <code>.value</code> 属性进行读写。类似于 Vue 2.x 中的 <code>data</code>。</li>\n<li>  <code>reactive</code>：创建一个响应式对象，可以通过属性访问器（getter 和 setter）实现数据绑定。类似于 Vue 2.x 中的 <code>data</code>。</li>\n<li>  <code>computed</code>：创建一个计算属性，它的值会根据其依赖的 <code>ref</code> 或 <code>reactive</code> 对象自动更新。</li>\n<li>  <code>watch</code>：监听一个响应式数据或计算属性，当它的值发生变化时触发回调函数。</li>\n<li>  <code>onMounted</code>：当前组件挂载到 DOM 上后执行的回调函数。</li>\n<li>  <code>onUnmounted</code>：当前组件从 DOM 上卸载后执行的回调函数。</li>\n<li>  <code>onUpdated</code>：当前组件更新后执行的回调函数。</li>\n<li>  <code>watchEffect</code>：监听响应式数据的变化，在回调函数中处理相关逻辑。</li>\n</ul>\n<p>这些 hooks 使得我们可以更方便地组织组件逻辑，将关注点分离，提高代码的可复用性和可维护性。比如，我们可以将某个组件逻辑抽离成一个自定义 hook，然后在多个组件中进行复用。<br>总之，Vue 3 中的 hooks 实现了类似 React 中的 hook 模式，使得组件逻辑更加清晰，能够更加灵活地共享和组合逻辑，并且提供了更好的 TypeScript 支持。</p></blockquote>\n</li>\n</ol>\n<h1 id=\"vue3有哪些新的API\"><a href=\"#vue3有哪些新的API\" class=\"headerlink\" title=\"vue3有哪些新的API\"></a>vue3有哪些新的API</h1><p>vue3新的API还是比较多的，主要包括组合式API，选项式API，全局API，内置指令，组件，属性，进阶API，SFC单文件组件等等…</p>\n<h2 id=\"组合式API\"><a href=\"#组合式API\" class=\"headerlink\" title=\"组合式API\"></a>组合式API</h2><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bb410bb85ef4c5f9da7f1af219ae197~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2188&h=1614&s=332656&e=png&a=1&b=212121\" alt=\"image.png\"><br>组合式API是vue3区别于vue2最明显的不一样的地方。其中有几个比较常用的API，比如</p>\n<ul>\n<li> setup()</li>\n<li> ref()</li>\n<li> reactive()</li>\n<li> watchEffect()</li>\n<li> computed()</li>\n</ul>\n<p>还有生命周期钩子，和vue2也是稍有区别。没有了 BeforeCreate和created，在方法名前面都加了个on.<br>猜的不错的话，相信大家用的最多的肯定是onMounted()这个钩子吧，一般网络请求都放在这个里面去执行。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h2 id=\"生命周期钩子\"><a href=\"#生命周期钩子\" class=\"headerlink\" title=\"生命周期钩子\"></a>生命周期钩子</h2><ul>\n<li>  <a href=\"https://cn.vuejs.org/api/composition-api-lifecycle.html#onmounted\">onMounted()</a></li>\n<li>  <a href=\"https://cn.vuejs.org/api/composition-api-lifecycle.html#onupdated\">onUpdated()</a></li>\n<li>  <a href=\"https://cn.vuejs.org/api/composition-api-lifecycle.html#onunmounted\">onUnmounted()</a></li>\n<li>  <a href=\"https://cn.vuejs.org/api/composition-api-lifecycle.html#onbeforemount\">onBeforeMount()</a></li>\n<li>  <a href=\"https://cn.vuejs.org/api/composition-api-lifecycle.html#onbeforeupdate\">onBeforeUpdate()</a></li>\n<li>  <a href=\"https://cn.vuejs.org/api/composition-api-lifecycle.html#onbeforeunmount\">onBeforeUnmount()</a></li>\n<li>  <a href=\"https://cn.vuejs.org/api/composition-api-lifecycle.html#onerrorcaptured\">onErrorCaptured()</a></li>\n<li>  <a href=\"https://cn.vuejs.org/api/composition-api-lifecycle.html#onrendertracked\">onRenderTracked()</a></li>\n<li>  <a href=\"https://cn.vuejs.org/api/composition-api-lifecycle.html#onrendertriggered\">onRenderTriggered()</a></li>\n<li>  <a href=\"https://cn.vuejs.org/api/composition-api-lifecycle.html#onactivated\">onActivated()</a></li>\n<li>  <a href=\"https://cn.vuejs.org/api/composition-api-lifecycle.html#ondeactivated\">onDeactivated()</a></li>\n<li>  <a href=\"https://cn.vuejs.org/api/composition-api-lifecycle.html#onserverprefetch\">onServerPrefetch()</a></li>\n</ul></blockquote>\n<h2 id=\"全局API\"><a href=\"#全局API\" class=\"headerlink\" title=\"全局API\"></a>全局API</h2><p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0fc0280c7a434f05a6e7f4f988d147a2~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1546&h=1496&s=209534&e=png&a=1&b=1f1f1f\" alt=\"image.png\"><br>全局API里面也有几个是需要注意的，也是经常用到的。</p>\n<ul>\n<li>createApp() </li>\n<li>app.mount()</li>\n<li>app.use()</li>\n<li>app.provide()</li>\n<li>app.config</li>\n<li>nextTick()</li>\n<li>app.config.globalProperties</li>\n</ul>\n<p>这几个API是Vue.js 3.x中一些常用的核心方法和属性，它们的作用如下：</p>\n<ol>\n<li>createApp():</li>\n</ol>\n<p>createApp()是一个工厂函数，用于创建一个Vue应用程序实例。在Vue.js 3.x中，使用createApp()来代替之前版本中的Vue构造函数，可以用更简单的方式创建Vue实例。createApp()需要传入一个根组件对象和一个配置选项对象，可以配置应用程序的各种属性和行为。</p>\n<p>例如，可以通过createApp()创建一个Vue实例，并指定根组件为App，如下所示：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; createApp &#125; from &#39;vue&#39;\nimport App from &#39;.&#x2F;App.vue&#39;\n\nconst app &#x3D; createApp(App)\n\napp.mount(&#39;#app&#39;)</code></pre>\n\n<ol start=\"2\">\n<li>app.mount():</li>\n</ol>\n<p>app.mount()方法用于将Vue实例挂载到一个DOM元素上，使得Vue可以控制这个DOM元素内的所有内容。</p>\n<p>例如，在上面的示例代码中，我们调用了app.mount()方法，将Vue实例挂载到了id为”app”的DOM元素上，如下所示：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">app.mount(&#39;#app&#39;)</code></pre>\n\n<ol start=\"3\">\n<li>app.use():</li>\n</ol>\n<p>app.use()方法用于注册Vue插件，可以在Vue应用程序中添加一些全局功能和附加的特性。插件通常以函数或对象的形式提供，用于扩展或修改Vue的核心功能。</p>\n<p>例如，可以使用app.use()方法注册Vue-Router插件，如下所示：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; createApp &#125; from &#39;vue&#39;\nimport &#123; createRouter, createWebHistory &#125; from &#39;vue-router&#39;\nimport App from &#39;.&#x2F;App.vue&#39;\nimport routes from &#39;.&#x2F;routes&#39;\n\nconst router &#x3D; createRouter(&#123;\n  history: createWebHistory(),\n  routes,\n&#125;)\n\nconst app &#x3D; createApp(App)\n\napp.use(router)\n\napp.mount(&#39;#app&#39;)</code></pre>\n\n<p>通过调用app.use()方法，将Vue-Router插件注册到Vue应用程序中，从而实现路由功能。</p>\n<ol start=\"4\">\n<li>app.provide():</li>\n</ol>\n<p>app.provide()方法用于定义一个全局的依赖注入，提供了一种在组件层次结构中共享数据和函数的方式。provide()方法需要传入一个键值对对象，用于指定要注入的变量和其对应的值。</p>\n<p>例如，可以使用app.provide()方法将一个名为”theme”的字符串注入到Vue应用程序中，如下所示：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const app &#x3D; createApp(App)\n\napp.provide(&#39;theme&#39;, &#39;dark&#39;)\n\napp.mount(&#39;#app&#39;)</code></pre>\n\n<p>在上面的示例代码中，我们使用app.provide()方法将”theme”字符串注入到Vue应用程序中，并设置为”dark”。接着，我们就可以在任何子组件中通过inject()方法来访问这个变量。</p>\n<ol start=\"5\">\n<li>app.config:</li>\n</ol>\n<p>app.config是一个全局的配置对象，可以用于配置Vue应用程序中的各种选项和行为。该对象包含很多属性，例如productionTip、globalProperties、isNativeTag等，可以根据应用程序的需求进行相应的配置。</p>\n<p>例如，在Vue.js 3.x中，我们可以使用app.config.productionTip来设置控制台日志输出的环境，如下所示：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const app &#x3D; createApp(App)\n\napp.config.productionTip &#x3D; false\n\napp.mount(&#39;#app&#39;)</code></pre>\n\n<p>在上面的示例代码中，我们禁用了控制台日志输出，以提高Vue应用程序的性能和安全性。</p>\n<ol start=\"6\">\n<li>nextTick():<br>nextTick()是Vue.js提供的一个异步方法。它允许你在下次 DOM 更新循环结束之后执行一段代码，以确保操作发生在更新完成后。在许多情况下，当你修改了数据之后，想要立即去访问更新后的 DOM 结构，可能会出现问题，因为 Vue 异步执行 DOM 更新。使用nextTick()可以将回调函数推迟到下一个 DOM 更新周期中执行，这样可以确保在操作数据后，DOM已经更新完毕。</li>\n</ol>\n<p>例如，当我们需要在更新后获取某个元素的宽度时，需要使用nextTick()来确保在DOM更新完成后再进行获取操作。示例代码如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">app.config.globalProperties.$nextTick(() &#x3D;&gt; &#123;\n  const width &#x3D; document.querySelector(&#39;.element&#39;).offsetWidth;\n  console.log(width);\n&#125;);</code></pre>\n\n<ol start=\"7\">\n<li>app.config.globalProperties:<br>app.config.globalProperties是Vue应用程序的全局属性配置对象。通过设置该对象的属性，可以将这些属性添加到每个组件实例中，从而在所有组件中共享和访问这些属性。</li>\n</ol>\n<p>例如，我们可以将一个自定义的全局方法添加到Vue应用程序中的所有组件中。示例代码如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">app.config.globalProperties.$customMethod &#x3D; (arg) &#x3D;&gt; &#123;\n  &#x2F;&#x2F; 这里是自定义的方法逻辑\n&#125;</code></pre>\n\n<p>通过在app.config.globalProperties上定义$customMethod，我们可以在任何组件内部直接调用$customMethod()方法，而无需进行额外的导入和注册。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export default &#123;\n  methods: &#123;\n    handleClick() &#123;\n      this.$customMethod(&#39;Hello World&#39;);\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<p>在上述示例中，我们可以在组件的方法中直接调用$customMethod()方法并传入参数。这样就实现了将自定义方法添加到全局的目的，以便在任何组件中共享和使用。</p>\n<h1 id=\"vue3的响应式系统\"><a href=\"#vue3的响应式系统\" class=\"headerlink\" title=\"vue3的响应式系统\"></a>vue3的响应式系统</h1><p><code>Vue3</code>响应式实现是通过<code>ES6</code>中的<code>proxy</code>代理对象，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。这样在改写对象时就能触发响应式。同样通过递归解决对象嵌套问题。</p>\n<p>Vue 3 的响应式系统相比于 Vue 2 发生了一些变化，介绍一下 Vue 3 的响应式系统。有几个主要的API和工具函数。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h3 id=\"响应式-核心\"><a href=\"#响应式-核心\" class=\"headerlink\" title=\"响应式: 核心\"></a>响应式: 核心</h3><ul>\n<li>  <a href=\"https://cn.vuejs.org/api/reactivity-core.html#ref\">ref()</a></li>\n<li>  <a href=\"https://cn.vuejs.org/api/reactivity-core.html#computed\">computed()</a></li>\n<li>  <a href=\"https://cn.vuejs.org/api/reactivity-core.html#reactive\">reactive()</a></li>\n<li>  <a href=\"https://cn.vuejs.org/api/reactivity-core.html#readonly\">readonly()</a></li>\n<li>  <a href=\"https://cn.vuejs.org/api/reactivity-core.html#watcheffect\">watchEffect()</a></li>\n<li>  <a href=\"https://cn.vuejs.org/api/reactivity-core.html#watchposteffect\">watchPostEffect()</a></li>\n<li>  <a href=\"https://cn.vuejs.org/api/reactivity-core.html#watchsynceffect\">watchSyncEffect()</a></li>\n<li>  <a href=\"https://cn.vuejs.org/api/reactivity-core.html#watch\">watch()</a></li>\n</ul></blockquote>\n<ol>\n<li>reactive / readonly 函数</li>\n</ol>\n<p>Vue 3 中的响应式系统使用 <code>reactive</code> 和 <code>readonly</code> 函数来创建响应式对象。相较于 Vue 2 中使用的 <code>Vue.observable</code>，新的 API 更加清晰、易懂。</p>\n<p><code>reactive</code> 函数接受一个普通的 JavaScript 对象作为参数，返回一个响应式代理对象。这个代理对象可以监控被代理对象所有的属性的变化，包括嵌套对象和数组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; reactive &#125; from &#39;vue&#39;\n\nconst obj &#x3D; reactive(&#123;\n  count: 0,\n  message: &#39;Hello World&#39;,\n  nested: &#123;\n    foo: &#39;bar&#39;\n  &#125;,\n  arr: [1, 2, 3]\n&#125;)\n\n&#x2F;&#x2F; 访问代理对象的属性\nconsole.log(obj.count) &#x2F;&#x2F; 0\n\n&#x2F;&#x2F; 修改代理对象的属性\nobj.count++\n\n&#x2F;&#x2F; 修改代理对象的嵌套属性和数组\nobj.nested.foo &#x3D; &#39;baz&#39;\nobj.arr.push(4)</code></pre>\n\n<p><code>readonly</code> 与 <code>reactive</code> 的用法类似，不同之处在于它返回的是一个只读的响应式代理对象，无法修改代理对象的属性。</p>\n<ol start=\"2\">\n<li>ref 函数</li>\n</ol>\n<p>Vue 3 中的 <code>ref</code> 函数用来包装基本类型的值，使其变成响应式的。<code>ref</code> 返回一个包含该值的引用对象，该引用对象有一个 value 属性，访问或修改该属性会触发依赖更新。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; ref &#125; from &#39;vue&#39;\n\nconst count &#x3D; ref(0)\nconsole.log(count.value) &#x2F;&#x2F; 0\n\ncount.value++</code></pre>\n\n<ol start=\"3\">\n<li>computed 函数</li>\n</ol>\n<p>Vue 3 中的 <code>computed</code> 函数用来创建计算属性。与 Vue 2 中的 <code>computed</code> 类似，但是在使用时需要在 computed 函数内部返回计算结果。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; computed, reactive &#125; from &#39;vue&#39;\n\nconst state &#x3D; reactive(&#123;\n  message: &#39;Hello&#39;,\n  name: &#39;World&#39;\n&#125;)\n\nconst fullName &#x3D; computed(() &#x3D;&gt; &#123;\n  return &#96;$&#123;state.message&#125; $&#123;state.name&#125;&#96;\n&#125;)\n\nconsole.log(fullName.value) &#x2F;&#x2F; &#39;Hello World&#39;\n\n&#x2F;&#x2F; 修改响应式对象中的属性\nstate.name &#x3D; &#39;Vue 3&#39;\nconsole.log(fullName.value) &#x2F;&#x2F; &#39;Hello Vue 3&#39;</code></pre>\n\n<ol start=\"4\">\n<li>watch / watchEffect 函数</li>\n</ol>\n<p>Vue 3 中的 <code>watch</code> 和 <code>watchEffect</code> 函数用来监视响应式对象的变化，当被监视的对象发生变化时，会触发回调函数执行。</p>\n<p><code>watch</code> 函数用来监视特定的响应式属性，当该属性的值发生变化时才会触发回调函数执行。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; watch, reactive &#125; from &#39;vue&#39;\n\nconst state &#x3D; reactive(&#123;\n  count: 0,\n  message: &#39;Hello World&#39;\n&#125;)\n\nwatch(\n  () &#x3D;&gt; state.count,\n  (newValue, oldValue) &#x3D;&gt; &#123;\n    console.log(&#96;count changed from $&#123;oldValue&#125; to $&#123;newValue&#125;&#96;)\n  &#125;\n)\n\nstate.count++ &#x2F;&#x2F; count changed from 0 to 1</code></pre>\n\n<p><code>watchEffect</code> 函数用来监视响应式对象中的任何属性，当该对象的任何属性发生变化时都会触发回调函数执行。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; watchEffect, reactive &#125; from &#39;vue&#39;\n\nconst state &#x3D; reactive(&#123;\n  count: 0,\n  message: &#39;Hello World&#39;\n&#125;)\n\nwatchEffect(() &#x3D;&gt; &#123;\n  console.log(&#96;state changed: $&#123;state.count&#125;, $&#123;state.message&#125;&#96;)\n&#125;)\n\nstate.count++ &#x2F;&#x2F; state changed: 1, Hello World\nstate.message &#x3D; &#39;Vue 3&#39; &#x2F;&#x2F; state changed: 1, Vue 3</code></pre>\n\n<p>以上是 Vue 3 中响应式系统的一些基础使用方法。与 Vue 2 相比，Vue 3 的响应式系统更加简洁、易懂，同时在性能和体积方面也得到了优化。</p>\n<h1 id=\"setup语法糖到底是什么\"><a href=\"#setup语法糖到底是什么\" class=\"headerlink\" title=\"setup语法糖到底是什么\"></a>setup语法糖到底是什么</h1><p> 起初 Vue3.0 暴露变量必须 return 出来，template中才能使用；<br> 这样会导致在页面上变量会出现很多次。<br> 很不友好，vue3.2只需在script标签中添加setup。<br> 可以帮助我们解决这个问题。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.组件只需引入不用注册，属性和方法也不用返回<br>2.也不用写setup函数，也不用写export default<br>3.自定义指令也可以在我们的template中自动获得。<br>4.子组件使用defineProps接受父组件参数<br>5.子组件defineEmits自定义事件，父组件调用<br>6.将子组件中的属性defineExpose(）暴露出去，这样父组件可以获取 </p></blockquote>\n<h1 id=\"新项目应该用vue2还是vue3\"><a href=\"#新项目应该用vue2还是vue3\" class=\"headerlink\" title=\"新项目应该用vue2还是vue3\"></a>新项目应该用vue2还是vue3</h1><p>这个问题，应该是毋庸置疑的，<code>Vue 2 将于 2023 年 12 月 31 日停止维护。</code>所以我们在做新的项目肯定是优先考虑vue3的。老项目用的是vue2的话，需不需要重构，这要看实际的场景了。<br>vue3搭配vite，开发体验简直提升了一个档次。速度更快，体验更好，性能更好，为何不用新的呢？而且vue3的学习成本也不高，有vue2的基础，上手vue3那简直是分分钟的事情，如果有问题就直接查文档就好了。vue的官方文档还是比较详细的。</p>\n<h3 id=\"总结一下：\"><a href=\"#总结一下：\" class=\"headerlink\" title=\"总结一下：\"></a>总结一下：</h3><p>对于新项目，建议优先考虑使用 Vue 3。</p>\n<p>以下是一些选择 Vue 3 的理由：</p>\n<ol>\n<li><p>更好的性能：Vue 3 在性能方面进行了许多优化，包括更快的渲染速度和更小的包体积。它引入了基于 Proxy 的响应式系统，使得响应式数据的追踪和更新更高效，同时也提高了虚拟 DOM 渲染的性能。</p>\n</li>\n<li><p>更好的开发体验：Vue 3 提供了一些新的特性和语法糖，例如 <code>Composition API</code>、<code>setup</code> 函数等，可以帮助开发者组织和重用组件逻辑，提高代码的可读性和可维护性。另外，它还提供了更多的 TypeScript 支持，包括类型推断和类型声明。</p>\n</li>\n<li><p>更好的生态系统：随着时间的推移，Vue 3 生态系统会不断壮大，支持的库和插件会越来越多。而 Vue 2 的生态系统虽然依然庞大，但未来的新特性和更新可能会更多地集中在 Vue 3 上。</p>\n</li>\n</ol>\n<p>当然，对于一些特定情况，如已经有一个 Vue 2 的项目或依赖某个 Vue 2 的第三方库，可能需要权衡利弊再做选择。但从长远来看，Vue 3 将是更好的选择，它提供了更多的新特性、更好的性能和开发体验，以及更好的生态支持。</p>\n<h1 id=\"vue3可以搭配哪些库使用\"><a href=\"#vue3可以搭配哪些库使用\" class=\"headerlink\" title=\"vue3可以搭配哪些库使用\"></a>vue3可以搭配哪些库使用</h1><p>首先是vue全家桶了：   </p>\n<ul>\n<li>vueRouter</li>\n<li>vuex/pinia</li>\n<li>element plus</li>\n<li>axios</li>\n<li>vite</li>\n<li>typescript</li>\n<li>vue cli</li>\n</ul>\n<p>以上技术栈☝️应该是当下绝大多数企业家项目的选择了。还有搭配第三方UI组件库的一些UI框架,比如以下这些。孰优孰劣，大家可以自己去分辨，根据自己的项目需要来选择就可以了</p>\n<ul>\n<li><a href=\"https://antdv.com/docs/vue/introduce-cn\">Ant Design of Vue</a> </li>\n<li><a href=\"https://www.naiveui.com/zh-CN/dark\">naive UI</a></li>\n<li>  <a href=\"\">primevue</a></li>\n<li>  <a href=\"\">headlessui</a></li>\n<li>  <a href=\"\">vuetify</a></li>\n<li>  <a href=\"\">quasar</a></li>\n<li>  <a href=\"\">radix-vue</a></li>\n<li>  <a href=\"\">nuxtui</a></li>\n<li>  <a href=\"\">anu-vue</a></li>\n<li>  <a href=\"\">vuestic</a></li>\n<li>  <a href=\"\">daisyui</a></li>\n</ul>\n<p>​    </p>\n","feature":false,"text":" 想起来上次好好认真学vue，还是刚实习那会儿，如今回头看，已是三年有余了。vue从当初的vue2也大升级到vue3了。新的 API，新的语法糖，新的响应式…如今，我已不是以前那个小白了，对vue和js的使用也越来越熟练了，打算在好好系统的复习一下vue3的新特性。 vue2和v...","link":"","photos":[],"count_time":{"symbolsCount":"9.6k","symbolsTime":"9 mins."},"categories":[{"name":"vue","slug":"vue","count":2,"path":"api/categories/vue.json"}],"tags":[{"name":"vue","slug":"vue","count":2,"path":"api/tags/vue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vue2%E5%92%8Cvue3%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">vue2和vue3有哪些区别？</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vue3%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%9A%84API\"><span class=\"toc-text\">vue3有哪些新的API</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%84%E5%90%88%E5%BC%8FAPI\"><span class=\"toc-text\">组合式API</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90\"><span class=\"toc-text\">生命周期钩子</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80API\"><span class=\"toc-text\">全局API</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vue3%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">vue3的响应式系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%93%8D%E5%BA%94%E5%BC%8F-%E6%A0%B8%E5%BF%83\"><span class=\"toc-text\">响应式: 核心</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#setup%E8%AF%AD%E6%B3%95%E7%B3%96%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">setup语法糖到底是什么</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%96%B0%E9%A1%B9%E7%9B%AE%E5%BA%94%E8%AF%A5%E7%94%A8vue2%E8%BF%98%E6%98%AFvue3\"><span class=\"toc-text\">新项目应该用vue2还是vue3</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8B%EF%BC%9A\"><span class=\"toc-text\">总结一下：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#vue3%E5%8F%AF%E4%BB%A5%E6%90%AD%E9%85%8D%E5%93%AA%E4%BA%9B%E5%BA%93%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">vue3可以搭配哪些库使用</span></a></li></ol>","author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"mapped":true,"prev_post":{"title":"VUE生命周期详解","uid":"b71e680387a5f2c0fe8c8eb63677ef1b","slug":"vue/vue生命周期详解","date":"2023-03-15T02:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/vue/vue生命周期详解.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/35.png","text":"VUE生命周期 大家好我是迁客，一个初入行的小白！痴迷技术，对programming有着极大的兴趣和爱好。每周写一篇自己个人成长的技术博客！既是对自己的一个学习技术的一个记录，也是督促自己，坚持下去！加油Fighting！==从明天起，做一个新思维的人继承，多态，层层封装从明天起...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"vue","slug":"vue","count":2,"path":"api/categories/vue.json"}],"tags":[{"name":"vue","slug":"vue","count":2,"path":"api/tags/vue.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false},"next_post":{"title":"python爬虫超清桌面壁纸","uid":"fe95ebe795da542cb5396a487283045c","slug":"python/python爬虫超清桌面壁纸","date":"2023-03-13T02:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/python/python爬虫超清桌面壁纸.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/33.png","text":"前言 这篇文章，来爬好看的电脑壁纸。还是使用python来进行爬虫。感觉使用python爬很方便。为什么又写爬虫呢，因为我又发现了一个好看的免费的壁纸网站。 目标网站：https://desk.3gbizhi.com/我是打算获取首页18种类型的所有壁纸。 思路 获取18种类型的...","link":"","photos":[],"count_time":{"symbolsCount":"8.3k","symbolsTime":"8 mins."},"categories":[{"name":"python","slug":"python","count":2,"path":"api/categories/python.json"}],"tags":[{"name":"爬虫","slug":"爬虫","count":2,"path":"api/tags/爬虫.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":true}}