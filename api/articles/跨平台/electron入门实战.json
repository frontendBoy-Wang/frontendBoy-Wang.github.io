{"title":"electron入门实战","uid":"a92e00d13c8bb716cf5322fe53a36bc0","slug":"跨平台/electron入门实战","date":"2023-01-10T17:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/跨平台/electron入门实战.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/31.png","content":"<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0d69fc1535e4951a4260b81603474bd~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=3840&h=2160&s=1968934&e=jpg&b=365072\" alt=\"iTab-6o7z77-20231026200347-bzxckup.jpeg\"></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我们在学习某一种技术之前，得先问几个问题：</p>\n<ul>\n<li>  是什么？</li>\n<li>  干什么？</li>\n<li>  优缺点？</li>\n<li>  怎么用？</li>\n</ul>\n<p>当我们明白了以上几个问题之后，那就大概率算是基本掌握了这个技术，后面再要深入就要经过大量的项目实践和源码原理的研究了。</p></blockquote>\n<p>我本人也是做个好几个基于electron+react的项目了。在做electron项目过程中也是踩了不少坑，学习了不少关于electron的知识。这篇文章主要是介绍electron基本概念和入门级的实践。</p>\n<p>本文将从以下几个方面讲述electron的入门实践：</p>\n<ol>\n<li><p>什么是Electron</p>\n<ol>\n<li> 架构组成</li>\n<li> 底层技术</li>\n</ol>\n</li>\n<li><p> Electron的应用场景</p>\n</li>\n<li><p> Electron的优缺点</p>\n</li>\n<li><p>如何使用Electron</p>\n<ol>\n<li> 创建项目</li>\n</ol>\n</li>\n<li><p> 有哪些好用的cli脚手架</p>\n</li>\n</ol>\n<h1 id=\"什么是Electron\"><a href=\"#什么是Electron\" class=\"headerlink\" title=\"什么是Electron\"></a>什么是Electron</h1><p>这里借用官方的一句话：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Electron是一个使用 JavaScript、HTML 和 CSS 构建桌面应用程序的框架。 嵌入 <a href=\"https://www.chromium.org/\">Chromium</a> 和 <a href=\"https://nodejs.org/\">Node.js</a> 到 二进制的 Electron 允许 保持一个 JavaScript 代码代码库并创建 在Windows上运行的跨平台应用 macOS和Linux——不需要本地开发 经验。</p></blockquote>\n<h2 id=\"架构组成\"><a href=\"#架构组成\" class=\"headerlink\" title=\"架构组成\"></a>架构组成</h2><p>一图胜千言，简而言之Electron就等于谷歌浏览器+node+系统原生APIs</p>\n<ul>\n<li>  Chromium 为 Electron 提供强大的 UI 渲染能力，由于 Chromium 本身跨平台，因此无需考虑代码的兼容性。最重要的是，可以使用前端三板斧进行 Electron 开发。</li>\n<li>  Chromium 并不具备原生 GUI 的操作能力，因此 Electron 内部集成 Node.js，编写 UI 的同时也能够调用操作系统的底层 API，例如 path、fs、crypto 等模块。</li>\n<li>  Native API 为 Electron 提供原生系统的 GUI 支持，借此 Electron 可以调用原生应用程序接口。</li>\n</ul>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dd6b8610d52435494a09073330dc3df~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1520&h=794&s=264469&e=png&a=1&b=d0d0d0\" alt=\"image-20231026214226-ekfgp1b.png\"></p>\n<p>总结起来，Chromium 负责页面 UI 渲染，Node.js 负责业务逻辑，Native API 则提供原生能力和跨平台</p>\n<h2 id=\"底层技术\"><a href=\"#底层技术\" class=\"headerlink\" title=\"底层技术\"></a>底层技术</h2><p>Chromium 的多进程模式主要由三部分组成: 浏览器端(Browser)、渲染器端(Render)、浏览器与渲染器的通信方式(IPC)</p>\n<p>1.浏览器进程</p>\n<p>浏览器进程 Browser 只有一个，当 Chrome 打开时，进程启动。浏览器为每个渲染进程维护对应的 RenderProcessHost，负责浏览器与渲染器的交互。RenderViewHost 则是与 RenderView 对象进行交互，渲染网页的内容。浏览器与渲染器通过 IPC 进行通信。</p>\n<p>2.渲染进程管理</p>\n<p>每个渲染进程都有一个全局 RenderProcess 对象，可以管理其与父浏览器进程之间的通信，并维护其全局状态。</p>\n<p>3.view 管理</p>\n<p>每个渲染器可以维护多个 RenderView 对象，当新开标签页或弹出窗口后，渲染进程就会创建一个 RenderView，RenderView 对象与它在浏览器进程中对应的 RenderViewHost 和 Webkit 嵌入层通信，渲染出网页网页内容(这里是我们日常主要关注的地方)。</p>\n<h1 id=\"Electron的应用场景\"><a href=\"#Electron的应用场景\" class=\"headerlink\" title=\"Electron的应用场景\"></a>Electron的应用场景</h1><p>Electron 的应用场景非常广泛，以下是一些常见的 Electron 应用场景：</p>\n<ol>\n<li> 桌面应用程序开发：Electron 提供了丰富的 API 和工具，使开发者能够使用 HTML、CSS 和 JavaScript 构建功能强大的桌面应用程序。这种跨平台的能力使得开发者可以在 Windows、macOS 和 Linux 等操作系统上构建一次代码，多平台运行。</li>\n<li> 跨平台的编辑器和开发工具：许多流行的代码编辑器和开发工具，如 Visual Studio Code、Atom 和 Slack，都是使用 Electron 构建的。Electron 提供了强大的扩展性和定制化能力，使得开发者能够创建适用于各种编程语言和开发环境的工具。</li>\n<li> 桌面通讯工具：Electron 可以用于构建各种类型的桌面通讯工具，如聊天应用、视频会议工具和 VoIP（Voice over IP）应用。通过利用 Chromium 的 WebRTC 技术，Electron 应用程序可以实现实时音视频通讯和数据传输。</li>\n<li> 桌面音乐和媒体播放器：Electron 可以用于构建音乐播放器、媒体管理工具和多媒体应用程序。通过结合 Node.js 的能力，开发者可以轻松地处理音频和视频文件、实现播放列表和音频可视化等功能。</li>\n<li> 桌面游戏：Electron 提供了强大的图形渲染能力和硬件加速支持，使得开发者可以构建桌面游戏应用程序。通过结合 HTML5、Canvas 和 WebGL 技术，开发者可以创建高性能的游戏，并利用 Electron 的跨平台特性将其发布到不同的操作系统上。</li>\n</ol>\n<p>总之，Electron 的应用场景非常广泛，适用于各种类型的桌面应用程序开发，包括编辑器、开发工具、通讯工具、音乐播放器、媒体应用和游戏等。它的跨平台特性和丰富的功能使得开发者能够快速构建出功能丰富、可扩展的桌面应用程序。</p>\n<h1 id=\"Electron的优缺点\"><a href=\"#Electron的优缺点\" class=\"headerlink\" title=\"Electron的优缺点\"></a>Electron的优缺点</h1><h2 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h2><ol>\n<li> 跨平台支持：Electron 可以在多种操作系统上运行，包括 Windows、macOS 和 Linux 等。这使得开发者可以使用一套代码构建适用于不同平台的应用程序。</li>\n<li> 强大的扩展性：Electron 提供了丰富的 API 和工具，使得开发者可以轻松地扩展和定制应用程序的功能。此外，Electron 还支持各种第三方插件和库，使得开发者能够快速实现复杂的功能。</li>\n<li> 易于开发和调试：Electron 使用 HTML、CSS 和 JavaScript 进行开发，这些技术是广泛使用的前端开发技术。这使得开发者可以使用熟悉的技术栈进行开发，并且可以利用浏览器的调试工具进行调试。</li>\n<li> 高性能和硬件加速：Electron 基于 Chromium 构建，具有强大的图形渲染能力和硬件加速支持。这使得开发者可以构建高性能的应用程序，并且可以利用 GPU 加速来提高图形渲染性能。</li>\n<li> 社区活跃：Electron 拥有庞大的社区支持，这意味着开发者可以轻松地获取文档、示例代码和技术支持。此外，Electron 还有许多第三方插件和库可供选择，可以帮助开发者更快地构建应用程序。</li>\n</ol>\n<h2 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h2><ol>\n<li> 内存占用高：Electron 应用程序通常需要占用大量的内存，这可能会导致性能问题和用户体验问题。</li>\n<li> 安全问题：由于 Electron 应用程序使用了 Chromium 的渲染引擎，因此可能存在一些安全问题，如 XSS 攻击和跨站点脚本攻击等。</li>\n<li> 文件大小较大：Electron 应用程序通常比传统的本地应用程序更大，这可能会导致下载和安装时间较长。</li>\n<li> 更新管理困难：由于 Electron 应用程序需要更新整个应用程序包，因此更新管理可能会比较困难，尤其是在用户数据存储和应用程序配置方面。</li>\n</ol>\n<p>总之， 开发者需要根据自己的需求和应用场景来选择是否使用该框架。如果 需要构建跨平台的应用程序，并且需要快速迭代和定制化功能，那么 Electron 可能是一个不错的选择。</p>\n<h1 id=\"如何使用Electron\"><a href=\"#如何使用Electron\" class=\"headerlink\" title=\"如何使用Electron\"></a>如何使用Electron</h1><p>当然是先安装啦</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install --save-dev electron\n\nyarn add --dev electron</code></pre>\n\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p>然后用npm创建工程化项目</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm init </code></pre>\n\n<p>添加脚本命令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;\n  &quot;scripts&quot;: &#123;\n    &quot;start&quot;: &quot;electron .&quot;\n  &#125;\n&#125;</code></pre>\n\n<p>创建main.js</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const &#123; app, BrowserWindow &#125; &#x3D; require(&#39;electron&#39;)\nconst path &#x3D; require(&#39;node:path&#39;)\n\nconst createWindow &#x3D; () &#x3D;&gt; &#123;\n    const mainWindow &#x3D; new BrowserWindow(&#123;\n        width: 800,\n        height: 600,\n        webPreferences: &#123;\n            preload: path.join(__dirname, &#39;preload.js&#39;)\n        &#125;\n    &#125;)\n\n    &#x2F;&#x2F; 加载 index.html\n    mainWindow.loadFile(&#39;index.html&#39;)\n\n    &#x2F;&#x2F; 打开开发工具\n    &#x2F;&#x2F; mainWindow.webContents.openDevTools()\n&#125;\n\n&#x2F;&#x2F; 这段程序将会在 Electron 结束初始化\n&#x2F;&#x2F; 和创建浏览器窗口的时候调用\n&#x2F;&#x2F; 部分 API 在 ready 事件触发后才能使用。\napp.whenReady().then(() &#x3D;&gt; &#123;\n    createWindow()\n\n    app.on(&#39;activate&#39;, () &#x3D;&gt; &#123;\n        &#x2F;&#x2F; 在 macOS 系统内, 如果没有已开启的应用窗口\n        &#x2F;&#x2F; 点击托盘图标时通常会重新创建一个新窗口\n        if (BrowserWindow.getAllWindows().length &#x3D;&#x3D;&#x3D; 0) createWindow()\n    &#125;)\n&#125;)\n\n&#x2F;&#x2F; 除了 macOS 外，当所有窗口都被关闭的时候退出程序。 因此, 通常\n&#x2F;&#x2F; 对应用程序和它们的菜单栏来说应该时刻保持激活状态, \n&#x2F;&#x2F; 直到用户使用 Cmd + Q 明确退出\napp.on(&#39;window-all-closed&#39;, () &#x3D;&gt; &#123;\n    if (process.platform !&#x3D;&#x3D; &#39;darwin&#39;) app.quit()\n&#125;)\n\n&#x2F;&#x2F; 在当前文件中你可以引入所有的主进程代码\n&#x2F;&#x2F; 也可以拆分成几个文件，然后用 require 导入。</code></pre>\n\n<h1 id=\"有哪些好用的cli脚手架\"><a href=\"#有哪些好用的cli脚手架\" class=\"headerlink\" title=\"有哪些好用的cli脚手架\"></a>有哪些好用的cli脚手架</h1><p>以下是几个常用的 Electron 脚手架，可以帮助快速开始 Electron 应用程序的开发：</p>\n<ol>\n<li> Electron Forge：Electron Forge 是一个功能强大的命令行工具和脚手架，可以帮助 初始化、构建和打包 Electron 应用程序。它提供了一套简单的命令行接口，使得创建和管理 Electron 项目变得更加容易。</li>\n<li> Electron React Boilerplate：这是一个基于 Electron 和 React 的脚手架项目，提供了一个现代化的开发环境和项目结构。它集成了许多常用的工具和库，如 Webpack、Babel、Redux 等，使得开发 Electron 应用程序变得更加高效和便捷。</li>\n<li> Electron Vue：如果 喜欢使用 Vue.js 进行开发，那么 Electron Vue 是一个不错的选择。它提供了一个基于 Vue.js 的 Electron 开发模板，集成了许多常用的工具和插件，如 Vue Router、Vuex 等，使得开发 Electron 应用程序与 Vue.js 更加无缝衔接。</li>\n<li> Electron-Boilerplate：这是一个简单而灵活的 Electron 脚手架，提供了一个基本的项目结构和开发工作流程。它没有过多的集成和预设，适合那些希望从头开始构建自己的 Electron 应用程序的开发者。</li>\n<li> Electron-React-Boilerplate：这是一个基于 Electron 和 React 的脚手架项目，提供了一个完整的开发环境和项目结构。它集成了许多常用的工具和库，如 Webpack、Babel、React Router 等，使得开发 Electron 应用程序变得更加高效和便捷。</li>\n</ol>\n<p>这些脚手架都有活跃的社区支持和文档， 可以根据自己的需求选择最适合 的脚手架进行开发。无论 是使用原生 JavaScript、React、Vue.js 还是其他前端框架，都可以找到相应的 Electron 脚手架来帮助 快速启动项目。</p>\n","feature":false,"text":" 前言 我们在学习某一种技术之前，得先问几个问题： 是什么？ 干什么？ 优缺点？ 怎么用？ 当我们明白了以上几个问题之后，那就大概率算是基本掌握了这个技术，后面再要深入就要经过大量的项目实践和源码原理的研究了。 我本人也是做个好几个基于electron+react的项目了。在做e...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"electron","slug":"electron","count":1,"path":"api/categories/electron.json"}],"tags":[{"name":"electron","slug":"electron","count":1,"path":"api/tags/electron.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFElectron\"><span class=\"toc-text\">什么是Electron</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%B6%E6%9E%84%E7%BB%84%E6%88%90\"><span class=\"toc-text\">架构组成</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">底层技术</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Electron%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">Electron的应用场景</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Electron%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">Electron的优缺点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">优点：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">缺点：</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Electron\"><span class=\"toc-text\">如何使用Electron</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">创建项目</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%89%E5%93%AA%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84cli%E8%84%9A%E6%89%8B%E6%9E%B6\"><span class=\"toc-text\">有哪些好用的cli脚手架</span></a></li></ol>","author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"mapped":true,"prev_post":{"title":"回首过去2022，展望未来2023","uid":"b4366d883a819ef373341f33c0b751ef","slug":"年终总结/回首过去2022，展望未来2023","date":"2023-02-01T02:14:26.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/年终总结/回首过去2022，展望未来2023.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/19.png","text":" 📒 让我们站在以年为节点的时间线上，看看2022一年时间做了什么、未来2023还能做什么 年度回顾 整体回顾本年度大概做了哪些事。 关键词：稳健成长，险中求稳 给自己一个贴切的年度关键词。这就像一本书的目录，能够让你快速想起之后的事情。 2022年可以说是疫情的最后一年也是很艰...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"年终总结","slug":"年终总结","count":2,"path":"api/categories/年终总结.json"}],"tags":[{"name":"生活","slug":"生活","count":1,"path":"api/tags/生活.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":true},"next_post":{"title":"深入理解Redux数据更新机制：数据流管理的核心原理","uid":"67e534ae18855eb1a7fe1ada975d8605","slug":"react/深入理解Redux数据更新机制：数据流管理的核心原理","date":"2023-01-10T14:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/react/深入理解Redux数据更新机制：数据流管理的核心原理.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/73.png","text":"前言在现代的前端开发中，数据管理是一个至关重要的问题。随着应用程序的复杂性不断增加，我们需要一种有效的方式来管理数据的流动和更新。Redux作为一个流行的状态管理库，提供了一种简洁而强大的数据更新机制，成为了许多开发者的首选。 本文将深入探讨Redux的数据更新机制，帮助读者更好...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"react","slug":"react","count":3,"path":"api/categories/react.json"}],"tags":[{"name":"react redux","slug":"react-redux","count":1,"path":"api/tags/react-redux.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false}}