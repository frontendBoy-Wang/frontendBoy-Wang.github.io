{"title":"如何实现一个WebComponent组件","uid":"83d359dd0111440bbb3e9ab60e3adbe5","slug":"js/如何实现一个WebComponent组件","date":"2022-11-04T14:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/js/如何实现一个WebComponent组件.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/17.png","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>作为开发者，我们都知道尽可能多的重用代码是一个好主意。这对于自定义标记结构来说通常不是那么容易 — 想想复杂的 HTML（以及相关的样式和脚本），有时你不得不写代码来呈现自定义 UI 控件，并且如果你不小心的话，多次使用它们会使你的页面变得一团糟。</p></blockquote>\n<h1 id=\"什么是Web-Conmponent组件\"><a href=\"#什么是Web-Conmponent组件\" class=\"headerlink\" title=\"什么是Web Conmponent组件\"></a>什么是Web Conmponent组件</h1><p>Web Component 是一套不同的用于构建可重用并封装化的组件化技术，允许你创建可重用的定制元素（它们的功能封装在你的代码之外）并且在你的 web 应用中使用它们。它是由一组标准规范组成的。其中最重要的规范包括 Custom Elements、Shadow DOM、HTML Templates 和 HTML Imports。</p>\n<p>Web Components 旨在解决这些问题 — 它由三项主要技术组成，它们可以一起使用来创建封装功能的定制元素，可以在你喜欢的任何地方重用，不必担心代码冲突。<br>以下参考MDN文档:</p>\n<ul>\n<li>  <strong>Custom element（自定义元素）</strong> ：一组 JavaScript API，允许你定义 custom elements 及其行为，然后可以在你的用户界面中按照需要使用它们。</li>\n<li>  <strong>Shadow DOM（影子 DOM）</strong> ：一组 JavaScript API，用于将封装的“影子”DOM 树附加到元素（与主文档 DOM 分开呈现）并控制其关联的功能。通过这种方式，你可以保持元素的功能私有，这样它们就可以被脚本化和样式化，而不用担心与文档的其他部分发生冲突。</li>\n<li>  <strong>HTML template（HTML 模板）：</strong>  <code>&lt;template&gt;</code>  和 <code>&lt;slot&gt;</code> 元素使你可以编写不在呈现页面中显示的标记模板。然后它们可以作为自定义元素结构的基础被多次重用。</li>\n</ul>\n<h1 id=\"如何创建并且使用web组件的详细步骤和方法\"><a href=\"#如何创建并且使用web组件的详细步骤和方法\" class=\"headerlink\" title=\"如何创建并且使用web组件的详细步骤和方法\"></a>如何创建并且使用web组件的详细步骤和方法</h1><p>当创建一个 Web Component 组件时，需要执行以下详细步骤：</p>\n<ol>\n<li><p>创建组件类：</p>\n<ul>\n<li>  使用 JavaScript 或 TypeScript 创建一个类来定义你的组件。</li>\n<li>  组件类应该继承自 <code>HTMLElement</code> 或其子类。这样可以确保你的组件拥有所有标准的 DOM 元素功能和属性。</li>\n</ul>\n</li>\n<li><p>定义组件模板：</p>\n<ul>\n<li>  使用 HTML 和 CSS 来定义组件的外观和布局。</li>\n<li>  可以在组件类中通过 <code>innerHTML</code> 或 <code>template</code> 属性设置组件的模板。</li>\n<li>  模板可以包含任何常规的 HTML、CSS 和 JavaScript 代码，用于构建组件的结构和样式。</li>\n</ul>\n</li>\n<li><p>添加生命周期方法：</p>\n<ul>\n<li><p>  生命周期方法是在组件生命周期的不同阶段被调用的特殊方法。</p>\n</li>\n<li><p>常用的生命周期方法包括：</p>\n<ul>\n<li>  <code>connectedCallback()</code>：当组件被插入到文档中时调用。可以在此方法中执行初始化操作，如添加事件监听器或进行初始渲染。</li>\n<li>  <code>disconnectedCallback()</code>：当组件从文档中移除时调用。可以在此方法中进行清理操作，如移除事件监听器或释放资源。</li>\n<li>  <code>attributeChangedCallback(attributeName, oldValue, newValue)</code>：当组件的属性值发生变化时调用。可以在此方法中处理属性变化的逻辑。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>实现组件功能：</p>\n<ul>\n<li>  在组件类中添加方法和属性，实现组件的功能。</li>\n<li>  可以使用 JavaScript 或其他库/框架来增强组件的行为。例如，你可以添加事件处理程序、数据绑定逻辑、动态更新组件等。</li>\n</ul>\n</li>\n<li><p>注册组件：</p>\n<ul>\n<li>  使用 <code>customElements.define</code> 方法将组件类注册为一个自定义元素。</li>\n<li>  通过调用 <code>customElements.define(tagName, componentClass)</code>，将组件类映射到特定的标签名称。</li>\n<li>  这样，当在 HTML 页面中使用该标签时，浏览器会自动创建组件的实例并进行渲染。</li>\n</ul>\n</li>\n<li><p>使用组件：</p>\n<ul>\n<li>  在 HTML 文档中使用组件标签，即可在页面中实例化和展示组件。</li>\n<li>  在标签中可以添加属性，这些属性可以在组件类中通过 <code>attributeChangedCallback()</code> 方法进行捕获和处理。</li>\n</ul>\n</li>\n</ol>\n<p>  我这里实现了一个最简单的web Component组件的例子:</p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n&#x2F;&#x2F; 创建组件类\nclass MyComponent extends HTMLElement &#123;\n    constructor() &#123;\n        super();\n    &#125;\n\n    connectedCallback() &#123;\n        this.innerHTML &#x3D; &#96;\n      &lt;div&gt;\n        &lt;h1&gt;Hello, Web Component!&lt;&#x2F;h1&gt;\n      &lt;&#x2F;div&gt;\n    &#96;;\n    &#125;\n&#125;\n\n&#x2F;&#x2F; 注册组件\ncustomElements.define(&#39;my-component&#39;, MyComponent);\n </code></pre>\n  <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;my-component&gt;&lt;&#x2F;my-component&gt;\n&lt;script src&#x3D;&quot;index.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/12c4f94e659540d6a355013746e52ce6~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1920&h=1048&s=218659&e=png&b=313340\" alt=\"image.png\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Web Component 的优势在于提高了前端开发的模块化程度、可维护性和可重用性。它使得开发者能够更加专注于组件级别的开发，减少了整体页面的复杂度，同时也为跨团队协作和组件库的构建提供了更好的支持。总的来说，Web Component 是现代前端开发中非常重要的一环，有助于构建更加灵活、可靠和可维护的 Web 应用。</p>\n","feature":false,"text":" 作为开发者，我们都知道尽可能多的重用代码是一个好主意。这对于自定义标记结构来说通常不是那么容易 — 想想复杂的 HTML（以及相关的样式和脚本），有时你不得不写代码来呈现自定义 UI 控件，并且如果你不小心的话，多次使用它们会使你的页面变得一团糟。 什么是Web Conmpon...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":5,"path":"api/categories/前端.json"},{"name":"js","slug":"前端/js","count":2,"path":"api/categories/前端/js.json"},{"name":"html","slug":"前端/js/html","count":1,"path":"api/categories/前端/js/html.json"}],"tags":[{"name":"web组件","slug":"web组件","count":1,"path":"api/tags/web组件.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFWeb-Conmponent%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">什么是Web Conmponent组件</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E5%B9%B6%E4%B8%94%E4%BD%BF%E7%94%A8web%E7%BB%84%E4%BB%B6%E7%9A%84%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4%E5%92%8C%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">如何创建并且使用web组件的详细步骤和方法</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"mapped":true,"prev_post":{"title":"一文带你了解跨域的前因后果和解决方案","uid":"06bcbca25b590a41890b9b1b71d4205b","slug":"js/一文带你了解跨域的前因后果和解决方案","date":"2023-01-04T14:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/js/一文带你了解跨域的前因后果和解决方案.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/0.png","text":" 什么是跨域在了解跨域之前，我们必须要了解一下同源策略。跨域问题其实就是浏览器的同源策略造成的。 同源策略同源策略限制了从同一个源加载的文档或脚本如何与另一个源的资源进行交互。这是浏览器的一个用于隔离潜在恶意文件的重要的安全机制。同源指的是：协议、端口号、域名必须一致。 跨源资源...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"跨域","slug":"跨域","count":1,"path":"api/categories/跨域.json"},{"name":"前端","slug":"跨域/前端","count":1,"path":"api/categories/跨域/前端.json"}],"tags":[{"name":"浏览器 跨域","slug":"浏览器-跨域","count":1,"path":"api/tags/浏览器-跨域.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false},"next_post":{"title":"一个基于vite构建的vue3+pinia+ts+elementUI plus的初始化开箱即用的项目模版","uid":"a7e01fb13cc6c5d9b1c60619ae2f3415","slug":"vue/一个基于vite构建的vue3+pinia+ts+elementUI plus的初始化开箱即用的项目模版","date":"2022-10-08T15:14:01.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/vue/一个基于vite构建的vue3+pinia+ts+elementUI plus的初始化开箱即用的项目模版.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/75.jpeg","text":"前言vue3如今已经成为默认版本了，相信大多数公司已经全面拥抱vue3了。 而Vite作为新一代的新型前端构建工具，使用它能够显著提升前端开发体验。 什么是Vite这里借用官方的介绍： 一个开发服务器，它基于 原生 ES 模块 提供了 丰富的内建功能，如速度快到惊人的 模块热更新...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"前端","slug":"前端","count":5,"path":"api/categories/前端.json"}],"tags":[{"name":"vue JS","slug":"vue-JS","count":1,"path":"api/tags/vue-JS.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":true}}