{"title":"一文带你了解call、apply、bind的区别及源码实现","uid":"9d169bb0c28cbff70a428eb8d736c659","slug":"js/一文带你了解call、apply、bind的区别及源码实现","date":"2023-10-03T18:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/js/一文带你了解call、apply、bind的区别及源码实现.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/0.png","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>call、apply和bind都是JavaScript中Function对象的原型方法，它们的作用主要是改变函数的执行上下文（即this的值）以及传递参数。</p>\n<h1 id=\"什么是js上下文\"><a href=\"#什么是js上下文\" class=\"headerlink\" title=\"什么是js上下文\"></a>什么是js上下文</h1><p>在讲解这三个方法之前，我先需要了解一下什么是js的上下文。</p>\n<p>执行上下文是JavaScript中的一个重要概念，它是一段代码被执行时的环境。它包含了当前执行环境中的所有信息，如变量、函数声明、参数（arguments）、作用域链，以及this等信息。</p>\n<p>在JavaScript中，执行上下文主要有两种类型：全局执行上下文和函数执行上下文。<br>还有一个## <code>eval</code>函数执行上下文</p>\n<h2 id=\"全局执行上下文\"><a href=\"#全局执行上下文\" class=\"headerlink\" title=\"全局执行上下文\"></a>全局执行上下文</h2><p>全局执行上下文是为运行存在于函数之外的任何代码而创建的，即整个JavaScript程序的执行环境就是一个全局执行上下文。每当一个函数被调用时，就会创建一个新的函数执行上下文，这个函数执行上下文包含了这个函数自身的局部变量、参数等执行环境信息。此外，使用 eval() 函数也会创建一个新的执行上下文。</p>\n<h2 id=\"函数执行上下文。\"><a href=\"#函数执行上下文。\" class=\"headerlink\" title=\"函数执行上下文。\"></a>函数执行上下文。</h2><p>函数执行上下文是指在调用一个函数时，函数内部的变量和参数的取值范围。当一个函数被调用时，就会为该函数创建一个新的执行上下文，函数的上下文可以有任意多个。</p>\n<p>在JavaScript中，函数执行上下文通常包括以下内容：</p>\n<ol>\n<li>函数内部声明的变量（局部变量）：这些变量只在函数内部有效，函数外部无法访问。</li>\n<li>函数参数：当调用函数时传递的实参，它们会被赋值给形参。</li>\n<li>全局变量：在函数外部声明的变量，可以在函数内部直接访问。</li>\n<li>内置对象：如Math、Array等，它们提供了一些内置的方法和属性。</li>\n<li>其他执行上下文相关的信息，如调用栈、作用域链等。</li>\n</ol>\n<p>以下是一个示例代码，展示了函数执行上下文的相关内容：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 定义全局变量\nvar globalVar &#x3D; &quot;I am a global variable&quot;;\n\nfunction exampleFunction(param1, param2) &#123;\n  &#x2F;&#x2F; 定义局部变量\n  var localVar &#x3D; &quot;I am a local variable&quot;;\n\n  console.log(globalVar); &#x2F;&#x2F; 输出全局变量的值\n  console.log(localVar); &#x2F;&#x2F; 输出局部变量的值\n  console.log(param1); &#x2F;&#x2F; 输出第一个参数的值\n  console.log(param2); &#x2F;&#x2F; 输出第二个参数的值\n&#125;\n\nexampleFunction(&quot;Hello&quot;, &quot;World&quot;);</code></pre>\n\n<p>在上面的示例中，<code>exampleFunction</code>是一个函数，它接受两个参数<code>param1</code>和<code>param2</code>。在函数内部，我们声明了一个局部变量<code>localVar</code>，并使用<code>console.log()</code>打印了全局变量<code>globalVar</code>、局部变量<code>localVar</code>以及传入的参数值。当我们调用<code>exampleFunction(&quot;Hello&quot;, &quot;World&quot;)</code>时，函数执行上下文中的变量和参数值将被正确地传递给函数内部的代码块。</p>\n<h2 id=\"eval函数执行上下文\"><a href=\"#eval函数执行上下文\" class=\"headerlink\" title=\"eval函数执行上下文\"></a><code>eval</code>函数执行上下文</h2><p>执行在eval函数中的代码会有属于他自己的执行上下文，不过eval函数不常使用，</p>\n<p>在JavaScript中，<code>eval()</code>函数用于执行一个字符串表达式，并返回表达式的值。它的执行上下文通常是当前的全局和局部变量。</p>\n<p>以下是一个示例代码，展示了如何使用<code>eval()</code>函数：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 定义全局变量\nvar globalVar &#x3D; 10;\n\n&#x2F;&#x2F; 定义局部变量\nvar localVar &#x3D; 5;\n\n&#x2F;&#x2F; 使用eval()函数执行字符串表达式\nvar result &#x3D; eval(&quot;globalVar + localVar&quot;);\n\nconsole.log(result); &#x2F;&#x2F; 输出结果为15</code></pre>\n\n<p>在上面的示例中，我们首先定义了两个变量<code>globalVar</code>和<code>localVar</code>，分别表示全局变量和局部变量。然后，我们使用<code>eval()</code>函数执行了一个字符串表达式<code>&quot;globalVar + localVar&quot;</code>，该表达式将返回全局变量和局部变量的和。最后，我们将结果打印出来，输出为15。</p>\n<h5 id=\"2-执行上下文栈\"><a href=\"#2-执行上下文栈\" class=\"headerlink\" title=\"2. 执行上下文栈\"></a>2. 执行上下文栈</h5><ul>\n<li>  JavaScript引擎使用执行上下文栈来管理执行上下文</li>\n<li>  当JavaScript执行代码时，首先遇到全局代码，会创建一个全局执行上下文并且压入执行栈中，每当遇到一个函数调用，就会为该函数创建一个新的执行上下文并压入栈顶，引擎会执行位于执行上下文栈顶的函数，当函数执行完成之后，执行上下文从栈中弹出，继续执行下一个上下文。当所有的代码都执行完毕之后，从栈中弹出全局执行上下文。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let a &#x3D; &#39;Hello World!&#39;;\nfunction first() &#123;\n  console.log(&#39;Inside first function&#39;);\n  second();\n  console.log(&#39;Again inside first function&#39;);\n&#125;\nfunction second() &#123;\n  console.log(&#39;Inside second function&#39;);\n&#125;\nfirst();\n&#x2F;&#x2F;执行顺序\n&#x2F;&#x2F;先执行second(),在执行first()</code></pre>\n\n<h5 id=\"3-创建执行上下文\"><a href=\"#3-创建执行上下文\" class=\"headerlink\" title=\"3. 创建执行上下文\"></a>3. 创建执行上下文</h5><p>创建执行上下文有两个阶段：<strong>创建阶段</strong>和<strong>执行阶段</strong></p>\n<p><strong>1）创建阶段</strong></p>\n<p>（1）this绑定</p>\n<ul>\n<li>  在全局执行上下文中，this指向全局对象（window对象）</li>\n<li>  在函数执行上下文中，this指向取决于函数如何调用。如果它被一个引用对象调用，那么 this 会被设置成那个对象，否则 this 的值被设置为全局对象或者 undefined</li>\n</ul>\n<p>（2）创建词法环境组件</p>\n<ul>\n<li>  词法环境是一种有<strong>标识符——变量映射</strong>的数据结构，标识符是指变量/函数名，变量是对实际对象或原始数据的引用。</li>\n<li>  词法环境的内部有两个组件：<strong>加粗样式</strong>：环境记录器:用来储存变量个函数声明的实际位置<strong>外部环境的引用</strong>：可以访问父级作用域</li>\n</ul>\n<p>（3）创建变量环境组件</p>\n<ul>\n<li>  变量环境也是一个词法环境，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。</li>\n</ul>\n<p><strong>2）执行阶段</strong></p>\n<p>此阶段会完成对变量的分配，最后执行完代码。</p>\n<p><strong>简单来说执行上下文就是指：</strong></p>\n<p>在执行一点JS代码之前，需要先解析代码。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。这一步执行完了，才开始正式的执行程序。</p>\n<p>在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。</p>\n<ul>\n<li>  全局上下文：变量定义，函数声明</li>\n<li>  函数上下文：变量定义，函数声明，<code>this</code>，<code>arguments</code></li>\n</ul>\n<h1 id=\"this-call-apply-bind\"><a href=\"#this-call-apply-bind\" class=\"headerlink\" title=\"this/call/apply/bind\"></a>this/call/apply/bind</h1><p>this 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，this 的指向可以通过四种调用模式来判断。</p>\n<ul>\n<li>  第一种是<strong>函数调用模式</strong>，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。</li>\n<li>  第二种是<strong>方法调用模式</strong>，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。</li>\n<li>  第三种是<strong>构造器调用模式</strong>，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。</li>\n<li>  第四种是 <strong>apply 、 call 和 bind 调用模式</strong>，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变。</li>\n</ul>\n<p>这四种方式，使用构造器调用模式的优先级最高，然后是 apply、call 和 bind 调用模式，然后是方法调用模式，然后是函数调用模式。</p>\n<h1 id=\"call、apply、bind的区别\"><a href=\"#call、apply、bind的区别\" class=\"headerlink\" title=\"call、apply、bind的区别\"></a>call、apply、bind的区别</h1><p>在JavaScript中，<code>call()</code>、<code>apply()</code>和<code>bind()</code>都是用于改变函数执行上下文的方法。它们的主要区别在于传递参数的方式和返回值。</p>\n<ol>\n<li><p><code>call()</code>方法：</p>\n<ul>\n<li>语法：<code>function.call(thisArg, arg1, arg2, ...)</code></li>\n<li>作用：调用一个函数，并设置函数内部的<code>this</code>值为指定的值，同时传递一系列参数给函数。</li>\n<li>返回值：返回被调用函数的返回值。</li>\n<li>示例代码：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function greet() &#123;\n  console.log(&#96;Hello, $&#123;this.name&#125;!&#96;);\n&#125;\n\nvar person &#x3D; &#123; name: &#39;Alice&#39; &#125;;\ngreet.call(person); &#x2F;&#x2F; 输出 &quot;Hello, Alice!&quot;</code></pre></li>\n</ul>\n</li>\n<li><p><code>apply()</code>方法：</p>\n<ul>\n<li>语法：<code>function.apply(thisArg, [argsArray])</code></li>\n<li>作用：调用一个函数，并设置函数内部的<code>this</code>值为指定的值，同时传递一个数组作为参数列表给函数。</li>\n<li>返回值：返回被调用函数的返回值。</li>\n<li>示例代码：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function greet() &#123;\n  console.log(&#96;Hello, $&#123;this.name&#125;!&#96;);\n&#125;\n\nvar person &#x3D; &#123; name: &#39;Alice&#39; &#125;;\ngreet.apply(person); &#x2F;&#x2F; 输出 &quot;Hello, Alice!&quot;</code></pre></li>\n</ul>\n</li>\n<li><p><code>bind()</code>方法：</p>\n<ul>\n<li>语法：<code>function.bind(thisArg, arg1, arg2, ...)</code></li>\n<li>作用：创建一个新的函数，并将原函数内部的<code>this</code>值设置为指定的值，同时将一系列参数绑定到新函数上。新函数可以单独调用，但不会改变原函数的执行上下文。</li>\n<li>返回值：返回一个新函数。</li>\n<li>示例代码：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function greet() &#123;\n  console.log(&#96;Hello, $&#123;this.name&#125;!&#96;);\n&#125;\n\nvar person &#x3D; &#123; name: &#39;Alice&#39; &#125;;\nvar greetPerson &#x3D; greet.bind(person); &#x2F;&#x2F; 创建新函数 greetPerson\ngreetPerson(); &#x2F;&#x2F; 输出 &quot;Hello, Alice!&quot;</code></pre></li>\n</ul>\n</li>\n</ol>\n<p>总结来说，<code>call()</code>和<code>apply()</code>方法都可以用来改变函数执行上下文，并且可以传递多个参数给函数。而<code>bind()</code>方法则创建了一个新的函数，并将原函数的执行上下文绑定到新函数上，但只接受第一个参数作为上下文对象，后续的参数会作为新函数的参数。</p>\n<h1 id=\"call、apply、bind的源码实现\"><a href=\"#call、apply、bind的源码实现\" class=\"headerlink\" title=\"call、apply、bind的源码实现\"></a>call、apply、bind的源码实现</h1><h2 id=\"（1）call-函数的实现步骤：\"><a href=\"#（1）call-函数的实现步骤：\" class=\"headerlink\" title=\"（1）call 函数的实现步骤：\"></a><strong>（1）call 函数的实现步骤：</strong></h2><ul>\n<li>  判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>  判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li>\n<li>  处理传入的参数，截取第一个参数后的所有参数。</li>\n<li>  将函数作为上下文对象的一个属性。</li>\n<li>  使用上下文对象来调用这个方法，并保存返回结果。</li>\n<li>  删除刚才新增的属性。</li>\n<li>  返回结果。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Function.prototype.myCall &#x3D; function(context) &#123;\n  &#x2F;&#x2F; 判断调用对象\n  if (typeof this !&#x3D;&#x3D; &quot;function&quot;) &#123;\n    console.error(&quot;type error&quot;);\n  &#125;\n  &#x2F;&#x2F; 获取参数\n  let args &#x3D; [...arguments].slice(1),\n    result &#x3D; null;\n  &#x2F;&#x2F; 判断 context 是否传入，如果未传入则设置为 window\n  context &#x3D; context || window;\n  &#x2F;&#x2F; 将调用函数设为对象的方法\n  context.fn &#x3D; this;\n  &#x2F;&#x2F; 调用函数\n  result &#x3D; context.fn(...args);\n  &#x2F;&#x2F; 将属性删除\n  delete context.fn;\n  return result;\n&#125;;</code></pre>\n\n<h2 id=\"（2）apply-函数的实现步骤：\"><a href=\"#（2）apply-函数的实现步骤：\" class=\"headerlink\" title=\"（2）apply 函数的实现步骤：\"></a><strong>（2）apply 函数的实现步骤：</strong></h2><ul>\n<li>  判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>  判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li>\n<li>  将函数作为上下文对象的一个属性。</li>\n<li>  判断参数值是否传入</li>\n<li>  使用上下文对象来调用这个方法，并保存返回结果。</li>\n<li>  删除刚才新增的属性</li>\n<li>  返回结果</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Function.prototype.myApply &#x3D; function(context) &#123;\n  &#x2F;&#x2F; 判断调用对象是否为函数\n  if (typeof this !&#x3D;&#x3D; &quot;function&quot;) &#123;\n    throw new TypeError(&quot;Error&quot;);\n  &#125;\n  let result &#x3D; null;\n  &#x2F;&#x2F; 判断 context 是否存在，如果未传入则为 window\n  context &#x3D; context || window;\n  &#x2F;&#x2F; 将函数设为对象的方法\n  context.fn &#x3D; this;\n  &#x2F;&#x2F; 调用方法\n  if (arguments[1]) &#123;\n    result &#x3D; context.fn(...arguments[1]);\n  &#125; else &#123;\n    result &#x3D; context.fn();\n  &#125;\n  &#x2F;&#x2F; 将属性删除\n  delete context.fn;\n  return result;\n&#125;;</code></pre>\n\n<h2 id=\"（3）bind-函数的实现步骤：\"><a href=\"#（3）bind-函数的实现步骤：\" class=\"headerlink\" title=\"（3）bind 函数的实现步骤：\"></a><strong>（3）bind 函数的实现步骤：</strong></h2><ul>\n<li>  判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>  保存当前函数的引用，获取其余传入参数值。</li>\n<li>  创建一个函数返回</li>\n<li>  函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Function.prototype.myBind &#x3D; function(context) &#123;\n  &#x2F;&#x2F; 判断调用对象是否为函数\n  if (typeof this !&#x3D;&#x3D; &quot;function&quot;) &#123;\n    throw new TypeError(&quot;Error&quot;);\n  &#125;\n  &#x2F;&#x2F; 获取参数\n  var args &#x3D; [...arguments].slice(1),\n    fn &#x3D; this;\n  return function Fn() &#123;\n    &#x2F;&#x2F; 根据调用方式，传入不同绑定值\n    return fn.apply(\n      this instanceof Fn ? this : context,\n      args.concat(...arguments)\n    );\n  &#125;;\n&#125;;</code></pre>","feature":false,"text":"前言call、apply和bind都是JavaScript中Function对象的原型方法，它们的作用主要是改变函数的执行上下文（即this的值）以及传递参数。 什么是js上下文在讲解这三个方法之前，我先需要了解一下什么是js的上下文。 执行上下文是JavaScript中的一个重...","link":"","photos":[],"count_time":{"symbolsCount":"7.2k","symbolsTime":"7 mins."},"categories":[{"name":"前端","slug":"前端","count":5,"path":"api/categories/前端.json"},{"name":"js","slug":"前端/js","count":2,"path":"api/categories/前端/js.json"}],"tags":[{"name":"js","slug":"js","count":1,"path":"api/tags/js.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFjs%E4%B8%8A%E4%B8%8B%E6%96%87\"><span class=\"toc-text\">什么是js上下文</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87\"><span class=\"toc-text\">全局执行上下文</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E3%80%82\"><span class=\"toc-text\">函数执行上下文。</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#eval%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87\"><span class=\"toc-text\">eval函数执行上下文</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88\"><span class=\"toc-text\">2. 执行上下文栈</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E5%88%9B%E5%BB%BA%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87\"><span class=\"toc-text\">3. 创建执行上下文</span></a></li></ol></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#this-call-apply-bind\"><span class=\"toc-text\">this&#x2F;call&#x2F;apply&#x2F;bind</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#call%E3%80%81apply%E3%80%81bind%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">call、apply、bind的区别</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#call%E3%80%81apply%E3%80%81bind%E7%9A%84%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">call、apply、bind的源码实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89call-%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4%EF%BC%9A\"><span class=\"toc-text\">（1）call 函数的实现步骤：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89apply-%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4%EF%BC%9A\"><span class=\"toc-text\">（2）apply 函数的实现步骤：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%EF%BC%883%EF%BC%89bind-%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4%EF%BC%9A\"><span class=\"toc-text\">（3）bind 函数的实现步骤：</span></a></li></ol></li></ol>","author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"mapped":true,"prev_post":{"title":"Three.js深入浅出：1-搭建Three.js开发环境","uid":"28100a05c0122f653152ea41cfe72159","slug":"threeJS/Three.js深入浅出：1-搭建Three.js开发环境","date":"2023-10-04T14:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/threeJS/Three.js深入浅出：1-搭建Three.js开发环境.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/3.png","text":"序言： 在现代互联网时代，Web 技术的快速发展使得 Web 开发领域日新月异。随着互联网内容变得越来越丰富、复杂，用户对于网页和应用程序的交互性和视觉效果提出了更高的要求。在这样的背景下，基于 WebGL 的 3D 图形技术越来越受到关注和重视。 而在众多的 3D 图形库中，T...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"Three","slug":"Three","count":3,"path":"api/categories/Three.json"}],"tags":[{"name":"threr.js","slug":"threr-js","count":3,"path":"api/tags/threr-js.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false},"next_post":{"title":"程序猿的专属成语,你get√了嘛","uid":"07d7c4a503d2608a4847b4cb839388ec","slug":"面试/程序猿的专属成语,你get√了嘛","date":"2023-10-03T02:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/面试/程序猿的专属成语,你get√了嘛.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/50.png","text":"我们知道当前经济环境下，就业困难。特别是关于就业和失业衍生出来的一系列新词汇。比如： 灵活就业， 慢就业， 摩擦就业， 适应性就业， 阶段性就业， 非连续性就业， 公益性就业， 自主就业， 定向委托培养就业 除了以上哪些新词汇，当然还有我们程序猿对当下环境的感慨，对职场的吐槽，对...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"其他","slug":"其他","count":1,"path":"api/categories/其他.json"}],"tags":[{"name":"其他","slug":"其他","count":1,"path":"api/tags/其他.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false}}