{"title":"如何使用node操作sqlite","uid":"2fb96575f2877512c0acb0b5dc6b763c","slug":"node/如何使用node操作sqlite","date":"2022-07-19T02:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/node/如何使用node操作sqlite.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/39.png","content":"<h1 id=\"什么是sqlit\"><a href=\"#什么是sqlit\" class=\"headerlink\" title=\"什么是sqlit\"></a>什么是sqlit</h1><p>SQLite是一种轻量级的嵌入式关系型数据库管理系统，它以库的形式存在，可以嵌入到应用程序中。它使用简单的、基于文件的数据库格式，不需要独立的服务器进程，非常适合在资源有限的环境中使用。</p>\n<h1 id=\"SQLite的优点\"><a href=\"#SQLite的优点\" class=\"headerlink\" title=\"SQLite的优点\"></a>SQLite的优点</h1><ol>\n<li>简单易用：SQLite的API简单明了，学习曲线低，使用方便。</li>\n<li>零配置：无需复杂的配置和管理，只需一个数据库文件即可开始使用。</li>\n<li>占用资源少：SQLite数据库文件通常很小，内存占用也较少，适用于嵌入式设备或低性能环境。</li>\n<li>支持事务：具备ACID特性，支持事务操作，保证数据的完整性和并发控制。</li>\n<li>跨平台：SQLite可以在多个操作系统上运行，包括Windows、macOS、Linux等。</li>\n</ol>\n<h1 id=\"SQLite的缺点包括\"><a href=\"#SQLite的缺点包括\" class=\"headerlink\" title=\"SQLite的缺点包括\"></a>SQLite的缺点包括</h1><ol>\n<li>并发性限制：由于它是单用户模式，不支持多个写操作同时进行，因此在高并发读写场景下性能可能受限。</li>\n<li>存储容量有限：由于文件格式的限制，SQLite数据库文件的大小通常有上限。</li>\n<li>功能相对较少：相比于传统的大型数据库管理系统，SQLite提供的功能较为有限，不适合处理大规模复杂数据。</li>\n</ol>\n<h1 id=\"SQLite适用于以下应用场景\"><a href=\"#SQLite适用于以下应用场景\" class=\"headerlink\" title=\"SQLite适用于以下应用场景\"></a>SQLite适用于以下应用场景</h1><ol>\n<li>移动应用：由于SQLite的轻量级特性，它常被用于移动应用开发中，用来存储和管理少量结构化数据。</li>\n<li>嵌入式系统：SQLite的小巧和低资源占用使它成为嵌入式设备上的理想选择，如物联网设备、嵌入式系统等。</li>\n<li>测试和原型开发：在快速开发和测试阶段，SQLite可以作为临时的数据库解决方案，提供方便的开发和测试环境。</li>\n<li>小型网站：对于小型网站或个人项目，SQLite提供了一个简单可靠的数据库解决方案，不需要复杂的数据库服务器。</li>\n</ol>\n<p>总之，SQLite在轻量级应用和资源受限环境下具有优势，适合那些对性能要求不高、数据量较小或者需要方便集成的场景。</p>\n<h1 id=\"如何操作sqlite\"><a href=\"#如何操作sqlite\" class=\"headerlink\" title=\"如何操作sqlite\"></a>如何操作sqlite</h1><p>使用Node.js操作SQLite数据库有多种方式，其中常用的方式包括使用sqlite3模块、sequelize模块和knex模块。每种方式都有其特点和适用场景。</p>\n<h2 id=\"1-sqlite3：\"><a href=\"#1-sqlite3：\" class=\"headerlink\" title=\"1. sqlite3：\"></a>1. sqlite3：</h2><ul>\n<li>纯粹的SQLite数据库驱动模块，提供了底层的数据库访问接口。</li>\n<li>可以直接使用SQL语句进行数据库操作。</li>\n<li>适合对数据库操作有更细粒度控制需求的开发者。</li>\n</ul>\n<h2 id=\"2-sequelize：\"><a href=\"#2-sequelize：\" class=\"headerlink\" title=\"2. sequelize：\"></a>2. sequelize：</h2><ul>\n<li>是一个功能强大的ORM(Object-Relational Mapping)库，支持多种数据库包括SQLite。</li>\n<li>提供了面向对象的方式定义模型，便于操作数据库。</li>\n<li>自动构建SQL查询语句，简化数据库操作。</li>\n<li>支持事务管理、关联查询等高级功能。</li>\n<li>适合需要使用ORM进行数据库操作或有复杂业务需求的开发者。</li>\n</ul>\n<h2 id=\"3-knex：\"><a href=\"#3-knex：\" class=\"headerlink\" title=\"3. knex：\"></a>3. knex：</h2><ul>\n<li>是一个SQL查询构建器，支持多种数据库包括SQLite。</li>\n<li>使用链式调用方法构建SQL查询语句。</li>\n<li>支持灵活的查询条件、聚合查询、分页等功能。</li>\n<li>可以直接执行SQL语句。</li>\n<li>适合对数据库操作有更高灵活性要求的开发者。</li>\n</ul>\n<p>哪种方式最好用取决于实际需求。如果需要更底层的数据库访问接口或对数据库操作有更细粒度的控制，可以选择sqlite3模块。如果需要使用ORM进行数据库操作或有复杂业务需求，可以选择sequelize模块。如果需要更灵活地构建SQL查询语句或有特定的查询需求，可以选择knex模块。</p>\n<p>一般是根据项目需求选择适合的方式使用Node.js操作SQLite数据库。</p>\n<h1 id=\"knex详细介绍\"><a href=\"#knex详细介绍\" class=\"headerlink\" title=\"knex详细介绍\"></a>knex详细介绍</h1><p>官网介绍：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>KneX可以在Node.js和浏览器中用作SQL查询构建器，但受WebSQL的限制(如不能删除表或读取模式)。<br>强烈反对在浏览器中编写在服务器上执行的SQL查询，因为这可能会导致严重的安全漏洞。<br>在WebSQL之外构建的浏览器主要用于学习目的-例如，您可以打开控制台并使用kneX对象在此页面上构建查询。</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>KneX的主要目标环境是Node.js，您将需要安装KneX库，然后安装相应的数据库库：PG for PostgreSQL、CockroachDB和Amazon RedShift、PG-Native for PostgreSQL和Native C++libpq绑定(需要安装PostgresSQL才能链接到它)、MySQL for MySQL或MariaDB、SQLite3 for SQLite3或Destous for MSSQL。</p></blockquote>\n<h1 id=\"使用knex对sqlite的增删改查\"><a href=\"#使用knex对sqlite的增删改查\" class=\"headerlink\" title=\"使用knex对sqlite的增删改查\"></a>使用knex对sqlite的增删改查</h1><p>使用knex之前先得安装knex和数据库驱动，我这里用的是sqlite数据库，所以需要安装sqlite3</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ npm install knex --save\n\n# Then add one of the following (adding a --save) flag:\n$ npm install pg\n$ npm install pg-native\n$ npm install sqlite3\n$ npm install better-sqlite3\n$ npm install mysql\n$ npm install mysql2\n$ npm install oracledb\n$ npm install tedious</code></pre>\n\n<p>根据自己的需要选择合适的数据库驱动即可</p>\n<h2 id=\"初始化knex实例\"><a href=\"#初始化knex实例\" class=\"headerlink\" title=\"初始化knex实例\"></a>初始化knex实例</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\nconst knex &#x3D; require(&#39;knex&#39;)(&#123;\n  client: &#39;sqlite3&#39;,\n  connection: &#123;\n    filename: &#39;.&#x2F;database.sqlite&#39;\n  &#125;\n&#125;);</code></pre>\n<p>在实例化knex时，可以传入一些配置参数来进行数据库连接和其他相关配置。常用的配置参数如下：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>client：指定数据库类型，比如sqlite3、mysql、postgresql等。</li>\n<li>connection：指定数据库连接信息，可以是一个URL字符串或一个包含连接信息的对象，如host、port、user、password、database等。</li>\n<li>pool：连接池的配置，控制数据库连接的复用和管理，常用的配置项有min、max、idleTimeoutMillis等。</li>\n<li>migrations：迁移文件相关的配置，用于数据库迁移管理，包括directory（迁移文件目录）、tableName（存储迁移记录的表名）等。</li>\n<li>seeds：种子数据相关的配置，用于初始化数据库，包括directory（种子数据文件目录）等。</li>\n<li>debug：是否开启调试模式，输出SQL查询语句和参数。</li>\n</ol>\n<p>以下是一个示例代码，演示了实例化knex时的配置参数：</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const knex &#x3D; require(&#39;knex&#39;)(&#123;\n  client: &#39;sqlite3&#39;,\n  connection: &#123;\n    filename: &#39;.&#x2F;data&#x2F;db.sqlite3&#39;\n  &#125;,\n  pool: &#123;\n    min: 2,\n    max: 10\n  &#125;,\n  migrations: &#123;\n    directory: &#39;.&#x2F;migrations&#39;,\n    tableName: &#39;knex_migrations&#39;\n  &#125;,\n  seeds: &#123;\n    directory: &#39;.&#x2F;seeds&#39;\n  &#125;,\n  debug: true\n&#125;);\n\nmodule.exports &#x3D; knex;</code></pre>\n\n<p>上述示例代码中，使用SQLite3作为数据库类型，指定了数据库文件路径。同时配置了连接池的最小连接数和最大连接数。定义了迁移文件和种子数据文件的目录，以及迁移记录表的表名。开启了调试模式，输出SQL查询语句和参数。</p>\n<p>根据实际需求，可以根据以上配置参数进行灵活的配置。具体的配置项及其含义可以参考knex的官方文档。</p>\n<h2 id=\"创建数据库表\"><a href=\"#创建数据库表\" class=\"headerlink\" title=\"创建数据库表\"></a>创建数据库表</h2><p>在使用knex创建表之前，可以通过<code>knex.schema.hasTable()</code>方法检查表是否已经存在。以下是一个使用knex创建表前判断表是否存在的示例代码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">knex.schema.hasTable(&#39;users&#39;).then((exists) &#x3D;&gt; &#123;\n  if (!exists) &#123;\n    return knex.schema.createTable(&#39;users&#39;, (table) &#x3D;&gt; &#123;\n      table.increments(&#39;id&#39;).primary();\n      table.string(&#39;name&#39;);\n      table.string(&#39;email&#39;);\n    &#125;);\n  &#125;\n&#125;).then(() &#x3D;&gt; &#123;\n  console.log(&#39;Table created successfully&#39;);\n&#125;).catch((err) &#x3D;&gt; &#123;\n  console.error(err);\n&#125;);</code></pre>\n\n<p>在上述代码中，首先使用<code>knex.schema.hasTable()</code>方法检查名为”users”的表是否存在。如果不存在，则执行创建表的操作；如果存在，则直接跳过创建表的步骤。这样可以确保在创建表之前先判断表是否已存在。</p>\n<p>通过这种方式，可以避免重复创建表或导致错误。需要注意的是，在实际开发中，根据业务需求可能需要对表结构进行更精确的判断，比如检查是否存在特定的列等，可以根据具体情况进行扩展。</p>\n<h2 id=\"增删改查\"><a href=\"#增删改查\" class=\"headerlink\" title=\"增删改查\"></a>增删改查</h2><p>当使用knex操作SQLite数据库时，可以按照以下方式进行增删改查操作：</p>\n<ol>\n<li>插入数据：</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">knex(&#39;users&#39;).insert(&#123;\n  name: &#39;John Doe&#39;,\n  email: &#39;john.doe@example.com&#39;\n&#125;).then(() &#x3D;&gt; &#123;\n  console.log(&#39;Data inserted successfully&#39;);\n&#125;).catch((err) &#x3D;&gt; &#123;\n  console.error(err);\n&#125;);</code></pre>\n\n<ol start=\"2\">\n<li>查询数据：</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">knex.select().from(&#39;users&#39;).then((rows) &#x3D;&gt; &#123;\n  rows.forEach((row) &#x3D;&gt; &#123;\n    console.log(row.name, row.email);\n  &#125;);\n&#125;).catch((err) &#x3D;&gt; &#123;\n  console.error(err);\n&#125;);</code></pre>\n\n<ol start=\"3\">\n<li>更新数据：</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">knex(&#39;users&#39;)\n  .where(&#39;id&#39;, 1)\n  .update(&#123; name: &#39;前端少年汪&#39; &#125;)\n  .then(() &#x3D;&gt; &#123;\n    console.log(&#39;Data updated successfully&#39;);\n  &#125;).catch((err) &#x3D;&gt; &#123;\n    console.error(err);\n  &#125;);</code></pre>\n\n<ol start=\"6\">\n<li>删除数据：</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">knex(&#39;users&#39;)\n  .where(&#39;id&#39;, 1)\n  .del()\n  .then(() &#x3D;&gt; &#123;\n    console.log(&#39;Data deleted successfully&#39;);\n  &#125;).catch((err) &#x3D;&gt; &#123;\n    console.error(err);\n  &#125;);</code></pre>\n\n<p>以上代码演示了使用knex操作SQLite数据库的基本增删改查操作。根据实际需求，可以使用knex提供的更多方法和功能来完成更复杂的数据库操作。</p>\n","feature":false,"text":"什么是sqlitSQLite是一种轻量级的嵌入式关系型数据库管理系统，它以库的形式存在，可以嵌入到应用程序中。它使用简单的、基于文件的数据库格式，不需要独立的服务器进程，非常适合在资源有限的环境中使用。 SQLite的优点 简单易用：SQLite的API简单明了，学习曲线低，使用...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"node","slug":"node","count":2,"path":"api/categories/node.json"}],"tags":[{"name":"node slq","slug":"node-slq","count":1,"path":"api/tags/node-slq.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFsqlit\"><span class=\"toc-text\">什么是sqlit</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SQLite%E7%9A%84%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">SQLite的优点</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SQLite%E7%9A%84%E7%BC%BA%E7%82%B9%E5%8C%85%E6%8B%AC\"><span class=\"toc-text\">SQLite的缺点包括</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SQLite%E9%80%82%E7%94%A8%E4%BA%8E%E4%BB%A5%E4%B8%8B%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">SQLite适用于以下应用场景</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E6%93%8D%E4%BD%9Csqlite\"><span class=\"toc-text\">如何操作sqlite</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-sqlite3%EF%BC%9A\"><span class=\"toc-text\">1. sqlite3：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-sequelize%EF%BC%9A\"><span class=\"toc-text\">2. sequelize：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-knex%EF%BC%9A\"><span class=\"toc-text\">3. knex：</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#knex%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">knex详细介绍</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8knex%E5%AF%B9sqlite%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5\"><span class=\"toc-text\">使用knex对sqlite的增删改查</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96knex%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">初始化knex实例</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8\"><span class=\"toc-text\">创建数据库表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5\"><span class=\"toc-text\">增删改查</span></a></li></ol></li></ol>","author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"mapped":true,"prev_post":{"title":"如何使用Vite+React18创建Cesium项目？教你两种方式","uid":"b7365f5ec90869bc85bd7fc53178f85a","slug":"react/如何使用Vite+React18创建Cesium项目？教你两种方式","date":"2022-07-30T02:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/react/如何使用Vite+React18创建Cesium项目？教你两种方式.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/40.png","text":"前言 书接上文，上篇文章介绍了《使用Vite+Vue3创建Cesium项目》，感觉还是对很多小伙伴有帮助的，那么这篇文章就介绍一下使用Vite+React18创建Cesium项目。 先填一下上一篇文章埋下的坑控制台会报错这个问题： VM19:1 Blocked script ex...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"react","slug":"react","count":3,"path":"api/categories/react.json"}],"tags":[{"name":"cesium","slug":"cesium","count":2,"path":"api/tags/cesium.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false},"next_post":{}}