{"title":"deno入门教程","uid":"3784c434b9d2280c614786da4cbc7955","slug":"node/deno入门教程","date":"2023-08-03T16:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/node/deno入门教程.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/5.png","content":"<h1 id=\"下一代JavaScript-Runtime\"><a href=\"#下一代JavaScript-Runtime\" class=\"headerlink\" title=\"下一代JavaScript Runtime\"></a>下一代JavaScript Runtime</h1><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/11bd6db37c30481e9df5677d13485ee1~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2648&h=1008&s=370638&e=png&a=1&b=191a1c\" alt=\"image.png\"></p>\n<p>Deno 是一个由 Node.js 的创始人 Ryan Dahl 开发的现代化 JavaScript/TypeScript 运行时环境。它旨在提供安全、简单和高性能的方式来构建 JavaScript 和 TypeScript 应用程序。</p>\n<p>以下是 Deno 的一些主要特点：</p>\n<ol>\n<li> 安全性：与 Node.js 不同，Deno 默认情况下对文件系统、网络和环境变量等访问权限进行了严格的限制。在运行脚本时，用户必须显式地授予这些权限，以确保更高的安全性。</li>\n<li> 支持 TypeScript：Deno 内置对 TypeScript 的原生支持，无需额外的配置或插件。这意味着您可以直接编写 TypeScript 代码，而无需先进行转换或编译。</li>\n<li> 单一可执行文件：Deno 可以作为一个单一可执行文件进行分发，无需依赖于外部的运行时环境或包管理器。这使得安装和部署变得非常简单。</li>\n<li> 内置工具：Deno 包含一些内置的实用工具，如便捷的标准库、调试器和测试运行器，这些使得开发过程更加高效。</li>\n<li> 支持 ECMAScript 模块：Deno 使用标准的 ECMAScript 模块（ESM）语法进行模块化，无需像在 Node.js 中那样使用 CommonJS 或其他转换工具。</li>\n<li> 自包含性：Deno 鼓励开发者编写自包含的应用程序，即将所有依赖项打包到一个单独的可执行文件中，从而简化部署和分发过程。</li>\n</ol>\n<p>总体来说，Deno 的设计目标是提供一个安全、现代化和易用的 JavaScript/TypeScript 运行时环境，使得开发者能够更轻松地构建高质量的应用程序。</p>\n<ul>\n<li>Secure by default </li>\n<li>Native support for TypeScript and JSX</li>\n<li>Testing, linting, formatting, and more out of the box</li>\n<li>High performance async I/O with Rust and Tokio</li>\n<li>Backwards compatible with Node.js and npm</li>\n</ul>\n<p>以上就是Deno的五大特性：</p>\n<ul>\n<li>默认情况下安全。</li>\n<li>本机支持TypeScrip和JSX。</li>\n<li>测试、布线、格式化以及更多开箱即用功能。</li>\n<li>使用Rust和Tokio的高性能异步I/O。</li>\n<li>向后兼容Node.js和NPM。</li>\n</ul>\n<p><strong>文档传送门：</strong><a href=\"https://link.juejin.cn/?target=https://deno.land/\" title=\"https://deno.land/\">deno官网</a>  </p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p><strong>终端执行：</strong><br>MacOS: <code>curl -fsSL https://deno.land/x/install/install.sh | sh</code><br>Window: <code>irm https://deno.land/install.ps1 | iex</code><br>Linux: <code>curl -fsSL https://deno.land/x/install/install.sh | sh</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># Shell (Mac, Linux):\n$ curl -fsSL https:&#x2F;&#x2F;deno.land&#x2F;install.sh | sh\n\n# PowerShell (Windows):\n$ iwr https:&#x2F;&#x2F;deno.land&#x2F;install.ps1 -useb | iex\n\n# Homebrew (Mac):\n$ brew install deno\n\n# Chocolatey (Windows):\n$ choco install deno\n\n# Scoop (Windows):\n$ scoop install deno\n\n# Build and install from source using Cargo:\n$ cargo install deno --locked\n</code></pre>\n<h2 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h2><p>mac/linux</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">export DENO_INSTALL&#x3D;&quot;&#x2F;Users&#x2F;wmq&#x2F;.deno&quot; \nexport PATH&#x3D;&quot;$DENO_INSTALL&#x2F;bin:$PATH&quot;</code></pre>\n<p>window<br>我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 高级 -&gt; 环境变量设置，上面用户变量和系统变量都可以配置。</p>\n<p>那就需要设置在path的环境变量里添加一条</p>\n<p>另一个环境变量就是 DENO_INSTALL了，与Linux一样，通常是$HOME/.deno，比如我的是C:\\Users\\Administrator.deno，把它的bin目录添加到path中。</p>\n<p>验证一下安装是否成功<br><code>deno -V</code></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/275a6269de0b4b9089cd18191c3269d3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=878&h=188&s=143109&e=png&a=1&b=322530\" alt=\"image.png\"></p>\n<h1 id=\"Hello-World运行\"><a href=\"#Hello-World运行\" class=\"headerlink\" title=\"Hello World运行\"></a>Hello World运行</h1><p>deno不仅仅可以运行javascript，还支持直接运行ts文件</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">\nexport function add(a: number, b: number): number &#123;\n    return a + b;\n&#125;\n\n&#x2F;&#x2F; Learn more at https:&#x2F;&#x2F;deno.land&#x2F;manual&#x2F;examples&#x2F;module_metadata#concepts\nif (import.meta.main) &#123;\n    console.log(&quot;Add 2 + 3 &#x3D;&quot;, add(2, 3));\n&#125;\n\nconsole.log(&#39;hello world&#39;)\n\n</code></pre>\n\n\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0f33db8823b45d58267a987074991f5~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1522&h=1030&s=1757937&e=png&a=1&b=0d1019\" alt=\"image.png\"></p>\n<h1 id=\"deno常用运行命令\"><a href=\"#deno常用运行命令\" class=\"headerlink\" title=\"deno常用运行命令\"></a>deno常用运行命令</h1><p>和node一样，要查看帮助说明，敲一下demo -h就会出现</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">\nUsage: deno [OPTIONS] [COMMAND]\n\nCommands:\n  run          Run a JavaScript or TypeScript program\n  bench        Run benchmarks\n  bundle       Bundle module and dependencies into single file\n  cache        Cache the dependencies\n  check        Type-check the dependencies\n  compile      Compile the script into a self contained executable\n  completions  Generate shell completions\n  coverage     Print coverage reports\n  doc          Show documentation for a module\n  eval         Eval script\n  fmt          Format source files\n  init         Initialize a new project\n  info         Show info about cache or info related to source file\n  install      Install script as an executable\n  jupyter      Deno kernel for Jupyter notebooks\n  uninstall    Uninstall a script previously installed with deno install\n  lsp          Start the language server\n  lint         Lint source files\n  repl         Read Eval Print Loop\n  task         Run a task defined in the configuration file\n  test         Run tests\n  types        Print runtime TypeScript declarations\n  upgrade      Upgrade deno executable to given version\n  vendor       Vendor remote modules into a local directory\n  help         Print this message or the help of the given subcommand(s)\n\nOptions:\n      --unstable\n          Enable unstable features and APIs\n      --unstable-bare-node-builtins\n          Enable unstable bare node builtins feature [env:\n          DENO_UNSTABLE_BARE_NODE_BUILTINS&#x3D;]\n      --unstable-byonm\n          Enable unstable &#39;bring your own node_modules&#39; feature [env:\n          DENO_UNSTABLE_BYONM&#x3D;]\n      --unstable-broadcast-channel\n          Enable unstable &#96;BroadcastChannel&#96; API\n      --unstable-ffi\n          Enable unstable FFI APIs\n      --unstable-fs\n          Enable unstable file system APIs\n      --unstable-kv\n          Enable unstable Key-Value store APIs\n      --unstable-net\n          Enable unstable net APIs\n      --unstable-http\n          Enable unstable HTTP APIs\n      --unstable-worker-options\n          Enable unstable Web Worker APIs\n      --unstable-cron\n          Enable unstable Deno.cron API\n  -q, --quiet\n          Suppress diagnostic output\n  -h, --help\n          Print help (see more with &#39;--help&#39;)\n  -V, --version\n          Print version\n\nENVIRONMENT VARIABLES:\n    DENO_AUTH_TOKENS     A semi-colon separated list of bearer tokens and\n                         hostnames to use when fetching remote modules from\n                         private repositories\n                         (e.g. &quot;abcde12345@deno.land;54321edcba@github.com&quot;)\n    DENO_TLS_CA_STORE    Comma-separated list of order dependent certificate\n                         stores. Possible values: &quot;system&quot;, &quot;mozilla&quot;.\n                         Defaults to &quot;mozilla&quot;.\n    DENO_CERT            Load certificate authority from PEM encoded file\n    DENO_DIR             Set the cache directory\n    DENO_INSTALL_ROOT    Set deno install&#39;s output directory\n                         (defaults to $HOME&#x2F;.deno&#x2F;bin)\n    DENO_REPL_HISTORY    Set REPL history file path\n                         History file is disabled when the value is empty\n                         (defaults to $DENO_DIR&#x2F;deno_history.txt)\n    DENO_NO_PACKAGE_JSON Disables auto-resolution of package.json\n    DENO_NO_PROMPT       Set to disable permission prompts on access\n                         (alternative to passing --no-prompt on invocation)\n    DENO_NO_UPDATE_CHECK Set to disable checking if a newer Deno version is\n                         available\n    DENO_V8_FLAGS        Set V8 command line options\n    DENO_JOBS            Number of parallel workers used for the --parallel\n                         flag with the test subcommand. Defaults to number\n                         of available CPUs.\n    HTTP_PROXY           Proxy address for HTTP requests\n                         (module downloads, fetch)\n    HTTPS_PROXY          Proxy address for HTTPS requests\n                         (module downloads, fetch)\n    NPM_CONFIG_REGISTRY  URL to use for the npm registry.\n    NO_COLOR             Set to disable color\n    NO_PROXY             Comma-separated list of hosts which do not use a proxy\n                         (module downloads, fetch)</code></pre>\n<p>使用方法大大概是和node差不多的，没有什么上手的难度和负担。</p>\n<h1 id=\"deno权限\"><a href=\"#deno权限\" class=\"headerlink\" title=\"deno权限\"></a>deno权限</h1><p>默认情况下，Deno是安全的。因此 Deno 模块没有文件、网络或环境的访问权限，除非您为它授权。在命令行参数中为 deno 进程授权后才能访问安全敏感的功能。 在以下示例中，mod.ts 只被授予文件系统的只读权限。它无法对其进行写入，或执行任何其他对安全性敏感的操作。 deno run –allow-read mod.ts</p>\n<h2 id=\"权限列表\"><a href=\"#权限列表\" class=\"headerlink\" title=\"权限列表\"></a>权限列表</h2><p>以下权限是可用的： </p>\n<ul>\n<li>-A, –allow-all 允许所有权限，这将禁用所有安全限制。</li>\n<li>–allow-env 允许环境访问，例如读取和设置环境变量。 </li>\n<li>–allow-hrtime 允许高精度时间测量，高精度时间能够在计时攻击和特征识别中使用。</li>\n<li><code>--allow-net=&lt;allow-net&gt;</code> 允许网络访问。您可以指定一系列用逗号分隔的域名，来提供域名白名单。 </li>\n<li>–allow-plugin 允许加载插件。请注意：这是一个不稳定功能。 </li>\n<li><code>--allow-read=&lt;allow-read&gt;</code> 允许读取文件系统。您可以指定一系列用逗号分隔的目录或文件，来提供文件系统白名单。    </li>\n<li>–allow-run 允许运行子进程。请注意，子进程不在沙箱中运行，因此没有与 deno 进程相同的安全限制，请谨慎使用。 </li>\n<li><code>--allow-write=&lt;allow-write&gt;</code> 允许写入文件系统。您可以指定一系列用逗号分隔的目录或文件，来提供文件系统白名单。</li>\n</ul>\n<h2 id=\"权限白名单\"><a href=\"#权限白名单\" class=\"headerlink\" title=\"权限白名单\"></a>权限白名单</h2><p>Deno 还允许您使用白名单控制权限的粒度。 这是一个用白名单限制文件系统访问权限的示例，仅允许访问 /usr 目录，但它会在尝试访问 /etc 目录时失败。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ deno run --allow-read&#x3D;&#x2F;usr https:&#x2F;&#x2F;deno.land&#x2F;std&#x2F;examples&#x2F;cat.ts &#x2F;etc&#x2F;passwderror: Uncaught PermissionDenied: read access to &quot;&#x2F;etc&#x2F;passwd&quot;, run again with the --allow-read flag► $deno$&#x2F;dispatch_json.ts:40:11    at DenoError ($deno$&#x2F;errors.ts:20:5)    ...</code></pre>\n\n<p>改为 <code>/etc</code>目录，赋予正确的权限，再试一次： <code>deno run --allow-read=/etc https://deno.land/std/examples/cat.ts /etc/passwd --allow-write</code>也一样，代表写入权限。</p>\n<h2 id=\"网络访问\"><a href=\"#网络访问\" class=\"headerlink\" title=\"网络访问\"></a>网络访问</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">fetch.ts:const result &#x3D; await fetch(&quot;https:&#x2F;&#x2F;deno.land&#x2F;&quot;);</code></pre>\n\n<p>这是一个设置 host 或 url 白名单的示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">deno run --allow-net&#x3D;github.com,deno.land fetch.ts</code></pre>\n\n<p>如果 fetch.ts 尝试与其他域名建立网络连接，那么这个进程将会失败。 允许访问任意地址：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">deno run --allow-net fetch.ts</code></pre>\n\n\n<h1 id=\"创建deno项目\"><a href=\"#创建deno项目\" class=\"headerlink\" title=\"创建deno项目\"></a>创建deno项目</h1><p>使用 Deno 开始一个新项目一直非常简单：你只需要一个单独的文件就可以开始了。无需任何配置文件、依赖清单或者构建脚本。</p>\n<p>来自其他生态系统的用户通常不习惯这种简单性——他们经常寻找一个工具来生成一个基本的项目结构，并使他们在正确的方向上开始。<code>deno init</code> 子命令创建了一个基本的 Deno 项目脚手架。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ deno init\n✅ 项目已初始化\n运行以下命令来开始\n\n  &#x2F;&#x2F; 运行程序\n  deno run main.ts\n\n  &#x2F;&#x2F; 运行程序并监视文件更改\n  deno task dev\n\n  &#x2F;&#x2F; 运行测试\n  deno test\n\n  &#x2F;&#x2F; 运行基准测试\n  deno bench\n\n$ deno run main.ts\nAdd 2 + 3 &#x3D; 5\n\n$ deno test\n检查文件:&#x2F;&#x2F;&#x2F;dev&#x2F;main_test.ts\nmain_test.ts 执行 1 个测试\naddTest ... ok (6ms)\n\nok | 1 passed | 0 failed (29ms)</code></pre>\n<p>这个子命令会创建两个文件(<code>main.ts</code>和 <code>main_test.ts</code>)。这些文件提供了一个编写 Deno 程序和编写测试的基本示例。<code>main.ts</code> 文件导出一个 <code>add</code> 函数，它将两个数字相加，而 <code>main_test.ts</code> 文件包含此函数的一个测试。</p>\n<p>你也可以给 <code>deno init</code> 指定一个参数来在特定目录中初始化一个项目：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$ deno init my_deno_project\n✅ 项目已初始化\n\n运行以下命令来开始\n\n  cd my_deno_project\n\n  &#x2F;&#x2F; 运行程序\n  deno run main.ts\n\n  &#x2F;&#x2F; 运行程序并监视文件更改\n  deno task dev\n\n  &#x2F;&#x2F; 运行测试\n  deno test\n\n  &#x2F;&#x2F; 运行基准测试\n  deno bench</code></pre>\n\n<p>在创建项目之后会有一个main.ts文件里面有一些示例代码</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">\nexport function add(a: number, b: number): number &#123;\n  return a + b;\n&#125;\n\n&#x2F;&#x2F; Learn more at https:&#x2F;&#x2F;deno.land&#x2F;manual&#x2F;examples&#x2F;module_metadata#concepts\nif (import.meta.main) &#123;\n  console.log(&quot;Add 2 + 3 &#x3D;&quot;, add(2, 3));\n&#125;\n</code></pre>\n<p>在 Deno 中，import.meta 对象包含了与模块加载相关的元数据信息。其中，import.meta.main 是一个布尔值，用于指示模块是否被直接执行（即作为入口模块）。如果一个模块被直接执行，则 import.meta.main 的值为 true，否则为 false。</p>\n<h1 id=\"导入导出模块\"><a href=\"#导入导出模块\" class=\"headerlink\" title=\"导入导出模块\"></a>导入导出模块</h1><p>在 Deno 中，导入和导出模块的语法与 Node.js 有一些不同之处。 </p>\n<h3 id=\"导入模块\"><a href=\"#导入模块\" class=\"headerlink\" title=\"导入模块\"></a>导入模块</h3><p>在 Deno 中，要导入其他模块，可以使用类似于 ES 模块的 import 语法。例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; someFunction &#125; from &#39;.&#x2F;someModule.ts&#39;;</code></pre>\n\n<p>与 Node.js 不同的是，Deno 默认支持 ES 模块，因此不需要像在 Node.js 中那样使用 <code>require</code> 函数。此外，Deno 支持在代码中直接引用 URL 进行远程模块的导入，这是 Node.js 所不具备的特性。</p>\n<h3 id=\"导出模块\"><a href=\"#导出模块\" class=\"headerlink\" title=\"导出模块\"></a>导出模块</h3><p>在 Deno 中，模块的导出方式也与 Node.js 有所不同。在 Deno 中，默认情况下所有声明都是私有的，如果要将某些内容导出，需要使用 <code>export</code> 关键字进行显式导出。例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; someModule.ts\nexport function someFunction() &#123;\n  &#x2F;&#x2F; ...\n&#125;</code></pre>\n\n<p>在 Node.js 中，可以使用 <code>module.exports</code> 或 <code>exports</code> 导出模块内容，而在 Deno 中，使用 <code>export</code> 关键字则可以明确指定要导出的内容。</p>\n<p>另外，Deno 也支持使用默认导出（default export）的方式，与 Node.js 中的 <code>module.exports = ...</code> 以及 <code>export default ...</code> 语法类似，但具体的语法细节和使用方式可能会有所不同。</p>\n<p> Deno 中的模块导入导出语法更加符合标准的 ES 模块规范，并且对远程模块的支持更为友好，这是与 Node.js 最主要的区别之一。</p>\n<h1 id=\"第三方模块导入\"><a href=\"#第三方模块导入\" class=\"headerlink\" title=\"第三方模块导入\"></a>第三方模块导入</h1><p>在 Deno 中，您可以使用 ES 模块语法导入第三方依赖。以下是一些常见的导入第三方依赖的方式：</p>\n<ol>\n<li><p>从 URL 导入：您可以直接从公共 URL 导入依赖项。例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; serve &#125; from &quot;https:&#x2F;&#x2F;deno.land&#x2F;std&#x2F;http&#x2F;server.ts&quot;;</code></pre></li>\n<li><p>从本地文件系统导入：您可以将第三方库下载到本地，并使用相对或绝对路径进行导入。例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; serve &#125; from &quot;.&#x2F;path&#x2F;to&#x2F;library.ts&quot;;</code></pre>\n<p>请确保您已将第三方库下载到正确的位置并提供正确的路径。</p>\n</li>\n<li><p>使用 URL 和版本号导入：如果您希望使用特定版本的依赖项，可以在 URL 后添加版本号。例如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; serve &#125; from &quot;https:&#x2F;&#x2F;deno.land&#x2F;std@0.100.0&#x2F;http&#x2F;server.ts&quot;;</code></pre>\n<p>这将导入 std 库的 0.100.0 版本中的 serve 函数。</p>\n</li>\n<li><p>使用 import maps 导入：您还可以在 Deno 的 import map 中设置别名来导入第三方依赖项。首先，在项目根目录创建一个名为 <code>import_map.json</code> 的文件，然后添加依赖项的别名和 URL。例如：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;imports&quot;: &#123;\n    &quot;lodash&quot;: &quot;https:&#x2F;&#x2F;cdn.skypack.dev&#x2F;lodash&quot;\n  &#125;\n&#125;</code></pre>\n<p>然后，您可以在代码中使用别名导入依赖项：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import _ from &quot;lodash&quot;;</code></pre>\n<p>这会将 lodash 库导入为 <code>_</code>。</p>\n</li>\n</ol>\n<p>请确保网络连接正常，以便 Deno 能够从指定的 URL 导入依赖项。此外，还要注意您导入的第三方库是否与 Deno 兼容。</p>\n<h1 id=\"deno-json\"><a href=\"#deno-json\" class=\"headerlink\" title=\"deno.json\"></a>deno.json</h1><p>在 Deno 中，<code>deno.json</code> 是一个用于配置项目的文件，类似于其他项目中常见的 <code>package.json</code> 或 <code>tsconfig.json</code>。它用于指定 Deno 项目的依赖项、脚本入口点等信息。以下是 <code>deno.json</code> 文件可能包含的一些常见配置选项：</p>\n<ol>\n<li><p><code>&quot;name&quot;</code>：指定项目的名称。</p>\n</li>\n<li><p><code>&quot;main&quot;</code>：指定项目的主入口文件。</p>\n</li>\n<li><p><code>&quot;scripts&quot;</code>：定义一组脚本命令，以便在项目中运行特定的任务或操作。</p>\n</li>\n<li><p><code>&quot;dependencies&quot;</code>：列出项目所依赖的第三方模块及其版本信息。</p>\n</li>\n<li><p><code>&quot;importmap&quot;</code>：指定 import map 的路径，用于配置模块的别名或重定向。</p>\n</li>\n<li><p><code>&quot;permissions&quot;</code>：指定项目所需的权限，例如文件系统访问、网络访问等。</p>\n</li>\n</ol>\n<p>一个简单的 <code>deno.json</code> 文件可能如下所示：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;name&quot;: &quot;my-deno-project&quot;,\n  &quot;main&quot;: &quot;main.ts&quot;,\n  &quot;scripts&quot;: &#123;\n    &quot;start&quot;: &quot;deno run main.ts&quot;\n  &#125;,\n  &quot;dependencies&quot;: &#123;\n    &quot;lodash&quot;: &quot;4.17.21&quot;\n  &#125;,\n  &quot;importmap&quot;: &quot;import_map.json&quot;,\n  &quot;permissions&quot;: &#123;\n    &quot;net&quot;: true,\n    &quot;read&quot;: true\n  &#125;\n&#125;</code></pre>\n\n<p> <code>deno.json</code> 的具体结构和支持的配置选项可能会根据 Deno 版本的更新而有所变化，因此建议查阅官方文档以获取最新的信息和用法说明。</p>\n<h1 id=\"Deno和Node的区别\"><a href=\"#Deno和Node的区别\" class=\"headerlink\" title=\"Deno和Node的区别\"></a>Deno和Node的区别</h1><p> Deno 和 Node.js 的区别，主要有以下几点：</p>\n<ol>\n<li><p><strong>语言支持</strong>：</p>\n<ul>\n<li>Node.js 最初是专注于 JavaScript，后来添加了对 TypeScript 的支持。而 Deno 则内置支持 TypeScript，无需额外配置即可直接运行 TypeScript 代码。</li>\n</ul>\n</li>\n<li><p><strong>包管理</strong>：</p>\n<ul>\n<li>在 Node.js 中，使用 npm 或 yarn 等包管理器来安装和管理依赖。而在 Deno 中，模块的导入直接使用 URL，不需要像 Node.js 那样依赖于包管理器。</li>\n</ul>\n</li>\n<li><p><strong>安全性</strong>：</p>\n<ul>\n<li>Deno 默认情况下运行在沙盒环境中，只能访问明确授权的文件和网络资源，提供了更强大的安全性保障。而 Node.js 的安全性主要依赖于操作系统权限和开发者的注意。</li>\n</ul>\n</li>\n<li><p><strong>标准库</strong>：</p>\n<ul>\n<li>Deno 内置了许多常见的功能，如文件操作、HTTP 服务器等，因此在一定程度上减少了对外部库的依赖。而 Node.js 的核心功能相对较少，需要依赖第三方模块来实现更复杂的功能。</li>\n</ul>\n</li>\n<li><p><strong>API 设计</strong>：</p>\n<ul>\n<li>Deno 设计上更加现代化，采用了 Promise 风格的 API，并且避免了回调地狱（Callback Hell）的问题。而 Node.js 在早期主要采用回调函数的方式处理异步操作，后来引入了 Promise 和 async/await。</li>\n</ul>\n</li>\n<li><p><strong>工具支持</strong>：</p>\n<ul>\n<li>Deno 内置了一些实用工具，如代码格式化工具（deno fmt）、代码检测工具（deno lint）等，减少了对第三方工具的依赖。而 Node.js 需要依赖外部工具和插件来实现类似的功能。</li>\n</ul>\n</li>\n<li><p><strong>生态系统</strong>：</p>\n<ul>\n<li>Node.js 有着庞大的生态系统和成熟的社区支持，拥有丰富的第三方模块和工具。而 Deno 相对来说还比较年轻，生态系统尚在发展阶段，虽然也有一些优秀的模块，但整体规模不及 Node.js。</li>\n</ul>\n</li>\n</ol>\n<p>这些是 Deno 和 Node.js 的一些主要区别，每个运行时环境都有其自身的优势和适用场景。选择使用哪个取决于具体的项目需求、团队技能和偏好等因素。</p>\n","feature":false,"text":"下一代JavaScript Runtime Deno 是一个由 Node.js 的创始人 Ryan Dahl 开发的现代化 JavaScript/TypeScript 运行时环境。它旨在提供安全、简单和高性能的方式来构建 JavaScript 和 TypeScript 应用程序。...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"Deno","slug":"Deno","count":1,"path":"api/categories/Deno.json"}],"tags":[{"name":"deno runtime","slug":"deno-runtime","count":1,"path":"api/tags/deno-runtime.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E4%B8%80%E4%BB%A3JavaScript-Runtime\"><span class=\"toc-text\">下一代JavaScript Runtime</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">设置环境变量</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Hello-World%E8%BF%90%E8%A1%8C\"><span class=\"toc-text\">Hello World运行</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#deno%E5%B8%B8%E7%94%A8%E8%BF%90%E8%A1%8C%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">deno常用运行命令</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#deno%E6%9D%83%E9%99%90\"><span class=\"toc-text\">deno权限</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9D%83%E9%99%90%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">权限列表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9D%83%E9%99%90%E7%99%BD%E5%90%8D%E5%8D%95\"><span class=\"toc-text\">权限白名单</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">网络访问</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAdeno%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">创建deno项目</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">导入导出模块</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">导入模块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%87%BA%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">导出模块</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5\"><span class=\"toc-text\">第三方模块导入</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#deno-json\"><span class=\"toc-text\">deno.json</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Deno%E5%92%8CNode%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">Deno和Node的区别</span></a></li></ol>","author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"mapped":true,"prev_post":{"title":"Flutter开发环境的搭建","uid":"e50c25fa9f1096a4e3c98adde2f89a84","slug":"跨平台/Flutter开发环境的搭建","date":"2023-09-04T14:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/跨平台/Flutter开发环境的搭建.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/2.jpeg","text":" 文章目录 flutter SDK Android Studio 最简单的创建流程 常用命令 在真机安装联调 flutter SDK 官网下载最新的SDK https://flutter.cn/docs/get-started/install/windows 解压到你需要安装的目...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"技术","slug":"技术","count":2,"path":"api/categories/技术.json"},{"name":"环境搭建","slug":"技术/环境搭建","count":1,"path":"api/categories/技术/环境搭建.json"},{"name":"Flutter","slug":"技术/环境搭建/Flutter","count":1,"path":"api/categories/技术/环境搭建/Flutter.json"}],"tags":[{"name":"Flutter 跨平台 dart 环境搭建","slug":"Flutter-跨平台-dart-环境搭建","count":1,"path":"api/tags/Flutter-跨平台-dart-环境搭建.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false},"next_post":{"title":"Vue3中使用TailwindCSS","uid":"8aa850786bf761363cb2e372eeaddd10","slug":"css/Vue3中使用TailwindCSS","date":"2023-07-10T14:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/css/Vue3中使用TailwindCSS.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/20.png","text":"前言当谈到前端开发框架时，Tailwind CSS 是一个备受瞩目的选择。它是一款功能强大且灵活的CSS框架，提供了大量的实用工具类，帮助开发者快速构建现代化的用户界面。在本篇技术博客中，我们将深入了解 Tailwind CSS 的主题和使用。 Tailwind CSS 是一种流...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"TailwindCSS","slug":"TailwindCSS","count":1,"path":"api/categories/TailwindCSS.json"}],"tags":[{"name":"css","slug":"css","count":2,"path":"api/tags/css.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false}}