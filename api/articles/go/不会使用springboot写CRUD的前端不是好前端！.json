{"title":"不会使用springboot写CRUD的前端不是好前端！","uid":"5a931d7f77125b67fdf3d08adcd64c28","slug":"go/不会使用springboot写CRUD的前端不是好前端！","date":"2023-05-10T14:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/go/不会使用springboot写CRUD的前端不是好前端！.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/53.png","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在开发Web应用程序时，CRUD（Create、Read、Update、Delete）是最基本的操作。为了简化开发过程并提高效率，我们可以使用一些成熟的框架和工具来实现CRUD操作。Spring Boot作为一个快速开发框架，而MyBatis-Plus则是一个高效的持久层框架，两者的结合可以帮助我们快速实现数据库操作。本文将详细介绍如何在Spring Boot项目中整合MyBatis-Plus，以便快速实现CRUD操作。</p></blockquote>\n<p>Spring boot项目整合MyBatis-Plus快速CRUD</p>\n<ol>\n<li>概述</li>\n<li>环境准备</li>\n<li>创建Spring Boot项目</li>\n<li>引入MyBatis-Plus依赖</li>\n<li>配置数据库连接</li>\n<li>创建包目录和添加注解</li>\n<li>创建实体类和Mapper接口</li>\n<li>实现CRUD操作   </li>\n<li>最后再创建路由控制器controller</li>\n<li>总结</li>\n</ol>\n<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h1><p>MyBatis-Plus是一个基于MyBatis的增强工具，提供了许多便捷的功能和方法，使得CRUD操作更加简单和高效。它能够自动生成基本的SQL语句，减少了手动编写SQL的工作量。结合Spring Boot，我们可以更方便地进行开发和管理。  </p>\n<h1 id=\"2-环境准备\"><a href=\"#2-环境准备\" class=\"headerlink\" title=\"2. 环境准备\"></a>2. 环境准备</h1><p>在开始之前，确保你已经安装了以下环境：</p>\n<ul>\n<li>  JDK 1.8或以上版本</li>\n<li>  Maven（用于构建项目）</li>\n<li>  MySQL数据库</li>\n</ul>\n<h1 id=\"3-创建Spring-Boot项目\"><a href=\"#3-创建Spring-Boot项目\" class=\"headerlink\" title=\"3. 创建Spring Boot项目\"></a>3. 创建Spring Boot项目</h1><p> 使用Spring Initializr创建一个新的Spring Boot项目。选择所需的项目元数据和依赖项，例如Web和MySQL驱动程序。点击生成项目，下载并导入到你的IDE中。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fc1180d9aca4d1fa4d9719ced1dc111~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1676&h=1338&s=205782&e=png&a=1&b=40434f\" alt=\"image.png\"><br>记得修改成自己需要的包路径，点击下一步</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1640bba544284572a25d5cd751897285~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1676&h=1338&s=192221&e=png&a=1&b=414450\" alt=\"image.png\"></p>\n<p><strong>选择和自己jdk匹配的spring boot版本</strong> 不然项目会报错<br>选择常用的一些插件，然后点击完成，等待maven下载依赖即可</p>\n<h1 id=\"4-引入MyBatis-Plus依赖\"><a href=\"#4-引入MyBatis-Plus依赖\" class=\"headerlink\" title=\"4.  引入MyBatis-Plus依赖\"></a>4.  引入MyBatis-Plus依赖</h1><p>在项目的pom.xml文件中添加MyBatis-Plus的依赖项：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">xmlCopy Code\n&lt;dependency&gt;\n    &lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;最新版本&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n<p><strong>我用的mybatis plus版本是3.5.3.1。记住jdk的版本和mybatis plus的版本要匹配不然也会出现问题。本人就踩过坑 ，这个版本要求自己查看官网文档即可</strong>    </p>\n<p>这里给出我的pom.xml文件<br> <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"> \n&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;3.0.12&lt;&#x2F;version&gt;\n        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;&#x2F;parent&gt;\n    &lt;groupId&gt;com&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;backendVol&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n    &lt;name&gt;backend&lt;&#x2F;name&gt;\n    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;17&lt;&#x2F;java.version&gt;\n    &lt;&#x2F;properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jdbc&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;com.baomidou&#x2F;mybatis-plus-boot-starter --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;3.5.3.1&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;\n            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;\n            &lt;optional&gt;true&lt;&#x2F;optional&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.mysql&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;mysql-connector-j&lt;&#x2F;artifactId&gt;\n            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;\n            &lt;optional&gt;true&lt;&#x2F;optional&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;\n            &lt;scope&gt;test&lt;&#x2F;scope&gt;\n        &lt;&#x2F;dependency&gt;\n\n\n    &lt;&#x2F;dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;excludes&gt;\n                        &lt;exclude&gt;\n                            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;\n                            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;\n                        &lt;&#x2F;exclude&gt;\n                    &lt;&#x2F;excludes&gt;\n                &lt;&#x2F;configuration&gt;\n            &lt;&#x2F;plugin&gt;\n        &lt;&#x2F;plugins&gt;\n    &lt;&#x2F;build&gt;\n\n&lt;&#x2F;project&gt;</code></pre></p>\n<h1 id=\"5-配置数据库连接\"><a href=\"#5-配置数据库连接\" class=\"headerlink\" title=\"5. 配置数据库连接\"></a>5. 配置数据库连接</h1><p>在<code>application.properties</code>或<code>application.yml</code>文件中配置数据库连接信息，包括数据库URL、用户名和密码等。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">#端口号9090\nserver:\n  port: 9999\n\n#数据库名：mysql，用户名root，密码123456\nspring:\n  datasource:\n    username: root\n    password: 1111111\n    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;数据库名称?useUnicode&#x3D;true&amp;amp\n    driver-class-name: com.mysql.cj.jdbc.Driver\n\n\n\n# mybatis-plus配置\nmybatis-plus:\n  # xml文件位置\n  mapper-locations: classpath:mybatis&#x2F;**&#x2F;*Mapper.xml\n  # 开启驼峰命名\n  configuration:\n    map-underscore-to-camel-case: true\n    # 开启sql显示\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n</code></pre>\n\n<h1 id=\"6-创建包目录和添加注解\"><a href=\"#6-创建包目录和添加注解\" class=\"headerlink\" title=\"6. 创建包目录和添加注解\"></a>6. 创建包目录和添加注解</h1><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b93d55dfd24d41f6a852b8b1720f1ada~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=3008&h=1960&s=565933&e=png&a=1&b=333542\" alt=\"image.png\"><br>我们在启动类里面添加<code>@SpringBootApplication</code>,<code>@MapperScan(&quot;com.backendvol.mapper&quot;)</code><br>这两个注解</p>\n<h1 id=\"7-创建实体类和Mapper接口\"><a href=\"#7-创建实体类和Mapper接口\" class=\"headerlink\" title=\"7.  创建实体类和Mapper接口\"></a>7.  创建实体类和Mapper接口</h1><p>创建一个Java类表示数据库表的实体，使用<code>@Table</code>注解指定表名和主键字段。然后创建一个继承自<code>BaseMapper</code>的Mapper接口，用于定义CRUD操作的方法。<br>在entity包里面创建User实体类</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.backendvol.entity;\n\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport lombok.Data;\n\n@TableName(value &#x3D; &quot;user&quot;)\n@Data\npublic class UserEntity &#123;\n    @TableId(value &#x3D; &quot;userId&quot;,type &#x3D; IdType.AUTO)\n    private Integer userId;\n\n    @TableField(&quot;userName&quot;)\n    private String userName;\n\n    @TableField(&quot;userRole&quot;)\n    private Integer userRole;\n\n    @TableField(&quot;userPwd&quot;)\n    private String userPwd;\n\n    @TableField(&quot;userPic&quot;)\n    private String userPic;\n\n    @TableField(&quot;userTel&quot;)\n    private String userTel;\n\n    @TableField(&quot;userHobby&quot;)\n    private String userHobby;\n\n    @TableField(&quot;userVolDesc&quot;)\n    private String userVolDesc;\n\n    @TableField(&quot;userAge&quot;)\n    private int userAge;\n&#125;</code></pre>\n\n<p>这里使用的是mybatis plus的注解<code>@TableName(value = &quot;user&quot;)</code> 和<code>@TableField</code>,以及插件<br>lombok的@Data注解</p>\n<p>在mapper包创建Mapper接口</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.backendvol.mapper;\n\nimport com.backendvol.entity.UserEntity;\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\nimport org.apache.ibatis.annotations.Select;\n\n@Mapper\npublic interface UserMapper extends BaseMapper&lt;UserEntity&gt; &#123;\n        &#x2F;&#x2F; 自定义查询方法，例如根据用户名和密码查询用户信息\n        @Select(&quot;select * from user where userName &#x3D; #&#123;username&#125; and userPwd &#x3D; #&#123;password&#125;&quot;)\n        UserEntity selectByUsernameAndPwd(@Param(&quot;username&quot;) String username ,@Param(&quot;password&quot;) String password);\n\n        &#x2F;&#x2F; 自定义查询方法，例如根据用户名用户信息\n        @Select(&quot;select * from user where userName &#x3D; #&#123;username&#125;  &quot;)\n        UserEntity selectByUsername (@Param(&quot;username&quot;) String username  );\n\n&#125;</code></pre>\n\n<h1 id=\"8-实现CRUD操作\"><a href=\"#8-实现CRUD操作\" class=\"headerlink\" title=\"8.  实现CRUD操作\"></a>8.  实现CRUD操作</h1><p>在service里面创建impl包 在Service层中调用Mapper接口的方法，即可实现对数据库表的CRUD操作。<br>创建service的的接口</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.backendvol.service;\n\n\nimport com.backendvol.entity.UserEntity;\nimport com.backendvol.utils.Result;\nimport com.baomidou.mybatisplus.extension.service.IService;\n\npublic interface UserService extends IService&lt;UserEntity&gt; &#123;\n     \n&#125;</code></pre>\n<p>创建service的的接口实现类<br>例如，在UserService中编写如下代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"> \npackage com.backendvol.service.impl;\n\nimport com.backendvol.entity.UserEntity;\nimport com.backendvol.mapper.UserMapper;\nimport com.backendvol.service.UserService;\nimport com.backendvol.utils.Result;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.core.toolkit.Constants;\nimport com.baomidou.mybatisplus.core.toolkit.Wrappers;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport org.apache.ibatis.annotations.Param;\nimport org.springframework.stereotype.Service;\n\n\n@Service\npublic class UserServiceImpl extends ServiceImpl&lt;UserMapper, UserEntity&gt; implements UserService &#123;\n\n\n    private final UserMapper userMapper;\n\n    public UserServiceImpl(UserMapper userMapper) &#123;\n        this.userMapper &#x3D; userMapper;\n    &#125;\n\n    public Result login(String username, String password) &#123;\n        UserEntity user &#x3D; userMapper.selectByUsernameAndPwd(username, password);\n\n        System.out.println(user + &quot;登陆用户&quot;);\n\n        if (user !&#x3D; null &amp;&amp; user.getUserPwd().equals(password)) &#123;\n            return Result.success(&quot;登陆成功&quot;,user);\n        &#125;\n\n        return Result.fail(&quot;用户名或密码错误&quot;);\n    &#125;\n\n    @Override\n    public Result register(UserEntity UserEntity) &#123;\n        UserEntity user &#x3D; userMapper.selectByUsername(UserEntity.getUserName());\n\n        if (user !&#x3D; null) &#123;\n            return Result.fail(&quot;用户名已存在，请输入其他用户名&quot;);\n        &#125;\n        userMapper.insert(UserEntity);\n        UserEntity user2 &#x3D; userMapper.selectByUsername(UserEntity.getUserName());\n        return Result.success(&quot;注册成功&quot;,user2);\n\n    &#125;\n&#125;</code></pre>\n<p>对返回值做统一的封装</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.backendvol.utils;\n\nimport lombok.Data;\nimport org.springframework.data.relational.core.sql.In;\n\nimport java.io.Serializable;\n\n&#x2F;**\n * 封装统一的返回结果\n *&#x2F;\n@Data\npublic class Result implements Serializable &#123;\n    private Integer code;\n    private String msg;\n    private Object data;\n    public static Result success(Object data) &#123;\n        Result m &#x3D; new Result();\n        m.setCode(200);\n        m.setData(data);\n        m.setMsg(&quot;操作成功&quot;);\n        return m;\n    &#125;\n    public static Result success(String mess, Object data) &#123;\n        Result m &#x3D; new Result();\n        m.setCode(200);\n        m.setData(data);\n        m.setMsg(mess);\n        return m;\n    &#125;\n    public static Result fail(String mess) &#123;\n        Result m &#x3D; new Result();\n        m.setCode(500);\n        m.setData(null);\n        m.setMsg(mess);\n        return m;\n    &#125;\n    public static Result fail(String mess, Object data) &#123;\n        Result m &#x3D; new Result();\n        m.setCode(500);\n        m.setData(data);\n        m.setMsg(mess);\n        return m;\n    &#125;\n&#125;</code></pre>\n<h1 id=\"9-最后再创建路由控制器controller\"><a href=\"#9-最后再创建路由控制器controller\" class=\"headerlink\" title=\"9.最后再创建路由控制器controller\"></a>9.最后再创建路由控制器controller</h1><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.backendvol.controller;\n\nimport com.backendvol.entity.UserEntity;\nimport com.backendvol.service.UserService;\nimport com.backendvol.utils.Result;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.sql.Wrapper;\n\n\n@RestController\n@RequestMapping(&quot;&#x2F;user&quot;)\npublic class UserController &#123;\n\n    private final UserService UserService;\n\n    public UserController(UserService userService) &#123;\n        UserService &#x3D; userService;\n    &#125;\n\n    &#x2F;&#x2F;增加用户\n    @PostMapping(&quot;&#x2F;add&quot;)\n    public Boolean add(@RequestBody UserEntity UserEntity) &#123;\n        return UserService.save(UserEntity);\n    &#125;\n\n    &#x2F;&#x2F;删除\n    @GetMapping(&quot;delete&#x2F;&#123;id&#125;&quot;)\n    public Boolean delete(@PathVariable Integer id) &#123;\n        return UserService.removeById(id);\n    &#125;\n\n    &#x2F;&#x2F;修改\n    @PostMapping(&quot;&#x2F;update&quot;)\n    public Boolean update(@RequestBody UserEntity UserEntity) &#123;\n        return UserService.updateById(UserEntity);\n    &#125;\n\n    &#x2F;&#x2F;查询\n    @GetMapping(&quot;&#x2F;get&#x2F;&#123;id&#125;&quot;)\n    public UserEntity get(@PathVariable Integer id) &#123;\n        return UserService.getById(id);\n    &#125;\n\n    &#x2F;&#x2F;查询全部\n    @GetMapping(&quot;&#x2F;list&quot;)\n    public Result list() &#123;\n        return Result.success(&quot;测试&quot;, UserService.list());\n    &#125;\n\n    &#x2F;&#x2F;登陆接口\n    @PostMapping(&quot;&#x2F;login&quot;)\n    public Result login(@RequestBody UserEntity userEntity) &#123;\n        return UserService.login(userEntity.getUserName(), userEntity.getUserPwd());\n    &#125;\n\n    &#x2F;&#x2F;注册接口\n    @PostMapping(&quot;&#x2F;register&quot;)\n    public Result register(@RequestBody UserEntity userEntity) &#123;\n        return UserService.register(userEntity);\n    &#125;\n&#125;</code></pre>\n\n<p>基本上都不用写sql语句了(复杂的除外)。</p>\n<p>运行测试一下接口。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c85c905f6d044e1f875c04073db38f09~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=3008&h=1960&s=479511&e=png&a=1&b=30333f\" alt=\"image.png\"></p>\n<h1 id=\"10-总结\"><a href=\"#10-总结\" class=\"headerlink\" title=\"10.  总结\"></a>10.  总结</h1><p>通过整合Spring Boot和MyBatis-Plus，我们可以快速实现数据库的CRUD操作。MyBatis-Plus提供了许多便捷的功能和方法，使得开发更加高效。在本文中，我们介绍了整合的步骤，包括依赖的引入、数据库连接的配置、实体类和Mapper接口的创建以及Mapper XML文件的编写。希望本文对你在Spring Boot项目中整合MyBatis-Plus并快速实现CRUD操作有所帮助。</p>\n","feature":false,"text":"前言 在开发Web应用程序时，CRUD（Create、Read、Update、Delete）是最基本的操作。为了简化开发过程并提高效率，我们可以使用一些成熟的框架和工具来实现CRUD操作。Spring Boot作为一个快速开发框架，而MyBatis-Plus则是一个高效的持久层框...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"springBoot","slug":"springBoot","count":1,"path":"api/categories/springBoot.json"}],"tags":[{"name":"java","slug":"java","count":1,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1. 概述</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\"><span class=\"toc-text\">2. 环境准备</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E5%88%9B%E5%BB%BASpring-Boot%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">3. 创建Spring Boot项目</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E5%BC%95%E5%85%A5MyBatis-Plus%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">4.  引入MyBatis-Plus依赖</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">5. 配置数据库连接</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-%E5%88%9B%E5%BB%BA%E5%8C%85%E7%9B%AE%E5%BD%95%E5%92%8C%E6%B7%BB%E5%8A%A0%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">6. 创建包目录和添加注解</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#7-%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%92%8CMapper%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">7.  创建实体类和Mapper接口</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#8-%E5%AE%9E%E7%8E%B0CRUD%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">8.  实现CRUD操作</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#9-%E6%9C%80%E5%90%8E%E5%86%8D%E5%88%9B%E5%BB%BA%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6%E5%99%A8controller\"><span class=\"toc-text\">9.最后再创建路由控制器controller</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#10-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">10.  总结</span></a></li></ol>","author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"mapped":true,"prev_post":{"title":"一文带你搞懂浏览器的事件循环机制！","uid":"063f99f939e2a1e1a5f4f8ebf1d3e74e","slug":"js/一文带你搞懂浏览器的事件循环机制！","date":"2023-06-10T14:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/js/一文带你搞懂浏览器的事件循环机制！.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/23.png","text":"什么是事件循环Event Loop 也叫做“事件循环”，它其实与 JavaScript 的运行机制有关，乍一看云里雾里，不用着急，读完本文你便会知晓它的含义，这一切都要从 JavaScript 的初始设计说起。 并发模型JavaScript 的并发模型是基于事件循环机制的，这个机...","link":"","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[{"name":"js","slug":"js","count":1,"path":"api/categories/js.json"}],"tags":[{"name":"js 事件循环","slug":"js-事件循环","count":1,"path":"api/tags/js-事件循环.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false},"next_post":{"title":"是时候该知道React中的Key属性的作用与最佳实践了","uid":"e4991464a66a20205c1c693e50c451bc","slug":"react/是时候该知道React中的Key属性的作用与最佳实践了","date":"2023-05-04T14:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/react/是时候该知道React中的Key属性的作用与最佳实践了.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/21.png","text":" 前言在React中，我们常常会遇到需要渲染列表或循环生成组件的场景。为了提高性能和优化用户体验，React引入了一个特殊的属性——key。本文将详细介绍React中key属性的作用、原理，并提供一些最佳实践。 一、Key属性的作用Key属性是React要求使用者在渲染多个组件时...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"react","slug":"react","count":3,"path":"api/categories/react.json"},{"name":"前端","slug":"react/前端","count":1,"path":"api/categories/react/前端.json"},{"name":"diff","slug":"react/前端/diff","count":1,"path":"api/categories/react/前端/diff.json"}],"tags":[{"name":"前端 react diff 虚拟dom","slug":"前端-react-diff-虚拟dom","count":1,"path":"api/tags/前端-react-diff-虚拟dom.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false}}