{"title":"如何使用Java进行网络爬虫","uid":"632f278e9eaf0bde9468f346788aa8ea","slug":"go/如何使用Java进行网络爬虫","date":"2021-07-18T02:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/go/如何使用Java进行网络爬虫.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/38.png","content":"<h1 id=\"如何使用Java进行网络爬虫\"><a href=\"#如何使用Java进行网络爬虫\" class=\"headerlink\" title=\"如何使用Java进行网络爬虫\"></a>如何使用Java进行网络爬虫</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>大家好我是迁客，一个初学Java的小白！痴迷技术，对programming有着极大的兴趣和爱好。从今天起，开始写自己个人成长的第一篇博客！既是对自己的一个学习技术的一个记录，也是督促自己，坚持下去！加油Fighting！<br>==从明天起，做一个新思维的人<br>继承，多态，层层封装<br>从明天起,不再关心内存管理<br>让每一条数据，自动放到合适的位子上<br>从明天起，我将为每一个对象<br>取一个温暖的名字<br>它们用驼峰命名，优雅，大方<br>陌生人，我也祝福你哈<br>愿你不再为系统级bug烦恼<br>愿你在平台之间肆意游荡<br>愿你不再关心溢出与异常==</p></blockquote>\n<p>@[toc]<br>好了废话不多说，我们先来看看用Java爬虫需要先准备什么？</p>\n<ol>\n<li>JKD13</li>\n<li>idea开发工具</li>\n<li>maven</li>\n<li>httpclient</li>\n</ol>\n<p>以上就是我主要用到的东西了！</p>\n<h2 id=\"1-环境准备\"><a href=\"#1-环境准备\" class=\"headerlink\" title=\"1.环境准备\"></a>1.环境准备</h2><ul>\n<li>创建Maven工程并给pom.xml加入依赖<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;dependencies&gt;\n        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.apache.httpcomponents&#x2F;httpclient --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.httpcomponents&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;httpclient&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;4.5.2&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.slf4j&#x2F;slf4j-log4j12 --&gt;\n        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.slf4j&#x2F;slf4j-log4j12 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;slf4j-log4j12&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;1.7.25&lt;&#x2F;version&gt;\n            &lt;!--&lt;scope&gt;test&lt;&#x2F;scope&gt;--&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.jsoup&#x2F;jsoup --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.jsoup&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;jsoup&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;1.10.2&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;junit&#x2F;junit --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;4.12&lt;&#x2F;version&gt;\n            &lt;scope&gt;test&lt;&#x2F;scope&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;commons-io&#x2F;commons-io --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;commons-io&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;commons-io&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;2.6&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.apache.commons&#x2F;commons-lang3 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;commons-lang3&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;3.7&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n    &lt;&#x2F;dependencies&gt;</code></pre>\n<h2 id=\"2-加入log4j-properties\"><a href=\"#2-加入log4j-properties\" class=\"headerlink\" title=\"2.加入log4j.properties\"></a>2.加入log4j.properties</h2></li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">log4j.rootLogger&#x3D;DEBUG,A1\nlog4j.logger.spider &#x3D; DEBUG\n\nlog4j.appender.A1&#x3D;org.apache.log4j.ConsoleAppender\nlog4j.appender.A1.layout&#x3D;org.apache.log4j.PatternLayout\nlog4j.appender.A1.layout.ConversionPattern&#x3D;%-d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; [%t] [%c]-[%p] %m%n</code></pre>\n<h2 id=\"3-编写最简单的爬虫，抓取CSDN首页：https-blog-csdn-net\"><a href=\"#3-编写最简单的爬虫，抓取CSDN首页：https-blog-csdn-net\" class=\"headerlink\" title=\"3.编写最简单的爬虫，抓取CSDN首页：https://blog.csdn.net/\"></a>3.编写最简单的爬虫，抓取CSDN首页：<a href=\"https://blog.csdn.net/\">https://blog.csdn.net/</a></h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;***\n     * @Title: getHttp()\n     * @Author: 汪满青\n     * @Description: get请求,抓取CSDN首页\n     * @Date: 2020&#x2F;10&#x2F;25-21:55\n     * @Param: []\n     * @return: void\n     **&#x2F;\n    public static void getHttp() throws IOException &#123;\n        &#x2F;&#x2F;创建HttpClient对象\n        CloseableHttpClient httpClient &#x3D; HttpClients.createDefault();\n        &#x2F;&#x2F;创建HttpGet请求\n        HttpGet httpGet &#x3D; new HttpGet(&quot;http:&#x2F;&#x2F;www.itcast.cn&#x2F;&quot;);\n        CloseableHttpResponse response &#x3D; null;\n        try &#123;\n            &#x2F;&#x2F;使用HttpClient发起请求\n            response &#x3D; httpClient.execute(httpGet);\n            &#x2F;&#x2F;判断响应状态码是否为200\n            if (response.getStatusLine().getStatusCode() &#x3D;&#x3D; 200) &#123;\n                &#x2F;&#x2F;如果为200表示请求成功，获取返回数据\n                String content &#x3D; EntityUtils.toString(response.getEntity(), &quot;UTF-8&quot;);\n                &#x2F;&#x2F;打印数据长度\n                System.out.println(content);\n            &#125;\n        &#125; catch (Exception e) &#123;\n            e.printStackTrace();\n        &#125; finally &#123;\n            &#x2F;&#x2F;释放连接\n            if (response &#x3D;&#x3D; null) &#123;\n                try &#123;\n                    response.close();\n                &#125; catch (IOException e) &#123;\n                    e.printStackTrace();\n                &#125;\n                httpClient.close();\n            &#125;\n        &#125;\n    &#125;</code></pre>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/16301672de5249619109d3b7ee9cc732~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"4-连接池\"><a href=\"#4-连接池\" class=\"headerlink\" title=\"4.连接池\"></a>4.连接池</h2><ul>\n<li>如果每次请求都要创建HttpClient，会有频繁创建和销毁的问题，可以使用连接池来解决这个问题。<br>测试以下代码，并断点查看每次获取的HttpClient都是不一样的。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.test;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\nimport org.apache.http.util.EntityUtils;\nimport java.io.IOException;\n&#x2F;**\n * @ClassName:httpPool\n * @Description:httpPool连接池\n * @Author: 汪满青\n * @Date: 2020-10-25 22:28\n *&#x2F;\npublic class httpPool &#123;\n    public static void main(String[] args) throws IOException &#123;\n        PoolingHttpClientConnectionManager cm &#x3D; new PoolingHttpClientConnectionManager();\n        &#x2F;&#x2F;    设置最大连接数\n        cm.setMaxTotal(200);\n        &#x2F;&#x2F;    设置每个主机的并发数\n        cm.setDefaultMaxPerRoute(20);\n        doGet(cm);\n    &#125;\n    private static void doGet(PoolingHttpClientConnectionManager cm) throws IOException &#123;\n        CloseableHttpClient httpClient &#x3D; HttpClients.custom().setConnectionManager(cm).build();\n        HttpGet httpGet &#x3D; new HttpGet(&quot;https:&#x2F;&#x2F;blog.csdn.net&#x2F;&quot;);\n        CloseableHttpResponse response &#x3D; null;\n        try &#123;\n            response &#x3D; httpClient.execute(httpGet);\n            &#x2F;&#x2F; 判断状态码是否是200\n            if (response.getStatusLine().getStatusCode() &#x3D;&#x3D; 200) &#123;\n                &#x2F;&#x2F; 解析数据\n                String content &#x3D; EntityUtils.toString(response.getEntity(), &quot;UTF-8&quot;);\n                System.out.println(content.length());\n            &#125;\n        &#125; catch (Exception e) &#123;\n            e.printStackTrace();\n        &#125; finally &#123;\n            &#x2F;&#x2F;释放连接\n            if (response &#x3D;&#x3D; null) &#123;\n                try &#123;\n                    response.close();\n                &#125; catch (IOException e) &#123;\n                    e.printStackTrace();\n                &#125;\n                &#x2F;&#x2F;不能关闭HttpClient\n                &#x2F;&#x2F;httpClient.close();\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"5-jsoup介绍\"><a href=\"#5-jsoup介绍\" class=\"headerlink\" title=\"5.jsoup介绍\"></a>5.jsoup介绍</h2><p>jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</p>\n<p>jsoup的主要功能如下：<br>1.从一个URL，文件或字符串中解析HTML；<br>2.使用DOM或CSS选择器来查找、取出数据；<br>3.可操作HTML元素、属性、文本；</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&lt;!--Jsoup--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.jsoup&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;jsoup&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;1.10.3&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;!--测试--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;4.12&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;!--工具--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;commons-lang3&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;3.7&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;commons-io&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;commons-io&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.6&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n<h3 id=\"5-1-soup解析\"><a href=\"#5-1-soup解析\" class=\"headerlink\" title=\"5.1.soup解析\"></a>5.1.soup解析</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Jsoup可以直接输入url，它会发起请求并获取数据，封装为Document对象\n@Test\npublic void testJsoupUrl() throws Exception &#123;\n    &#x2F;&#x2F;    解析url地址\n    Document document &#x3D; Jsoup.parse(new URL(&quot;http:&#x2F;&#x2F;www.itcast.cn&#x2F;&quot;), 1000);\n\n    &#x2F;&#x2F;获取title的内容\n    Element title &#x3D; document.getElementsByTag(&quot;title&quot;).first();\n    System.out.println(title.text());\n&#125;</code></pre>\n<p>PS：虽然使用Jsoup可以替代HttpClient直接发起请求解析数据，但是往往不会这样用，因为实际的开发过程中，需要使用到多线程，连接池，代理等等方式，而jsoup对这些的支持并不是很好，所以我们一般把jsoup仅仅作为Html解析工具使用<br><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/71e89dcbde034011b125f8bb62800ba0~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"在这里插入图片描述\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>==写到最后了，希望大家对大家有所帮助，谢谢<br>感悟：开始写博客，希望自己可以坚持下去， 至少每周一篇，积少成多，并且保证质量，希望大家多多支持，同时也是自己的一个积累的过程==</p></blockquote>\n","feature":false,"text":"如何使用Java进行网络爬虫 大家好我是迁客，一个初学Java的小白！痴迷技术，对programming有着极大的兴趣和爱好。从今天起，开始写自己个人成长的第一篇博客！既是对自己的一个学习技术的一个记录，也是督促自己，坚持下去！加油Fighting！==从明天起，做一个新思维的人...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"java","slug":"java","count":1,"path":"api/categories/java.json"}],"tags":[{"name":"java 爬虫","slug":"java-爬虫","count":1,"path":"api/tags/java-爬虫.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Java%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB\"><span class=\"toc-text\">如何使用Java进行网络爬虫</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\"><span class=\"toc-text\">1.环境准备</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%8A%A0%E5%85%A5log4j-properties\"><span class=\"toc-text\">2.加入log4j.properties</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E7%BC%96%E5%86%99%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E7%88%AC%E8%99%AB%EF%BC%8C%E6%8A%93%E5%8F%96CSDN%E9%A6%96%E9%A1%B5%EF%BC%9Ahttps-blog-csdn-net\"><span class=\"toc-text\">3.编写最简单的爬虫，抓取CSDN首页：https:&#x2F;&#x2F;blog.csdn.net&#x2F;</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E8%BF%9E%E6%8E%A5%E6%B1%A0\"><span class=\"toc-text\">4.连接池</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-jsoup%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">5.jsoup介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-soup%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">5.1.soup解析</span></a></li></ol></li></ol></li></ol>","author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"mapped":true,"prev_post":{"title":"如何使用node操作sqlite","uid":"2fb96575f2877512c0acb0b5dc6b763c","slug":"node/如何使用node操作sqlite","date":"2022-07-19T02:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/node/如何使用node操作sqlite.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/39.png","text":"什么是sqlitSQLite是一种轻量级的嵌入式关系型数据库管理系统，它以库的形式存在，可以嵌入到应用程序中。它使用简单的、基于文件的数据库格式，不需要独立的服务器进程，非常适合在资源有限的环境中使用。 SQLite的优点 简单易用：SQLite的API简单明了，学习曲线低，使用...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"node","slug":"node","count":2,"path":"api/categories/node.json"}],"tags":[{"name":"node slq","slug":"node-slq","count":1,"path":"api/tags/node-slq.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false},"next_post":{}}