{"title":"gorm的CRUD操作","uid":"c277cd2494021925450e9b212637db7d","slug":"go/一文入门gorm和xorm的基本操作（CRUD）","date":"2023-04-14T02:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/go/一文入门gorm和xorm的基本操作（CRUD）.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/44.jpeg","content":"<h1 id=\"gorm的CRUD操作\"><a href=\"#gorm的CRUD操作\" class=\"headerlink\" title=\"gorm的CRUD操作\"></a>gorm的CRUD操作</h1><h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go get -u gorm.io&#x2F;gorm\ngo get -u gorm.io&#x2F;driver&#x2F;mysql</code></pre>\n\n<p>第一个是gorm的库，第二个是mysql的连接驱动</p>\n<h1 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h1><p>GORM 官方支持的数据库类型有： MySQL, PostgreSQL, SQlite, SQL Server</p>\n<h1 id=\"创建DB实例\"><a href=\"#创建DB实例\" class=\"headerlink\" title=\"创建DB实例\"></a>创建DB实例</h1><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F;构建连接字符串\n&#x2F;*注意：想要正确的处理 time.Time ，您需要带上 parseTime 参数， (更多参数)要支持完整的 UTF-8 编码，您需要将 charset&#x3D;utf8 更改为 charset&#x3D;utf8mb4 查看 此文章 获取详情*&#x2F;\ndsn :&#x3D; &quot;root:password1234@tcp(127.0.0.1:3306)&#x2F;gorm?charset&#x3D;utf8mb4&amp;parseTime&#x3D;True&amp;loc&#x3D;Local&quot;\ndb, _ &#x3D; gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</code></pre>\n\n<h1 id=\"结构体映射数据库表\"><a href=\"#结构体映射数据库表\" class=\"headerlink\" title=\"结构体映射数据库表\"></a>结构体映射数据库表</h1><p>创建结构体</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;gorm.io&#x2F;gorm&quot;\n)\n\ntype User struct &#123;\n\tgorm.Model\n\tName string\n\tAge  uint8\n&#125;</code></pre>\n\n<p>使用<code>db.AutoMigrate(User&#123;&#125;)</code>方法从结构体生成数据库表</p>\n<h1 id=\"连接设置\"><a href=\"#连接设置\" class=\"headerlink\" title=\"连接设置\"></a>连接设置</h1><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">sqlDB, _ :&#x3D; db.DB()\n\n&#x2F;&#x2F; SetMaxIdleConns 设置空闲连接池中连接的最大数量\nsqlDB.SetMaxIdleConns(10)\n\n&#x2F;&#x2F; SetMaxOpenConns 设置打开数据库连接的最大数量。\nsqlDB.SetMaxOpenConns(100)\n\n&#x2F;&#x2F; SetConnMaxLifetime 设置了连接可复用的最大时间。\nsqlDB.SetConnMaxLifetime(time.Hour)</code></pre>\n\n<h1 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h1><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n&#x2F;&#x2F;添加数据\nfunc add() &#123;\n    &#x2F;&#x2F;插入单条数据\n    user :&#x3D; User&#123;Model: gorm.Model&#123;&#125;, Name: &quot;wmq&quot;, Age: 17&#125;\n    result :&#x3D; db.Create(&amp;user)\n    fmt.Println(user.ID, result.RowsAffected)\n    \n    &#x2F;&#x2F;插入指定字段\n    result &#x3D; db.Select(&quot;Name&quot;, &quot;Age&quot;).Create(&amp;User&#123;Name: &quot;前端少年&quot;, Age: 22&#125;)\n    fmt.Println(user, result.RowsAffected)\n    \n    &#x2F;&#x2F;切片批量插入\n    var users &#x3D; []User&#123;&#123;Name: &quot;w1&quot;&#125;, &#123;Name: &quot;w2&quot;&#125;, &#123;Name: &quot;w3&quot;&#125;&#125;\n    result &#x3D; db.Create(&amp;users)\n    fmt.Println(&quot;users&quot;, result.RowsAffected, users)\n    \n    &#x2F;&#x2F;map批量插入\n    db.Model(&amp;User&#123;&#125;).Create(map[string]interface&#123;&#125;&#123;\n         &quot;Name&quot;: &quot;jinzhu&quot;, &quot;Age&quot;: 18,\n    &#125;)\n    \n    &#x2F;&#x2F; 根据 &#96;[]map[string]interface&#123;&#125;&#123;&#125;&#96; 批量插入\n    db.Model(&amp;User&#123;&#125;).Create([]map[string]interface&#123;&#125;&#123;\n        &#123;&quot;Name&quot;: &quot;&quot;, &quot;Age&quot;: nil&#125;,\n        &#123;&quot;Name&quot;: &quot;&quot;, &quot;Age&quot;: nil&#125;,\n        &#123;&#125;,\n    &#125;)\n&#125;</code></pre>\n\n<h2 id=\"创建时的Hook操作\"><a href=\"#创建时的Hook操作\" class=\"headerlink\" title=\"创建时的Hook操作\"></a>创建时的Hook操作</h2><p>// 开始事务<br>BeforeSave<br>BeforeCreate<br>// 关联前的 save<br>// 插入记录至 db // 关联后的 save<br>AfterCreate AfterSave<br>// 提交或回滚事务</p>\n<h1 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h1><ul>\n<li>  使用Save方法 会保存所有的字段，即使字段是零值</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n&#x2F;&#x2F;修改\nfunc update() &#123;\n\t&#x2F;&#x2F;更新单列\n\tvar user User\n\tuser.Name &#x3D; &quot;迁客骚人&quot;\n\tuser.Age &#x3D; 100\n\tdb.Save(&amp;user)\n\tfmt.Println(user.Name)\n\n\t&#x2F;&#x2F; 条件更新\n\tdb.Model(&amp;User&#123;&#125;).Where(&quot;active &#x3D; ?&quot;, true).Update(&quot;name&quot;, &quot;hello&quot;)\n\t&#x2F;&#x2F; UPDATE users SET name&#x3D;&#39;hello&#39;, updated_at&#x3D;&#39;2013-11-17 21:34:10&#39; WHERE active&#x3D;true;\n\n\t&#x2F;&#x2F; User 的 ID 是 &#96;111&#96;\n\tdb.Model(&amp;user).Update(&quot;name&quot;, &quot;hello&quot;)\n\t&#x2F;&#x2F; UPDATE users SET name&#x3D;&#39;hello&#39;, updated_at&#x3D;&#39;2013-11-17 21:34:10&#39; WHERE id&#x3D;111;\n\n\t&#x2F;&#x2F; 根据条件和 model 的值进行更新\n\tdb.Model(&amp;user).Where(&quot;active &#x3D; ?&quot;, true).Update(&quot;name&quot;, &quot;hello&quot;)\n\t&#x2F;&#x2F; UPDATE users SET name&#x3D;&#39;hello&#39;, updated_at&#x3D;&#39;2013-11-17 21:34:10&#39; WHERE id&#x3D;111 AND active&#x3D;true;\n\n\t&#x2F;&#x2F; 根据 &#96;struct&#96; 更新属性，只会更新非零值的字段\n\tdb.Model(&amp;user).Updates(User&#123;Name: &quot;hello&quot;, Age: 18&#125;)\n\t&#x2F;&#x2F; UPDATE users SET name&#x3D;&#39;hello&#39;, age&#x3D;18, updated_at &#x3D; &#39;2013-11-17 21:34:10&#39; WHERE id &#x3D; 111;\n\n\t&#x2F;&#x2F; 根据 &#96;map&#96; 更新属性\n\tdb.Model(&amp;user).Updates(map[string]interface&#123;&#125;&#123;&quot;Name&quot;: &quot;hello&quot;, &quot;Age&quot;: 18&#125;)\n\t&#x2F;&#x2F; UPDATE users SET name&#x3D;&#39;hello&#39;, age&#x3D;18, actived&#x3D;false, updated_at&#x3D;&#39;2013-11-17 21:34:10&#39; WHERE id&#x3D;111;\n\n\t&#x2F;&#x2F;批量更新\n\t&#x2F;&#x2F; 根据 struct 更新\n\tdb.Model(User&#123;&#125;).Where(&quot;role &#x3D; ?&quot;, &quot;admin&quot;).Updates(User&#123;Name: &quot;wmq&quot;, Age: 18&#125;)\n\t&#x2F;&#x2F; UPDATE users SET name&#x3D;&#39;hello&#39;, age&#x3D;18 WHERE role &#x3D; &#39;admin;\n\n\t&#x2F;&#x2F; 根据 map 更新\n\tdb.Table(&quot;users&quot;).Where(&quot;id IN ?&quot;, []int&#123;10, 11&#125;).Updates(map[string]interface&#123;&#125;&#123;&quot;name&quot;: &quot;hello&quot;, &quot;age&quot;: 18&#125;)\n\t&#x2F;&#x2F; UPDATE users SET name&#x3D;&#39;hello&#39;, age&#x3D;18 WHERE id IN (10, 11);\n&#125;</code></pre>\n\n<hr>\n<h1 id=\"xorm的CRUD操作\"><a href=\"#xorm的CRUD操作\" class=\"headerlink\" title=\"xorm的CRUD操作\"></a>xorm的CRUD操作</h1><h1 id=\"xorm的特性\"><a href=\"#xorm的特性\" class=\"headerlink\" title=\"xorm的特性\"></a>xorm的特性</h1><ul>\n<li>支持Struct和数据库表之间的灵活映射，并支持自动同步</li>\n<li>事务支持</li>\n<li>同时支持原始SQL语句和ORM操作的混合执行</li>\n<li>使用连写来简化调用</li>\n<li>支持使用Id, In, Where, Limit, Join, Having, Table, SQL, Cols等函数和结构体等方式作为条件</li>\n<li>支持级联加载Struct</li>\n<li>Schema支持（仅Postgres）</li>\n<li>支持缓存</li>\n<li>支持根据数据库自动生成xorm的结构体</li>\n<li>支持记录版本（即乐观锁）</li>\n<li>内置SQL Builder支持 </li>\n<li>通过EngineGroup支持读写分离和负载均衡</li>\n</ul>\n<h1 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go get xorm.io&#x2F;xorm</code></pre>\n\n\n<h1 id=\"创建-Engine-引擎-创建结构体同步数据库表\"><a href=\"#创建-Engine-引擎-创建结构体同步数据库表\" class=\"headerlink\" title=\"创建 Engine 引擎  创建结构体同步数据库表\"></a>创建 Engine 引擎  创建结构体同步数据库表</h1><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F; CoonXormMysql 连接数据库\npackage main\n\nimport (\n&quot;fmt&quot;\n_ &quot;gorm.io&#x2F;driver&#x2F;mysql&quot;\n&quot;time&quot;\n&quot;xorm.io&#x2F;xorm&quot;\n)\n\n&#x2F;&#x2F;数据库连接基本信息\nvar (\n   userName  string &#x3D; &quot;root&quot;\n   password  string &#x3D; &quot;12138&quot;\n   ipAddress string &#x3D; &quot;127.0.0.1&quot;\n   port      int    &#x3D; 3306\n   dbName    string &#x3D; &quot;xorm_db&quot;\n   charset   string &#x3D; &quot;utf8mb4&quot;\n)\n\ntype User struct &#123;\n   Id      int64\n   Name    string\n   Age     int\n   Passwd  string    &#96;xorm:&quot;varchar(200)&quot;&#96;\n   Created time.Time &#96;xorm:&quot;created&quot;&#96;\n   Updated time.Time &#96;xorm:&quot;updated&quot;&#96;\n&#125;\n\nvar engine *xorm.Engine\n\n&#x2F;&#x2F; CoonXormMysql 连接数据库\nfunc CoonXormMysql() &#123;\n   &#x2F;&#x2F;构建数据库连接信息\n   dataSourceName :&#x3D; fmt.Sprintf(&quot;%s:%s@tcp(%s:%d)&#x2F;%s?charset&#x3D;%s&quot;, userName, password, ipAddress, port, dbName, charset)\n   &#x2F;&#x2F;创建引擎\n   engine, _ &#x3D; xorm.NewEngine(&quot;mysql&quot;, dataSourceName)\n\n   err :&#x3D; engine.Sync2(new(User))\n   if err !&#x3D; nil &#123;\n      fmt.Println(&quot;同步失败&quot;)\n   &#125;\n&#125;\n</code></pre>\n\n<p>#CRUD操作<br>使用Engine的insert，query，update，delete等方法</p>\n<h2 id=\"添加\"><a href=\"#添加\" class=\"headerlink\" title=\"添加\"></a>添加</h2><ul>\n<li><p>插入一条数据，此时可以用Insert或者InsertOne </p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">user :&#x3D; User&#123;Id: 1, Name: &quot;wmq1&quot;, Age: 17, Passwd: &quot;1234567&quot;&#125;\nn, _ :&#x3D; engine.Insert(user)</code></pre></li>\n<li><p>插入数据使用Insert方法，Insert方法的参数可以是一个或多个Struct的指针，一个或多个Struct的Slice的指针。<br>如果传入的是Slice并且当数据库支持批量插入时，Insert会使用批量插入的方式进行插入。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F;user切片\nvar users []User\nusers &#x3D; append(users, User&#123;Id: 2, Name: &quot;wmq2&quot;, Age: 11, Passwd: &quot;12344567&quot;&#125;)\nusers &#x3D; append(users, User&#123;Id: 3, Name: &quot;wmq3&quot;, Age: 10, Passwd: &quot;12344567&quot;&#125;)\nn, _ &#x3D; engine.Insert(users)</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这里虽然支持同时插入，但这些插入并没有事务关系。因此有可能在中间插入出错后，后面的插入将不会继续。此时前面的插入已经成功，如果需要回滚，请开启事务。<br>批量插入会自动生成Insert into table values (),(),()的语句，因此各个数据库对SQL语句有长度限制，因此这样的语句有一个最大的记录数，根据经验测算在150条左右。大于150条后，生成的sql语句将太长可能导致执行失败。因此在插入大量数据时，目前需要自行分割成每150条插入一次。</p></blockquote>\n</li>\n</ul>\n<h2 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F;查询\nfunc query() &#123;\n   &#x2F;&#x2F;使用sql语句查询\n   results, _ :&#x3D; engine.Query(&quot;select * from user&quot;)\n   fmt.Println(results)\n   results2, _ :&#x3D; engine.QueryString(&quot;select * from user&quot;)\n   fmt.Println(results2)\n   results3, _ :&#x3D; engine.QueryInterface(&quot;select * from user&quot;)\n   fmt.Println(results3)\n\n   &#x2F;&#x2F;Get 只能查询单条数据\n   user :&#x3D; User&#123;&#125;\n   engine.Get(&amp;user)\n   fmt.Println(&quot;查询单条数据&quot;, user)\n\n   &#x2F;&#x2F;指定条件查询\n   user1 :&#x3D; User&#123;Name: &quot;wmq1&quot;&#125;\n   engine.Where(&quot;name&#x3D;?&quot;, user1.Name).Asc(&quot;id&quot;).Get(&amp;user1)\n   fmt.Println(&quot;指定条件查询&quot;, user1)\n\n   &#x2F;&#x2F;获取指定字段的值\n   var name string\n   engine.Table(&amp;user).Where(&quot;id &#x3D; 3&quot;).Cols(&quot;name&quot;).Get(&amp;name)\n   fmt.Println(&quot;获取指定字段的值&quot;, name)\n\n   &#x2F;&#x2F;查询多条&#x2F;所有记录 find\n   var users []User &#x2F;&#x2F;定义切片\n   engine.Find(&amp;users)\n   fmt.Println(&quot;查询多条&#x2F;所有记录&quot;, users)\n\n   &#x2F;&#x2F;Count 获取记录条数\n   user2 :&#x3D; User&#123;Passwd: &quot;12344567&quot;&#125;\n   count, _ :&#x3D; engine.Count(&amp;user2)\n   fmt.Println(&quot;获取记录条数&quot;, count)\n\n   &#x2F;&#x2F;Iterate 和 Rows根据条件遍历数据\n   engine.Iterate(&amp;User&#123;Passwd: &quot;12344567&quot;&#125;, func(idx int, bean interface&#123;&#125;) error &#123;\n      user :&#x3D; bean.(*User)\n      fmt.Println(&quot;Iterate 和 Rows根据条件遍历数据&quot;, user)\n      return nil\n   &#125;)\n   rows, _ :&#x3D; engine.Rows(&amp;User&#123;Passwd: &quot;12344567&quot;&#125;)\n   defer rows.Close()\n   userBean :&#x3D; new(User)\n   for rows.Next() &#123;\n      rows.Scan(userBean)\n      fmt.Println(userBean)\n   &#125;\n&#125;\n</code></pre>\n\n<h2 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F;修改\nfunc update() &#123;\n   &#x2F;&#x2F;更新\n   user :&#x3D; User&#123;Name: &quot;前端少年汪&quot;&#125;\n   n, _ :&#x3D; engine.ID(1).Update(&amp;user)\n   fmt.Println(n)\n&#125;</code></pre>\n\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">&#x2F;&#x2F;删除\nfunc del() &#123;\n   &#x2F;&#x2F;删除\n   var user1 User\n   n1, _ :&#x3D; engine.ID(3).Delete(&amp;user1)\n   fmt.Println(n1)\n   \n&#125;</code></pre>\n\n<h2 id=\"执行一个sql语句\"><a href=\"#执行一个sql语句\" class=\"headerlink\" title=\"执行一个sql语句\"></a>执行一个sql语句</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">engine.Exec(&quot;update user set age &#x3D; ? where id &#x3D; ?&quot;, 10, 1001)</code></pre>\n\n<h1 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h1><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n   &quot;fmt&quot;\n   _ &quot;gorm.io&#x2F;driver&#x2F;mysql&quot;\n   &quot;time&quot;\n   &quot;xorm.io&#x2F;xorm&quot;\n)\n\n&#x2F;&#x2F;数据库连接基本信息\nvar (\n   userName  string &#x3D; &quot;root&quot;\n   password  string &#x3D; &quot;12138&quot;\n   ipAddress string &#x3D; &quot;127.0.0.1&quot;\n   port      int    &#x3D; 3306\n   dbName    string &#x3D; &quot;xorm_db&quot;\n   charset   string &#x3D; &quot;utf8mb4&quot;\n)\n\ntype User struct &#123;\n   Id      int64\n   Name    string\n   Age     int\n   Passwd  string    &#96;xorm:&quot;varchar(200)&quot;&#96;\n   Created time.Time &#96;xorm:&quot;created&quot;&#96;\n   Updated time.Time &#96;xorm:&quot;updated&quot;&#96;\n&#125;\n\nvar engine *xorm.Engine\n\nfunc main() &#123;\n   fmt.Println(&quot;xorm 学习&quot;)\n\n   CoonXormMysql()\n   var input int\n\n   var flag bool &#x3D; true\n   for flag &#123;\n      fmt.Println(&quot;1.添加&quot;)\n      fmt.Println(&quot;2.查询&quot;)\n      fmt.Println(&quot;3.更新&quot;)\n      fmt.Println(&quot;4.删除&quot;)\n      fmt.Println(&quot;5.退出&quot;)\n      fmt.Scan(&amp;input)\n      if input &#x3D;&#x3D; 1 &#123;\n         add()\n      &#125; else if input &#x3D;&#x3D; 2 &#123;\n         query()\n      &#125; else if input &#x3D;&#x3D; 3 &#123;\n         update()\n      &#125; else if input &#x3D;&#x3D; 4 &#123;\n         del()\n      &#125; else if input &#x3D;&#x3D; 5 &#123;\n         flag &#x3D; false\n      &#125;\n   &#125;\n\n&#125;\n\n&#x2F;&#x2F; CoonXormMysql 连接数据库\nfunc CoonXormMysql() &#123;\n   &#x2F;&#x2F;构建数据库连接信息\n   dataSourceName :&#x3D; fmt.Sprintf(&quot;%s:%s@tcp(%s:%d)&#x2F;%s?charset&#x3D;%s&quot;, userName, password, ipAddress, port, dbName, charset)\n   &#x2F;&#x2F;创建引擎\n   engine, _ &#x3D; xorm.NewEngine(&quot;mysql&quot;, dataSourceName)\n\n   err :&#x3D; engine.Sync2(new(User))\n   if err !&#x3D; nil &#123;\n      fmt.Println(&quot;同步失败&quot;)\n   &#125;\n&#125;\n\n&#x2F;&#x2F;添加\nfunc add() &#123;\n   user :&#x3D; User&#123;Id: 1, Name: &quot;wmq1&quot;, Age: 17, Passwd: &quot;1234567&quot;&#125;\n   n, _ :&#x3D; engine.Insert(user)\n   fmt.Println(n)\n   if n &gt;&#x3D; 1 &#123;\n      fmt.Println(&quot;插入成功&quot;)\n   &#125;\n\n   &#x2F;&#x2F;user切片\n   var users []User\n   users &#x3D; append(users, User&#123;Id: 2, Name: &quot;wmq2&quot;, Age: 11, Passwd: &quot;12344567&quot;&#125;)\n   users &#x3D; append(users, User&#123;Id: 3, Name: &quot;wmq3&quot;, Age: 10, Passwd: &quot;12344567&quot;&#125;)\n   n, _ &#x3D; engine.Insert(users)\n\n&#125;\n\n&#x2F;&#x2F;查询\nfunc query() &#123;\n   &#x2F;&#x2F;使用sql语句查询\n   results, _ :&#x3D; engine.Query(&quot;select * from user&quot;)\n   fmt.Println(results)\n   results2, _ :&#x3D; engine.QueryString(&quot;select * from user&quot;)\n   fmt.Println(results2)\n   results3, _ :&#x3D; engine.QueryInterface(&quot;select * from user&quot;)\n   fmt.Println(results3)\n\n   &#x2F;&#x2F;Get 只能查询单条数据\n   user :&#x3D; User&#123;&#125;\n   engine.Get(&amp;user)\n   fmt.Println(&quot;查询单条数据&quot;, user)\n\n   &#x2F;&#x2F;指定条件查询\n   user1 :&#x3D; User&#123;Name: &quot;wmq1&quot;&#125;\n   engine.Where(&quot;name&#x3D;?&quot;, user1.Name).Asc(&quot;id&quot;).Get(&amp;user1)\n   fmt.Println(&quot;指定条件查询&quot;, user1)\n\n   &#x2F;&#x2F;获取指定字段的值\n   var name string\n   engine.Table(&amp;user).Where(&quot;id &#x3D; 3&quot;).Cols(&quot;name&quot;).Get(&amp;name)\n   fmt.Println(&quot;获取指定字段的值&quot;, name)\n\n   &#x2F;&#x2F;查询多条&#x2F;所有记录 find\n   var users []User &#x2F;&#x2F;定义切片\n   engine.Find(&amp;users)\n   fmt.Println(&quot;查询多条&#x2F;所有记录&quot;, users)\n\n   &#x2F;&#x2F;Count 获取记录条数\n   user2 :&#x3D; User&#123;Passwd: &quot;12344567&quot;&#125;\n   count, _ :&#x3D; engine.Count(&amp;user2)\n   fmt.Println(&quot;获取记录条数&quot;, count)\n\n   &#x2F;&#x2F;Iterate 和 Rows根据条件遍历数据\n   engine.Iterate(&amp;User&#123;Passwd: &quot;12344567&quot;&#125;, func(idx int, bean interface&#123;&#125;) error &#123;\n      user :&#x3D; bean.(*User)\n      fmt.Println(&quot;Iterate 和 Rows根据条件遍历数据&quot;, user)\n      return nil\n   &#125;)\n   rows, _ :&#x3D; engine.Rows(&amp;User&#123;Passwd: &quot;12344567&quot;&#125;)\n   defer rows.Close()\n   userBean :&#x3D; new(User)\n   for rows.Next() &#123;\n      rows.Scan(userBean)\n      fmt.Println(userBean)\n   &#125;\n&#125;\n\n&#x2F;&#x2F;修改\nfunc update() &#123;\n   &#x2F;&#x2F;更新\n   user :&#x3D; User&#123;Name: &quot;前端少年汪&quot;&#125;\n   n, _ :&#x3D; engine.ID(1).Update(&amp;user)\n   fmt.Println(n)\n&#125;\n\n&#x2F;&#x2F;删除\nfunc del() &#123;\n   &#x2F;&#x2F;删除\n   var user1 User\n   n1, _ :&#x3D; engine.ID(3).Delete(&amp;user1)\n   fmt.Println(n1)\n&#125;\n</code></pre>\n\n<p>以上就是go使用gorm或者xorm的一个最简单的crud的基本操作了，当然gorm和xorm的功能远不止如此，更多的特性和功能可以在开发过程中查阅其官网即可  </p>\n<h1 id=\"gorm-和-xorm-的区别\"><a href=\"#gorm-和-xorm-的区别\" class=\"headerlink\" title=\"gorm 和 xorm 的区别\"></a>gorm 和 xorm 的区别</h1><p>gorm 和 xorm 都是 Go 语言中常用的 ORM（对象关系映射）框架。下面是它们的主要区别：</p>\n<ol>\n<li><p>设计哲学不同：gorm 设计思维更加严谨、规范化，更加注重符合 SQL 标准；xorm 设计思维更加灵活，允许用户通过指定标签轻松映射 struct，提供了更多针对 NoSQL 数据库的支持。</p>\n</li>\n<li><p>性能表现不同：根据各自的 benchmark 结果，xorm 的性能通常比 gorm 更高，并且 xorm 对于连接池的处理也更优秀。</p>\n</li>\n<li><p>使用方式不同：gorm 支持链式调用和原生 SQL，而 xorm 和 gorm 都支持链式调用和模板语言。</p>\n</li>\n<li><p>社区支持度不同：由于 gorm 的设计更加严谨，因此它的稳定性和一致性更高，得到了更加广泛的社区支持和认可。而 xorm 在社区中的影响力不如 gorm，但是在某些特定领域（例如非关系型数据库）中的支持度相对较好。</p>\n</li>\n</ol>\n<p>总体来说，gorm 和 xorm 的目标群体有所不同，gorm 更适合那些需要严格符合 SQL 标准、更加稳定的场景，而 xorm 更适用于需要灵活性和可扩展性的场景。当然，选择哪一个 ORM 还需要根据具体项目的需求和开发者的个人喜好做出决定。</p>\n","feature":false,"text":"gorm的CRUD操作安装go get -u gorm.io&#x2F;gorm go get -u gorm.io&#x2F;driver&#x2F;mysql 第一个是gorm的库，第二个是mysql的连接驱动 连接数据库GORM 官方支持的数据库类型有： MySQL, Po...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"go","slug":"go","count":3,"path":"api/categories/go.json"}],"tags":[{"name":"gorm","slug":"gorm","count":1,"path":"api/tags/gorm.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#gorm%E7%9A%84CRUD%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">gorm的CRUD操作</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">安装</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">连接数据库</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BADB%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">创建DB实例</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%84%E4%BD%93%E6%98%A0%E5%B0%84%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8\"><span class=\"toc-text\">结构体映射数据库表</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E6%8E%A5%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">连接设置</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">插入数据</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E6%97%B6%E7%9A%84Hook%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">创建时的Hook操作</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">更新数据</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#xorm%E7%9A%84CRUD%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">xorm的CRUD操作</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#xorm%E7%9A%84%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">xorm的特性</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-1\"><span class=\"toc-text\">安装</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA-Engine-%E5%BC%95%E6%93%8E-%E5%88%9B%E5%BB%BA%E7%BB%93%E6%9E%84%E4%BD%93%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8\"><span class=\"toc-text\">创建 Engine 引擎  创建结构体同步数据库表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0\"><span class=\"toc-text\">添加</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">查询</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9\"><span class=\"toc-text\">修改</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">删除</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E4%B8%80%E4%B8%AAsql%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">执行一个sql语句</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">完整代码</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#gorm-%E5%92%8C-xorm-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">gorm 和 xorm 的区别</span></a></li></ol>","author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"mapped":true,"prev_post":{"title":"使用Vite+Vue3创建Cesium项目","uid":"f47aa374ec8bb25754a7283a60088fec","slug":"vue/使用Vite+Vue3创建Cesium项目","date":"2023-04-15T02:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/vue/使用Vite+Vue3创建Cesium项目.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/45.png","text":"Vite+Vue3+Cesium项目模版 Cesium是AGI公司计算机图形开发小组与2011年研发的三维地球和地图可视化开源JavaScript库，Cesium一词来源于化学元素铯，铯是制造原子钟的关键元素，研发小组通过命名强调Cesium产品精益求精，专注时间数据可视化。Ce...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"vue3","slug":"vue3","count":1,"path":"api/categories/vue3.json"}],"tags":[{"name":"cesium","slug":"cesium","count":2,"path":"api/tags/cesium.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false},"next_post":{"title":"vite使用入门","uid":"89c83197a75c1245116b0a9c7aba1d2b","slug":"vue/vite3使用指南,小白再也不用担心项目配置问题了","date":"2023-04-13T02:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/vue/vite3使用指南,小白再也不用担心项目配置问题了.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/43.png","text":"为开发提供极速响应v4.1.0 目前Vite已经更新到v4.1.0的版本了 vite的特性 💡极速的服务启动，意思就是一个字快 ⚡️轻量快速的热重载，就是说热更新也很快 🔧丰富的功能，支持的工具集比较多，开箱即用 📦优化的构建 对于生产环境的构建有更好的优化 🔩通用的插件，在开发和...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"vite","slug":"vite","count":1,"path":"api/categories/vite.json"}],"tags":[{"name":"vite","slug":"vite","count":1,"path":"api/tags/vite.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false}}