{"title":"Three.js深入浅出：2-创建三维场景和物体","uid":"99813f5b526e93cf8eb8d3f2ce7c5c5f","slug":"threeJS/Three.js深入浅出：2-创建三维场景和物体","date":"2023-10-10T14:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/threeJS/Three.js深入浅出：2-创建三维场景和物体.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/3.png","content":"<h1 id=\"序言：\"><a href=\"#序言：\" class=\"headerlink\" title=\"序言：\"></a>序言：</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在现代互联网时代，Web 技术的快速发展使得 Web 开发领域日新月异。随着互联网内容变得越来越丰富、复杂，用户对于网页和应用程序的交互性和视觉效果提出了更高的要求。在这样的背景下，基于 WebGL 的 3D 图形技术越来越受到关注和重视。</p>\n<p>而在众多的 3D 图形库中，Three.js 作为一款优秀的 JavaScript 3D 图形库，受到了广泛的欢迎和应用。无论是创建引人入胜的交互式 3D 场景、还是打造惊艳的虚拟现实体验，Three.js 都展现出了强大的潜力和灵活性。</p>\n<p>本系列文章将深入探讨 Three.js，从基础入门到高级应用，带领读者逐步掌握 Three.js 的核心概念和技术要点。我们将从搭建基本的 3D 场景开始，逐步引入光影、材质、纹理、动画等概念，让读者能够系统地掌握 Three.js 的开发技巧和实践经验。</p>\n<p>通过本系列文章的学习，读者将能够掌握使用 Three.js 创建精美的 3D 可视化效果，以及实现交互式的虚拟场景的能力。无论是 Web 开发工程师、还是对 3D 图形技术感兴趣的爱好者，都能够从中受益匪浅。</p>\n<p>让我们一起踏上 Three.js 的学习之旅，探索无限的创意可能性，开启属于自己的 3D 时代！ 欢迎各位小伙伴们多多关注，你的点赞和评论是我写作的动力！</p></blockquote>\n<h1 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h1><p>下面我将详细解释 Three.js 的核心概念：</p>\n<ol>\n<li> <strong>场景 (Scene)</strong> ：场景是 Three.js 中的核心概念，它充当着所有 3D 对象的容器。通过创建场景对象，可以将所有的物体、灯光和相机放置在同一个坐标空间中进行渲染。</li>\n<li> <strong>相机 (Camera)</strong> ：相机定义了用户在场景中所看到的部分。Three.js 提供了多种类型的相机，包括透视相机（PerspectiveCamera）和正交相机（OrthographicCamera），它们分别用于创建透视投影和正交投影效果。</li>\n<li> <strong>渲染器 (Renderer)</strong> ：渲染器负责将场景和相机中的内容渲染成 2D 图像，并显示在浏览器中。Three.js 提供了 WebGLRenderer 和 CanvasRenderer 两种渲染器，其中 WebGLRenderer 利用 WebGL 技术实现硬件加速渲染，性能更好。</li>\n<li> <strong>光源 (Light)</strong> ：光源用于模拟场景中的光照效果。Three.js 支持多种类型的光源，包括环境光、点光源、聚光灯和方向光等，通过调整光源的参数可以控制阴影、反射等效果。</li>\n<li> <strong>材质 (Material)</strong> ：材质定义了物体表面的外观和特性，如颜色、纹理、光照反射等。Three.js 提供了各种内置的材质类型，也支持自定义的着色器材质。</li>\n<li> <strong>几何体 (Geometry)</strong> ：几何体是 3D 物体的基本结构，描述了物体的形状和结构。在 Three.js 中可以创建各种几何体，如立方体、球体、圆柱体等，也支持自定义几何体的创建。</li>\n<li> <strong>网格 (Mesh)</strong> ：网格是由几何体和材质组合而成的对象，它是 Three.js 中最常见的 3D 对象类型。网格可以被添加到场景中，通过变换、旋转、缩放等操作来实现动画效果。</li>\n<li> <strong>纹理 (Texture)</strong> ：纹理用于给几何体表面贴图，赋予物体更加生动和细致的外观。Three.js 支持加载各种图片文件作为纹理，也支持动态生成纹理。</li>\n<li> <strong>动画 (Animation)</strong> ：Three.js 提供了丰富的动画支持，可以实现物体的平移、旋转、缩放等动画效果。动画系统可以与时间、鼠标、键盘等事件进行交互，实现复杂的交互式动画效果。<br>当然，除了上面提到的核心概念外，Three.js 还涵盖了一些其他重要的概念，这些概念对于理解和使用 Three.js 都非常关键：</li>\n<li><strong>控制器 (Controller)</strong> ：控制器用于管理用户与场景之间的交互，包括鼠标、触摸屏、键盘等输入设备的响应。Three.js 提供了 OrbitControls、FlyControls、TrackballControls 等多种控制器，可以方便地实现用户对相机视角的控制。</li>\n<li><strong>粒子系统 (Particle System)</strong> ：粒子系统是用于模拟大量小颗粒的效果，比如烟雾、火焰、雨滴等。Three.js 提供了ParticleSystem类，可以创建和管理粒子系统，通过调整粒子的位置、速度、大小等参数来实现各种粒子效果。</li>\n<li><strong>后期处理 (Post-processing)</strong> ：后期处理是指在渲染图像后对其进行额外的处理，比如添加景深效果、光照效果、色彩调整等。Three.js 提供了EffectComposer类和多个着色器（Shader）来实现各种后期处理效果。</li>\n<li><strong>阴影 (Shadow)</strong> ：阴影效果可以使场景中的物体产生逼真的阴影，增强了 3D 场景的真实感。Three.js 支持通过设置光源的属性和材质的属性来实现阴影效果。</li>\n<li><strong>加载器 (Loader)</strong> ：加载器用于加载外部资源，比如模型文件、纹理图片、音频文件等。Three.js 提供了多种加载器，如OBJLoader、MTLLoader、TextureLoader 等，可以方便地将外部资源加载到场景中使用。</li>\n<li><strong>性能优化 (Performance Optimization)</strong> ：在开发 3D 应用时，性能优化非常重要。Three.js 提供了诸如几何体合并、LOD（细节层次）技术、GPU 粒子等性能优化手段，来提高应用的运行效率和流畅度。</li>\n</ol>\n<h1 id=\"创建一个正方体\"><a href=\"#创建一个正方体\" class=\"headerlink\" title=\"创建一个正方体\"></a>创建一个正方体</h1><h3 id=\"创建场景，相机，渲染器\"><a href=\"#创建场景，相机，渲染器\" class=\"headerlink\" title=\"创建场景，相机，渲染器\"></a>创建场景，相机，渲染器</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const scene &#x3D; new THREE.Scene();\nconst camera &#x3D; new THREE.PerspectiveCamera( 75, window.innerWidth &#x2F; window.innerHeight, 0.1, 1000 ); \nconst renderer &#x3D; new THREE.WebGLRenderer();</code></pre>\n<ol>\n<li> <strong>const scene = new THREE.Scene();</strong> 这一行代码创建了一个新的场景对象。在 Three.js 中，场景（Scene）是用来存放和管理所有 3D 对象（比如模型、灯光、相机等）的容器。通过创建一个场景对象，我们可以将所有的 3D 元素都添加到这个场景中，并在之后对它们进行操作和渲染。</li>\n<li> <strong>const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);</strong> 这一行代码创建了一个透视相机（Perspective Camera）。相机是观察场景的视角，决定了最终渲染出来的图像是怎样的。在这里，使用 PerspectiveCamera 类创建了一个透视相机，参数分别为视野角度（fov）、屏幕纵横比（aspect ratio）、近裁剪面（near clipping plane）和远裁剪面（far clipping plane）。视野角度决定了观察者能够看到的范围，而近裁剪面和远裁剪面则定义了相机能够渲染的物体范围，超出这个范围的物体将不会被渲染。</li>\n<li> <strong>const renderer = new THREE.WebGLRenderer();</strong> 这一行代码创建了一个 WebGL 渲染器（WebGL Renderer）。渲染器负责将 3D 场景渲染成 2D 图像并显示在浏览器中。Three.js 使用 WebGL 技术来进行硬件加速的 3D 渲染，而 WebGLRenderer 类就是用于创建并配置这个渲染器的。渲染器会将最终的 3D 场景渲染到画布（canvas）上，并通过渲染器的 DOM 元素添加到页面中来显示最终的渲染结果。</li>\n</ol>\n<h3 id=\"设置渲染器大小参数\"><a href=\"#设置渲染器大小参数\" class=\"headerlink\" title=\"设置渲染器大小参数\"></a>设置渲染器大小参数</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">renderer.setSize(windowWidth, windowHeight);&#x2F;&#x2F; 设置渲染器的大小\ndocument.body.appendChild( renderer.domElement );&#x2F;&#x2F; 将渲染器添加到页面中</code></pre>\n<ol>\n<li> <strong>renderer.setSize(windowWidth, windowHeight);</strong> 这行代码的作用是设置渲染器的大小，其中 windowWidth 和 windowHeight 分别代表了浏览器窗口的宽度和高度。通过调用 setSize 方法，我们告诉渲染器应该将输出的 3D 场景渲染成多大尺寸的图像。通常情况下，我们会将渲染器的大小设置为与浏览器窗口相同的尺寸，以保证 3D 场景能够填满整个浏览器窗口。</li>\n<li> <strong>document.body.appendChild( renderer.domElement );</strong> 这行代码的作用是将渲染器的 DOM 元素添加到页面中，以便在浏览器中显示 3D 场景。在 Three.js 中，每个渲染器都有一个对应的 DOM 元素（通常是一个 canvas 元素），它用于显示渲染后的 3D 图像。通过调用 appendChild 方法，我们将这个 DOM 元素添加到页面的 body 元素中，这样就能在页面上看到经过渲染的 3D 场景了。</li>\n<li></li>\n</ol>\n<h3 id=\"创建立方体物体\"><a href=\"#创建立方体物体\" class=\"headerlink\" title=\"创建立方体物体\"></a>创建立方体物体</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const geometry &#x3D; new THREE.BoxGeometry(1, 1, 1);&#x2F;&#x2F; 立方体几何体\nconst material &#x3D; new THREE.MeshBasicMaterial(&#123;color: 0x00ff00&#125;);&#x2F;&#x2F; 材质\nconst cube &#x3D; new THREE.Mesh(geometry, material);&#x2F;&#x2F; 立方体</code></pre>\n<ol>\n<li> <strong>const geometry = new THREE.BoxGeometry(1, 1, 1);</strong> 这一行代码创建了一个立方体的几何体（geometry）。在 Three.js 中，几何体用来定义 3D 模型的形状，比如立方体、球体、圆柱体等。BoxGeometry 类表示一个立方体的几何形状，参数 (1, 1, 1) 分别表示立方体在 x、y、z 轴上的尺寸。因此，这行代码创建了一个边长为 1 的立方体几何体。</li>\n<li> <strong>const material = new THREE.MeshBasicMaterial({color: 0x00ff00});</strong> 这一行代码创建了一个基本网格材质（MeshBasicMaterial）。材质定义了模型表面的外观特性，比如颜色、光照效果等。在这里，使用 MeshBasicMaterial 类创建了一个具有固定颜色的材质，颜色值 0x00ff00 表示绿色。这意味着我们将创建一个绿色的立方体模型。</li>\n<li> <strong>const cube = new THREE.Mesh(geometry, material);</strong> 这一行代码创建了一个网格对象（Mesh），并将之前创建的立方体几何体和材质应用到这个网格对象上。Mesh 类表示一个由几何体和材质组合而成的 3D 模型。通过将立方体几何体和材质传递给 Mesh 构造函数，我们实际上创建了一个拥有指定形状和外观的立方体模型。</li>\n</ol>\n<h3 id=\"渲染场景和动画\"><a href=\"#渲染场景和动画\" class=\"headerlink\" title=\"渲染场景和动画\"></a>渲染场景和动画</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">scene.add(cube);&#x2F;&#x2F; 将立方体添加到场景中\n\ncamera.position.z &#x3D; 5;&#x2F;&#x2F; 移动摄像机\n\n&#x2F;&#x2F; 渲染循环\nfunction animate() &#123;\n    requestAnimationFrame(animate);&#x2F;&#x2F; 请求动画帧\n    cube.rotation.x +&#x3D; 0.01;&#x2F;&#x2F; 旋转立方体\n    cube.rotation.y +&#x3D; 0.01;&#x2F;&#x2F; 旋转立方体\n    renderer.render(scene, camera);&#x2F;&#x2F; 渲染场景\n&#125;\n\nwindow.onload &#x3D; animate&#x2F;&#x2F; 页面加载完毕后执行动画函数</code></pre>\n\n<ol>\n<li><p> <strong>scene.add(cube);</strong> 这一行代码将之前创建的立方体模型 cube 添加到场景中。在 Three.js 中，使用 add 方法可以将 3D 对象添加到场景中，使其成为场景的一部分，从而在渲染时被显示出来。</p>\n</li>\n<li><p> <strong>camera.position.z = 5;</strong> 这一行代码将摄像机的位置沿着 z 轴移动到距离原点 5 个单位的位置。在 3D 场景中，摄像机决定了观察者的视角和展示效果，通过调整摄像机的位置，可以改变观察到的场景效果。</p>\n</li>\n<li><p><strong>function animate() { … }</strong> 这是一个名为 animate 的函数，用于执行渲染循环。在这个函数中：</p>\n<ul>\n<li>  <strong>requestAnimationFrame(animate);</strong>  这一行代码请求浏览器在下次重绘之前更新动画，并指定下一次重绘时调用的回调函数为 animate，这样可以实现流畅的动画效果。</li>\n<li>  <strong>cube.rotation.x += 0.01;</strong>  和 <strong>cube.rotation.y += 0.01;</strong>  这两行代码分别对立方体模型进行 x 轴和 y 轴方向上的旋转操作。通过不断改变立方体模型的旋转角度，可以实现旋转的动画效果。</li>\n<li>  <strong>renderer.render(scene, camera);</strong>  这一行代码使用渲染器来对场景进行渲染，以当前的摄像机视角生成最终的图像。</li>\n</ul>\n</li>\n<li><p> <strong>window.onload = animate</strong> 这一行代码指定在页面加载完成后执行 animate 函数，启动动画渲染循环。</p>\n</li>\n</ol>\n<h1 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h1><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/138588b00600454e8d62599872771c1d~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2984&h=1722&s=143802&e=png&a=1&b=000000\" alt=\"image.png\"></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!--\n * @Date: 2023-11-11 14:14:21\n * @LastEditors: 前端少年汪  \n * @LastEditTime: 2023-11-11 15:50:17\n * @FilePath: &#x2F;webGIS&#x2F;1-three.html\n * @Description: \n--&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;&#x2F;title&gt;\n    &lt;style&gt;\n        h1 &#123;\n            text-align: center;\n        &#125;\n\n        #webgl &#123;\n            width: 1200px;\n            height: 700px;\n            margin: 0 auto;\n        &#125;\n\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n&lt;h1&gt;three.js入门教程&lt;&#x2F;h1&gt;\n&lt;div id&#x3D;&quot;webgl&quot;&gt;&lt;&#x2F;div&gt;\n&lt;script type&#x3D;&quot;module&quot;&gt;\n    &#x2F;&#x2F; 现在浏览器支持ES6语法，自然包括import方式引入js文件\n    import * as THREE from &#39;.&#x2F;node_modules&#x2F;three&#x2F;src&#x2F;Three.js&#39;;\n\n    let windowWidth &#x3D; 1200;&#x2F;&#x2F; 窗口宽度\n    let windowHeight &#x3D; 700;&#x2F;&#x2F; 窗口高度\n\n    const scene &#x3D; new THREE.Scene();&#x2F;&#x2F; 场景\n    const camera &#x3D; new THREE.PerspectiveCamera(75, windowWidth &#x2F; windowHeight, 0.1, 1000);&#x2F;&#x2F; 摄像机\n    const renderer &#x3D; new THREE.WebGLRenderer();&#x2F;&#x2F; 渲染器\n\n    renderer.setSize(windowWidth, windowHeight);&#x2F;&#x2F; 设置渲染器的大小\n\n    document.getElementById(&#39;webgl&#39;).appendChild(renderer.domElement);&#x2F;&#x2F; 将渲染器添加到页面中\n    &#x2F;&#x2F; document.body.appendChild( renderer.domElement );\n\n    const geometry &#x3D; new THREE.BoxGeometry(1, 1, 1);&#x2F;&#x2F; 立方体几何体\n    const material &#x3D; new THREE.MeshBasicMaterial(&#123;color: 0x00ff00&#125;);&#x2F;&#x2F; 材质\n    const cube &#x3D; new THREE.Mesh(geometry, material);&#x2F;&#x2F; 立方体\n    scene.add(cube);&#x2F;&#x2F; 将立方体添加到场景中\n\n    camera.position.z &#x3D; 5;&#x2F;&#x2F; 移动摄像机\n\n    &#x2F;&#x2F; 渲染循环\n    function animate() &#123;\n        requestAnimationFrame(animate);&#x2F;&#x2F; 请求动画帧\n        cube.rotation.x +&#x3D; 0.01;&#x2F;&#x2F; 旋转立方体\n        cube.rotation.y +&#x3D; 0.01;&#x2F;&#x2F; 旋转立方体\n        renderer.render(scene, camera);&#x2F;&#x2F; 渲染场景\n    &#125;\n\n    window.onload &#x3D; animate&#x2F;&#x2F; 页面加载完毕后执行动画函数\n\n&lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>以上demo总结来说，使用了 Three.js 库创建了一个简单的绿色立方体模型，并实现了旋转动画效果。 总结一下它的步骤：</p>\n<ol>\n<li><p><strong>创建立方体模型：</strong></p>\n<ul>\n<li>使用 BoxGeometry 类创建了一个边长为 1 的立方体几何体。</li>\n<li>使用 MeshBasicMaterial 类创建了一个绿色的基本网格材质。</li>\n<li>将几何体和材质传递给 Mesh 类创建了一个立方体网格对象。</li>\n</ul>\n</li>\n<li><p><strong>将立方体添加到场景中：</strong></p>\n<ul>\n<li>使用 scene.add(cube) 将立方体模型添加到场景中，使其成为场景的一部分。</li>\n</ul>\n</li>\n<li><p><strong>设置摄像机位置：</strong></p>\n<ul>\n<li>将摄像机沿着 z 轴移动到距离原点 5 个单位的位置，以确定观察者的视角和展示效果。</li>\n</ul>\n</li>\n<li><p><strong>创建渲染循环：</strong></p>\n<ul>\n<li>定义了一个名为 animate 的函数，用于执行渲染循环。</li>\n<li>在 animate 函数中，使用 requestAnimationFrame 请求浏览器在下次重绘之前更新动画，然后对立方体模型进行 x 和 y 轴方向上的旋转操作，最后通过渲染器对场景进行渲染。</li>\n</ul>\n</li>\n<li><p><strong>启动动画渲染循环：</strong></p>\n<ul>\n<li>指定在页面加载完成后执行 animate 函数，从而启动动画渲染循环。</li>\n</ul>\n</li>\n</ol>\n<p>通过以上步骤，我们成功创建了一个具有旋转动画效果的绿色立方体模型，并将其显示在网页中。这个简单的示例展示了如何使用 Three.js 创建基本的 3D 模型并实现动画效果。</p>\n","feature":false,"text":"序言： 在现代互联网时代，Web 技术的快速发展使得 Web 开发领域日新月异。随着互联网内容变得越来越丰富、复杂，用户对于网页和应用程序的交互性和视觉效果提出了更高的要求。在这样的背景下，基于 WebGL 的 3D 图形技术越来越受到关注和重视。 而在众多的 3D 图形库中，T...","link":"","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"Three","slug":"Three","count":3,"path":"api/categories/Three.json"}],"tags":[{"name":"threr.js","slug":"threr-js","count":3,"path":"api/tags/threr-js.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BA%8F%E8%A8%80%EF%BC%9A\"><span class=\"toc-text\">序言：</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">核心概念</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%96%B9%E4%BD%93\"><span class=\"toc-text\">创建一个正方体</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%9C%BA%E6%99%AF%EF%BC%8C%E7%9B%B8%E6%9C%BA%EF%BC%8C%E6%B8%B2%E6%9F%93%E5%99%A8\"><span class=\"toc-text\">创建场景，相机，渲染器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AE%E6%B8%B2%E6%9F%93%E5%99%A8%E5%A4%A7%E5%B0%8F%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">设置渲染器大小参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E7%AB%8B%E6%96%B9%E4%BD%93%E7%89%A9%E4%BD%93\"><span class=\"toc-text\">创建立方体物体</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B8%B2%E6%9F%93%E5%9C%BA%E6%99%AF%E5%92%8C%E5%8A%A8%E7%94%BB\"><span class=\"toc-text\">渲染场景和动画</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">完整代码</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"mapped":true,"prev_post":{"title":"Three.js深入浅出：3-三维空间","uid":"46b02835844d99665ebb5686f07868c8","slug":"threeJS/Three.js深入浅出：3-三维空间","date":"2023-10-12T14:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/threeJS/Three.js深入浅出：3-三维空间.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/3.png","text":"序言： 在现代互联网时代，Web 技术的快速发展使得 Web 开发领域日新月异。随着互联网内容变得越来越丰富、复杂，用户对于网页和应用程序的交互性和视觉效果提出了更高的要求。在这样的背景下，基于 WebGL 的 3D 图形技术越来越受到关注和重视。 而在众多的 3D 图形库中，T...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"Three","slug":"Three","count":3,"path":"api/categories/Three.json"}],"tags":[{"name":"threr.js","slug":"threr-js","count":3,"path":"api/tags/threr-js.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false},"next_post":{"title":"Three.js深入浅出：1-搭建Three.js开发环境","uid":"28100a05c0122f653152ea41cfe72159","slug":"threeJS/Three.js深入浅出：1-搭建Three.js开发环境","date":"2023-10-04T14:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/threeJS/Three.js深入浅出：1-搭建Three.js开发环境.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/3.png","text":"序言： 在现代互联网时代，Web 技术的快速发展使得 Web 开发领域日新月异。随着互联网内容变得越来越丰富、复杂，用户对于网页和应用程序的交互性和视觉效果提出了更高的要求。在这样的背景下，基于 WebGL 的 3D 图形技术越来越受到关注和重视。 而在众多的 3D 图形库中，T...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"Three","slug":"Three","count":3,"path":"api/categories/Three.json"}],"tags":[{"name":"threr.js","slug":"threr-js","count":3,"path":"api/tags/threr-js.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false}}