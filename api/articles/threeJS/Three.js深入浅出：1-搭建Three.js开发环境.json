{"title":"Three.js深入浅出：1-搭建Three.js开发环境","uid":"28100a05c0122f653152ea41cfe72159","slug":"threeJS/Three.js深入浅出：1-搭建Three.js开发环境","date":"2023-10-04T14:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/threeJS/Three.js深入浅出：1-搭建Three.js开发环境.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/3.png","content":"<h1 id=\"序言：\"><a href=\"#序言：\" class=\"headerlink\" title=\"序言：\"></a>序言：</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在现代互联网时代，Web 技术的快速发展使得 Web 开发领域日新月异。随着互联网内容变得越来越丰富、复杂，用户对于网页和应用程序的交互性和视觉效果提出了更高的要求。在这样的背景下，基于 WebGL 的 3D 图形技术越来越受到关注和重视。</p>\n<p>而在众多的 3D 图形库中，Three.js 作为一款优秀的 JavaScript 3D 图形库，受到了广泛的欢迎和应用。无论是创建引人入胜的交互式 3D 场景、还是打造惊艳的虚拟现实体验，Three.js 都展现出了强大的潜力和灵活性。</p>\n<p>本系列文章将深入探讨 Three.js，从基础入门到高级应用，带领读者逐步掌握 Three.js 的核心概念和技术要点。我们将从搭建基本的 3D 场景开始，逐步引入光影、材质、纹理、动画等概念，让读者能够系统地掌握 Three.js 的开发技巧和实践经验。</p>\n<p>通过本系列文章的学习，读者将能够掌握使用 Three.js 创建精美的 3D 可视化效果，以及实现交互式的虚拟场景的能力。无论是 Web 开发工程师、还是对 3D 图形技术感兴趣的爱好者，都能够从中受益匪浅。</p>\n<p>让我们一起踏上 Three.js 的学习之旅，探索无限的创意可能性，开启属于自己的 3D 时代！<br>欢迎各位小伙伴们多多关注，你的点赞和评论是我写作的动力！👏🚀</p></blockquote>\n<h1 id=\"引入three-js的方式\"><a href=\"#引入three-js的方式\" class=\"headerlink\" title=\"引入three.js的方式\"></a>引入three.js的方式</h1><p>这里主要分为两种情况</p>\n<ol>\n<li>开发环境：项目开发引入threejs，比如vue或react脚手架引入threejs。</li>\n<li>学习环境：入门学习threejs阶段，html文件中直接引入threejs</li>\n</ol>\n<h1 id=\"开发环境下\"><a href=\"#开发环境下\" class=\"headerlink\" title=\"开发环境下\"></a>开发环境下</h1><h2 id=\"npm安装引入\"><a href=\"#npm安装引入\" class=\"headerlink\" title=\"npm安装引入\"></a>npm安装引入</h2><p>如果你使用的是<strong>Vue + threejs</strong>或<strong>React + threejs</strong>技术栈，那么threejs就是一个js库，直接通过<strong>npm</strong>命令行安装就行。</p>\n<p>npm安装特定版本three.js(注意使用哪个版本，查文档就查对应版本)</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">npm i three@版本号 --save\n\nyarn add three\n</code></pre>\n\n<p>使用npm安装之后在vue或者react组件里面直接使用es6的方式引入即可</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 引入three.js\nimport * as THREE from &#39;three&#39;;\n</code></pre>\n\n<h2 id=\"引入three扩展库\"><a href=\"#引入three扩展库\" class=\"headerlink\" title=\"引入three扩展库\"></a>引入three扩展库</h2><p>除了three.js核心库以外，在threejs文件包中<strong>examples/jsm</strong>目录下，还可以看到各种不同功能的扩展库。</p>\n<p>项目用到那个扩展库，就引入那个，用不到就不需要引入<br>比如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 引入扩展库OrbitControls.js\nimport &#123; OrbitControls &#125; from &#39;three&#x2F;addons&#x2F;controls&#x2F;OrbitControls.js&#39;;\n&#x2F;&#x2F; 引入扩展库GLTFLoader.js\nimport &#123; GLTFLoader &#125; from &#39;three&#x2F;addons&#x2F;loaders&#x2F;GLTFLoader.js&#39;;\n</code></pre>\n\n<h1 id=\"学习环境下\"><a href=\"#学习环境下\" class=\"headerlink\" title=\"学习环境下\"></a>学习环境下</h1><p>如果不是正式开发Web3D项目，只是学习threejs功能，完全没必要用webpack或vite搭建一个开发环境。</p>\n<p>学习使用的环境，只要创建一个.html文件，编写threejs代码，最后通过<strong>本地静态服务</strong>打开.html文件就行。</p>\n<h2 id=\"script标签引入\"><a href=\"#script标签引入\" class=\"headerlink\" title=\"script标签引入\"></a>script标签引入</h2><p>你可以像平时开发web前端项目一样，通过script标签把three.js当做一个js库引入你的项目。</p>\n<p>three.js库可以在threejs官方文件包下面的<strong>build</strong>目录获取到。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script src&#x3D;&quot;.&#x2F;build&#x2F;three.js&quot;&gt;&lt;&#x2F;script&gt;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F;随便输入一个API，测试下是否已经正常引入three.js\nconsole.log(THREE.Scene); </code></pre>\n\n<h4 id=\"ES6-import方式引入\"><a href=\"#ES6-import方式引入\" class=\"headerlink\" title=\"ES6 import方式引入\"></a>ES6 import方式引入</h4><p>给script标签设置<code>type=&quot;module&quot;</code>,也可以在.html文件中使用<code>import</code>方式引入three.js。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script type&#x3D;&quot;module&quot;&gt;\n&#x2F;&#x2F; 现在浏览器支持ES6语法，自然包括import方式引入js文件\nimport * as THREE from &#39;.&#x2F;build&#x2F;three.module.js&#39;;\n&lt;&#x2F;script&gt;</code></pre>\n\n<h4 id=\"type-”importmap”配置路径\"><a href=\"#type-”importmap”配置路径\" class=\"headerlink\" title=\"type=”importmap”配置路径\"></a>type=”importmap”配置路径</h4><p>学习环境中，.html文件引入three.js，最好的方式就是参考threejs官方案例，通过配置<code>&lt;script type=&quot;importmap&quot;&gt;</code>,实现学习环境.html文件和vue或reaact脚手架开发环境一样的写法。这样你实际项目的开发环境复制课程源码，不用改变threejs引入代码。</p>\n<p>下面配置的<code>type=&quot;importmap&quot;</code>代码具体写法不用掌握记忆，复制粘贴后，能修改目录就行，你可以去电子书课件或者课件源码中复制。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!-- 具体路径配置，你根据自己文件目录设置，我的是课件中源码形式 --&gt;\n&lt;script type&#x3D;&quot;importmap&quot;&gt;\n    &#123;\n\t\t&quot;imports&quot;: &#123;\n\t\t\t&quot;three&quot;: &quot;..&#x2F;..&#x2F;..&#x2F;three.js&#x2F;build&#x2F;three.module.js&quot;\n\t\t&#125;\n\t&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!-- 配置type&#x3D;&quot;importmap&quot;,.html文件也能和项目开发环境一样方式引入threejs --&gt;\n&lt;script type&#x3D;&quot;module&quot;&gt;\n    import * as THREE from &#39;three&#39;;\n    &#x2F;&#x2F; 浏览器控制台测试，是否引入成功\n    console.log(THREE.Scene);\n&lt;&#x2F;script&gt;</code></pre>\n\n\n<h2 id=\"CDN引入\"><a href=\"#CDN引入\" class=\"headerlink\" title=\"CDN引入\"></a>CDN引入</h2><p>通过将文件上传到你自己的服务器，或是使用一个已存在的CDN，three.js 便可以不借助任何构建系统来进行使用。由于 three.js 依赖于ES module，因此任何引用它的script标签必须使用<em>type=”module”</em> 。如下所示：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;script type&#x3D;&quot;importmap&quot;&gt;\n    &#123;\n    &quot;imports&quot;: \n        &#123; &quot;three&quot;:&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;three@&lt;version&gt;&#x2F;build&#x2F;three.module.js&quot; &#125;\n    &#125; \n&lt;&#x2F;script&gt;\n&lt;script type&#x3D;&quot;module&quot;&gt;\n    import * as THREE from &#39;three&#39;; \n    const scene &#x3D; new THREE.Scene();\n&lt;&#x2F;script&gt;</code></pre>\n\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><h3 id=\"CommonJS-导入\"><a href=\"#CommonJS-导入\" class=\"headerlink\" title=\"CommonJS 导入\"></a>CommonJS 导入</h3><p>虽然现代的 JavaScript 打包器已经默认支持ES module，然而也有一些较旧的构建工具并不支持。对于这些情况，你或许可以对这些打包器进行配置，让它们能够理解 ES module 。例如，<a href=\"http://browserify.org/\">Browserify</a> 仅需 <a href=\"https://github.com/babel/babelify\">babelify</a> 插件。</p>\n<h3 id=\"Import-maps\"><a href=\"#Import-maps\" class=\"headerlink\" title=\"Import maps\"></a>Import maps</h3><p>和从静态主机或CDN来进行安装的方式相比，从npm安装时，导入的路径有所不同。我们意识到，对于使用两种不同方式的用户群体来说，这是一个人体工程学问题。使用构建工具与打包器的开发者更喜欢仅使用单独的包说明符（如’three’）而非相对路径，而<em>examples/</em> 目录中的文件使用相对于 <em>three.module.js</em> 的引用并不符合这一期望。对于不使用构建工具的人（用于快速原型、学习或个人参考）来说，或许也会很反感这些相对导入。这些相对导入需要确定目录结构，并且比全局 <em>THREE.</em>*  命名空间更不宽容。</p>\n<p>我们希望在 <a href=\"https://github.com/WICG/import-maps\">import maps</a> 广泛可用时，能够移除这些相对路径，将它们替换为单独的包说明符，’three’。这更加符合构建工具对npm包的期望，且使得两种用户群体在导入文件时能够编写完全相同的代码。对于更偏向于避免使用构建工具的用户来说，一个简单的 JSON 映射即可将所有的导入都定向到一个 CDN 或是静态文件夹。通过实验，目前你可以通过一个 import map 的 polyfill，来尝试更简洁的导入，如 <a href=\"https://glitch.com/edit/#!/three-import-map?path=index.html\">import map example</a> 示例中所示。</p>\n<h3 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h3><p>由于 three.js 是为 Web 构建的, 因此它依赖于浏览器和 DOM 的 API ，但这些 API 在 Node.js 里不一定存在。这些问题中有的可以使用 <a href=\"https://github.com/stackgl/headless-gl\">headless-gl</a> 等 shims 来解决，或者用自定义的替代方案来替换像 <a href=\"http://www.yanhuangxueyuan.com/threejs/docs/index.html#api/zh/loaders/TextureLoader\" title=\"TextureLoader\">TextureLoader</a> 这样的组件。其他 DOM API 可能与使用它们的代码强相关，因此将更难以解决。我们欢迎简单且易于维护的 pull request 来改进对 Node.js 的支持，但建议先打开问题来讨论您的改进。</p>\n<p>确保在您的 package.json 文件中添加 { “type”: “module” }，以在您的 Node.js 项目中启用 ES6 模块。</p>\n","feature":false,"text":"序言： 在现代互联网时代，Web 技术的快速发展使得 Web 开发领域日新月异。随着互联网内容变得越来越丰富、复杂，用户对于网页和应用程序的交互性和视觉效果提出了更高的要求。在这样的背景下，基于 WebGL 的 3D 图形技术越来越受到关注和重视。 而在众多的 3D 图形库中，T...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"Three","slug":"Three","count":3,"path":"api/categories/Three.json"}],"tags":[{"name":"threr.js","slug":"threr-js","count":3,"path":"api/tags/threr-js.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BA%8F%E8%A8%80%EF%BC%9A\"><span class=\"toc-text\">序言：</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5three-js%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">引入three.js的方式</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8B\"><span class=\"toc-text\">开发环境下</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#npm%E5%AE%89%E8%A3%85%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">npm安装引入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5three%E6%89%A9%E5%B1%95%E5%BA%93\"><span class=\"toc-text\">引入three扩展库</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E4%B8%8B\"><span class=\"toc-text\">学习环境下</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#script%E6%A0%87%E7%AD%BE%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">script标签引入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ES6-import%E6%96%B9%E5%BC%8F%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">ES6 import方式引入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#type-%E2%80%9Dimportmap%E2%80%9D%E9%85%8D%E7%BD%AE%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">type&#x3D;”importmap”配置路径</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CDN%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">CDN引入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%BC%E5%AE%B9%E6%80%A7\"><span class=\"toc-text\">兼容性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CommonJS-%E5%AF%BC%E5%85%A5\"><span class=\"toc-text\">CommonJS 导入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Import-maps\"><span class=\"toc-text\">Import maps</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Node-js\"><span class=\"toc-text\">Node.js</span></a></li></ol></li></ol></li></ol>","author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"mapped":true,"prev_post":{"title":"Three.js深入浅出：2-创建三维场景和物体","uid":"99813f5b526e93cf8eb8d3f2ce7c5c5f","slug":"threeJS/Three.js深入浅出：2-创建三维场景和物体","date":"2023-10-10T14:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/threeJS/Three.js深入浅出：2-创建三维场景和物体.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/3.png","text":"序言： 在现代互联网时代，Web 技术的快速发展使得 Web 开发领域日新月异。随着互联网内容变得越来越丰富、复杂，用户对于网页和应用程序的交互性和视觉效果提出了更高的要求。在这样的背景下，基于 WebGL 的 3D 图形技术越来越受到关注和重视。 而在众多的 3D 图形库中，T...","link":"","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"Three","slug":"Three","count":3,"path":"api/categories/Three.json"}],"tags":[{"name":"threr.js","slug":"threr-js","count":3,"path":"api/tags/threr-js.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false},"next_post":{"title":"一文带你了解call、apply、bind的区别及源码实现","uid":"9d169bb0c28cbff70a428eb8d736c659","slug":"js/一文带你了解call、apply、bind的区别及源码实现","date":"2023-10-03T18:46:35.000Z","updated":"2024-12-25T06:40:06.000Z","comments":true,"path":"api/articles/js/一文带你了解call、apply、bind的区别及源码实现.json","keywords":"前端少年汪,前端,后端,全栈工程师,程序员,vue,react,Golang,Java,JavaScript,Python,frontendBoy-Wang","cover":"../img/0.png","text":"前言call、apply和bind都是JavaScript中Function对象的原型方法，它们的作用主要是改变函数的执行上下文（即this的值）以及传递参数。 什么是js上下文在讲解这三个方法之前，我先需要了解一下什么是js的上下文。 执行上下文是JavaScript中的一个重...","link":"","photos":[],"count_time":{"symbolsCount":"7.2k","symbolsTime":"7 mins."},"categories":[{"name":"前端","slug":"前端","count":5,"path":"api/categories/前端.json"},{"name":"js","slug":"前端/js","count":2,"path":"api/categories/前端/js.json"}],"tags":[{"name":"js","slug":"js","count":1,"path":"api/tags/js.json"}],"author":{"name":"前端少年汪","slug":"blog-author","avatar":"https://p3-passport.byteimg.com/img/user-avatar/46cf67c329246db441271a06f6132633~100x100.awebp","link":"/","description":"一个追逐技术的全栈工程师 <br /> @ <b>公众号：前端少年汪</b>","socials":{"github":"https://github.com/frontendBoy-Wang","twitter":"","stackoverflow":"https://stackoverflow.com/users/16856904/frontendboy-wang","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/qian-ke-sao-ren-wmq","csdn":"https://blog.csdn.net/qq_44647871?spm=1010.2135.3001.5421","juejin":"https://juejin.cn/user/3570847174897447","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/392982262"}}}},"feature":false}}